{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__25__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","OperatorKind","common_1","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","_super","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","resolver","Resolver","sources","__extends","getSource","k","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","set","internalName","currentFilespace","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","declaration","element","tryLocateImport","externalName","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","parent","path","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","alias","Error","has","instance","resolveClass","Duplicate_identifier_0","programLevelInternalName","type","FUNCTION_PROTOTYPE","startFunction","isAny","GENERIC","AMBIENT","MAIN","resolveFunction","members","signature","parameterTypes","signatureReference","returnType","globalName","is","Global","NONE","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","decorators","acceptedFlags","presentFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","BUILTIN","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","GLOBAL","SOURCE","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","identifier","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","STATIC","staticField","INLINE","READONLY","findDecorator","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","EXTERNAL","declarations","initializeImport","namespaceName","indexPart","endsWith","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","typeParameters","global_1","CONST","Element","program","flags","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","initializer","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","CLASS","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","typeArguments","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","toType","fromSize","byteSize","toSize","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createSignature","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","expression","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","SourceKind","Statement","Source","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","__export","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","g","eval","e","window","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","ReportMode","currentThisExpression","currentElementExpression","resolveType","reportMode","REPORT","resolveSignature","typeNode","Type_0_is_not_generic","resolveClassInclTypeArguments","typeArgumentNodes","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","resolveTypeArguments","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","context","resolvePropertyAccess","propertyAccess","contextualFunction","targetExpression","resolveExpression","propertyName","Property_0_does_not_exist_on_type_1","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccess","elementAccess","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","resolveFunctionInclTypeArguments","functionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","isInstance","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","reportNode","resolvedTypeArguments","_e","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","_f","_g","inheritedMember","constructorPartial","_h","_j","fieldDeclaration","fieldType","baseField","Type_expected","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","overloadPrototype","operatorInstance","operatorPartial","typeParameterNodes","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableExported","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","fullName","ctor","compileSourceByPath","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","compileObjectLiteral","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","field","nativeFieldType","parentElement","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","readI32","readI64","lo","hi","readF32","i32_as_f32","f32_as_i32","readF64","i64_as_f64","valueI64","f64_as_i64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","messageArg","filenameArg","ensureGCHook","existingIndex","customGC","nativeSizeSize","baseInstance","allocateInstance","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","F64","F32","I32","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","x","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","binaryen","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","emitText","emitAsmjs"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,QAAA,YAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAKAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,2BAEAA,IAAA,kCAEAA,IAAA,sBAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,sBAIAA,IAAA,2BArEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,iBAyEC3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,iBAAmB,uFCvFhC,IAeYC,EAfZC,EAAA9C,EAAA,IAKA+C,EAAA/C,EAAA,GAIAgD,EAAAhD,EAAA,IAgBA,SAAAiD,EAA2CC,GACzC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,MAAO,OACrC,KAAKN,EAAmBO,QAAS,MAAO,UACxC,KAAKP,EAAmBQ,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAeb,SAAAC,EAA0CL,GACxC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,OAAO5D,EAAAiE,WACrC,KAAKX,EAAmBO,QAAS,OAAO7D,EAAAkE,aACxC,KAAKZ,EAAmBQ,MAAO,OAAO9D,EAAAmE,UACtC,QAEE,OADAJ,QAAO,GACA,IA5CX/D,EAAAoE,eAAAX,EAAAW,eACApE,EAAAqE,uBAAAZ,EAAAY,uBAIF,SAAYf,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAtD,EAAAsD,qBAAAtD,EAAAsD,wBAUZtD,EAAA0D,6BAaa1D,EAAAiE,WAAqB,QAErBjE,EAAAkE,aAAuB,QAEvBlE,EAAAmE,UAAoB,QAEpBnE,EAAAsE,YAAsB,OAGnCtE,EAAAgE,4BAaA,IAAAO,EAAA,WAYE,SAAAA,EAAoBC,EAAWb,EAA8Bc,GAH7DnE,KAAAoE,MAAsB,KAIpBpE,KAAKkE,KAAOA,EACZlE,KAAKqD,SAAWA,EAChBrD,KAAKmE,QAAUA,EA4EnB,OAxESF,EAAAtC,OAAP,SACEuC,EACAb,EACAgB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUlB,EAAAc,uBAAuBG,GAIrC,OAHY,MAARG,IAAcF,EAAUA,EAAQK,QAAQ,MAAOH,IACvC,MAARC,IAAcH,EAAUA,EAAQK,QAAQ,MAAOF,IACvC,MAARC,IAAcJ,EAAUA,EAAQK,QAAQ,MAAOD,IAC5C,IAAIN,EAAkBC,EAAMb,EAAUc,IAIxCF,EAAAQ,WAAP,SACEP,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBtC,OAAOuC,EAAMlB,EAAmBM,KAAMe,EAAMC,IAIhEL,EAAAS,cAAP,SACER,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBtC,OAAOuC,EAAMlB,EAAmBO,QAASc,EAAMC,IAInEL,EAAAU,YAAP,SACET,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBtC,OAAOuC,EAAMlB,EAAmBQ,MAAOa,EAAMC,IAIxEL,EAAAhC,UAAA2C,UAAA,SAAUR,GAER,OADApE,KAAKoE,MAAQA,EACNpE,MAITiE,EAAAhC,UAAA4C,SAAA,WACE,OAAI7E,KAAKoE,MAELhB,EAA2BpD,KAAKqD,UAChC,IACArD,KAAKkE,KAAKW,SAAS,IACnB,MACA7E,KAAKmE,QACL,QACAnE,KAAKoE,MAAMU,OAAOC,eAClB,IACA/E,KAAKoE,MAAMY,KAAKH,SAAS,IACzB,IACA7E,KAAKoE,MAAMa,OAAOJ,SAAS,IAI7BzB,EAA2BpD,KAAKqD,UAChC,IACArD,KAAKkE,KAAKW,SAAS,IACnB,KACA7E,KAAKmE,SAGXF,EA3FA,GAqIA,SAAAiB,EAAwCd,EAAce,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIC,EAAOhB,EAAMU,OAAOM,KACpBC,EAAMD,EAAKE,OACXC,EAAQnB,EAAMmB,MACdC,EAAMpB,EAAMoB,IACTD,EAAQ,IAAMrC,EAAAuC,YAAYL,EAAKM,WAAWH,EAAQ,KAAKA,IAC9D,KAAOC,EAAMH,IAAQnC,EAAAuC,YAAYL,EAAKM,WAAWF,KAAOA,IAMxD,IALA,IAAIG,GACF,MACAP,EAAKQ,UAAUL,EAAOC,GACtB,OAEKD,EAAQnB,EAAMmB,OACnBI,EAAGE,KAAK,KACRN,IAGF,GADIJ,GAAWQ,EAAGE,KAAKnG,EAAAmE,WACnBO,EAAMmB,OAASnB,EAAMoB,IACvBG,EAAGE,KAAK,UAER,KAAON,IAAUnB,EAAMoB,KAAKG,EAAGE,KAAK,KAGtC,OADIV,GAAWQ,EAAGE,KAAKnG,EAAAsE,aAChB2B,EAAGG,KAAK,IA5JJpG,EAAAuE,oBA8FbvE,EAAAqG,wBAAA,SACE5B,EACAgB,EACAa,QADA,IAAAb,OAAA,QACA,IAAAa,OAAA,GAIA,IAAIL,KAUJ,GATIR,GAAWQ,EAAGE,KAAKnC,EAA0BS,EAAQd,WACzDsC,EAAGE,KAAKzC,EAA2Be,EAAQd,WACvC8B,GAAWQ,EAAGE,KAAKnG,EAAAsE,aACvB2B,EAAGE,KAAK1B,EAAQD,KAAO,IAAO,MAAQ,OACtCyB,EAAGE,KAAK1B,EAAQD,KAAKW,SAAS,KAC9Bc,EAAGE,KAAK,MACRF,EAAGE,KAAK1B,EAAQA,SAGZA,EAAQC,MAAO,CAGjB,IAAIA,EAAQD,EAAQC,MAChB4B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBf,EAAQC,MAAOe,KAGjDQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKzB,EAAMU,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAKzB,EAAMY,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAKzB,EAAMa,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,KAEV,OAAOF,EAAGG,KAAK,KAIjBpG,EAAAwF,0BA2BA,IAAAe,EAAA,WAME,SAAAA,EAAsBC,QAAA,IAAAA,MAAA,MACpBlG,KAAKkG,YAAcA,GAAiD,IAAIC,MAkD5E,OA9CEF,EAAAhE,UAAAmE,eAAA,SACElC,EACAb,EACAe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUF,EAAkBtC,OAAOuC,EAAMb,EAAUgB,EAAMC,EAAMC,GAAMK,UAAUR,GACnFpE,KAAKkG,YAAYL,KAAK1B,IAMxB8B,EAAAhE,UAAAoE,KAAA,SACEnC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvE,KAAKoG,eAAelC,EAAMlB,EAAmBM,KAAMc,EAAOC,EAAMC,EAAMC,IAIxE0B,EAAAhE,UAAAqE,QAAA,SACEpC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvE,KAAKoG,eAAelC,EAAMlB,EAAmBO,QAASa,EAAOC,EAAMC,EAAMC,IAI3E0B,EAAAhE,UAAAsE,MAAA,SACErC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvE,KAAKoG,eAAelC,EAAMlB,EAAmBQ,MAAOY,EAAOC,EAAMC,EAAMC,IAE3E0B,EAzDA,GAAsBvG,EAAAuG,q5BCjOtB,IAyIYO,EAzIZC,EAAAtG,EAAA,GAgBAuG,EAAAvG,EAAA,GAMAwG,EAAAxG,EAAA,GAOAyG,EAAAzG,EAAA,GAsCA0G,EAAA1G,EAAA,GAsCA2G,EAAA3G,EAAA,GAKA4G,EAAA,WAKA,OALA,gBAQAC,EAAA,WAIA,OAJA,gBAOAC,EAAA,WAGA,OAHA,gBA4DA,SAAAC,EAAmCC,EAA8BC,GAE/D,OADA3D,OAAO2D,EAAI9B,QACH6B,GACN,KAAKP,EAAAS,cAAcC,SACnB,KAAKV,EAAAS,cAAcE,gBACjB,OAAQH,EAAI1B,WAAW,IACrB,QACE,GAAW,MAAP0B,EAAa,OAAOZ,EAAagB,YACrC,GAAW,OAAPJ,EAAc,OAAOZ,EAAaiB,YACtC,MAEF,SACE,GAAW,MAAPL,EAAa,OAAOZ,EAAakB,sBACrC,GAAW,OAAPN,EAAc,OAAOZ,EAAamB,sBACtC,MAEF,QACE,GAAW,KAAPP,EAAY,OAAOZ,EAAaoB,IACpC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOZ,EAAaqB,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOZ,EAAasB,IACpC,GAAW,MAAPV,EAAa,OAAOZ,EAAauB,IACrC,MAEF,QACE,GAAW,KAAPX,EAAY,OAAOZ,EAAawB,IACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOZ,EAAayB,IACpC,MAEF,QACE,GAAW,KAAPb,EAAY,OAAOZ,EAAa0B,YACpC,MAEF,SACE,GAAW,KAAPd,EAAY,OAAOZ,EAAa2B,WACpC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOZ,EAAa4B,YACpC,MAEF,QACE,GAAW,MAAPhB,EAAa,OAAOZ,EAAa6B,GACrC,MAEF,QACE,GAAW,MAAPjB,EAAa,OAAOZ,EAAa8B,GACrC,MAEF,QACE,GAAW,KAAPlB,EAAY,OAAOZ,EAAa+B,GACpC,GAAW,MAAPnB,EAAa,OAAOZ,EAAagC,GACrC,GAAW,MAAPpB,EAAa,OAAOZ,EAAaiC,YACrC,GAAW,OAAPrB,EAAc,OAAOZ,EAAakC,cACtC,MAEF,QACE,GAAW,KAAPtB,EAAY,OAAOZ,EAAamC,GACpC,GAAW,MAAPvB,EAAa,OAAOZ,EAAaoC,GACrC,GAAW,MAAPxB,EAAa,OAAOZ,EAAaqC,YAIzC,MAEF,KAAKjC,EAAAS,cAAcyB,gBACjB,OAAQ1B,EAAI1B,WAAW,IACrB,QACE,GAAW,KAAP0B,EAAY,OAAOZ,EAAauC,KACpC,GAAW,MAAP3B,EAAa,OAAOZ,EAAawC,WACrC,MAEF,QACE,GAAW,KAAP5B,EAAY,OAAOZ,EAAayC,MACpC,GAAW,MAAP7B,EAAa,OAAOZ,EAAa0C,WACrC,MAEF,QACE,GAAW,KAAP9B,EAAY,OAAOZ,EAAa2C,IACpC,MAEF,SACE,GAAW,KAAP/B,EAAY,OAAOZ,EAAa4C,YAIxC,MAEF,KAAKxC,EAAAS,cAAcgC,iBACjB,OAAQjC,EAAI1B,WAAW,IACrB,QACE,GAAW,MAAP0B,EAAa,OAAOZ,EAAa8C,YACrC,MAEF,QACE,GAAW,MAAPlC,EAAa,OAAOZ,EAAa+C,aAO7C,OAAO/C,EAAagD,SA9JtB,SAAYhD,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAA9G,EAAA8G,eAAA9G,EAAA8G,kBAiKZ,IA8tDYiD,EAmCAC,EAjwDNC,EAAa,IAAIC,IAGvBC,EAAA,SAAAC,GAkDE,SAAAD,EAAY3D,QAAA,IAAAA,MAAA,MAAZ,IAAA6D,EACED,EAAAtJ,KAAAR,KAAMkG,IAAYlG,YA5CpB+J,EAAAC,kBAAyB,EAKzBD,EAAAE,eAAsC,IAAIL,IAE1CG,EAAAG,gBAAuC,IAAIN,IAE3CG,EAAAI,YAAgCR,EAEhCI,EAAAK,YAAqC,IAAIR,IAEzCG,EAAAM,iBAAwC,IAAIT,IAE5CG,EAAAO,mBAA+C,IAAIV,IAGnDG,EAAAQ,eAAwC,KAExCR,EAAAS,eAA+B,KAI/BT,EAAAU,aAAyC,KAEzCV,EAAAW,cAAiC,KAEjCX,EAAAY,uBAA0C,KAG1CZ,EAAAa,OAAc,EAEdb,EAAAc,mBAAsC,KAEtCd,EAAAe,eAAkC,KAElCf,EAAAgB,eAAkC,KAQhChB,EAAKiB,SAAW,IAAIlE,EAAAmE,SAASlB,GAC7BA,EAAKmB,aAmqDT,OAxtD6BC,EAAAtB,EAAAC,GAyD3BD,EAAA5H,UAAAmJ,UAAA,SAAUrG,GAER,IADA,IAAImG,EAAUlL,KAAKkL,QACV7K,EAAI,EAAGgL,EAAIH,EAAQ5F,OAAQjF,EAAIgL,IAAKhL,EAAG,CAC9C,IAAIyE,EAASoG,EAAQ7K,GACrB,GAAIyE,EAAOC,gBAAkBA,EAAgB,OAAOD,EAEtD,OAAO,MAIT+E,EAAA5H,UAAAqJ,mBAAA,SAAmBC,GACjB,IAAIC,EACJ,OACExL,KAAKoL,UAAUG,EAAiC,QAChDvL,KAAKoL,UAAUG,EAAiC,cAChDvL,KAAKoL,WAAWI,EAAM/E,EAAA3D,eAAiByI,GAAkC,QACzEvL,KAAKoL,UAAWI,EAAyD,cAK7E3B,EAAA5H,UAAAwJ,WAAA,SAAWC,eACT1L,KAAK0L,QAAUA,EAGf1L,KAAKmK,YAAc,IAAIP,MACpB,KAAMjD,EAAAgF,KAAKC,KACX,MAAOjF,EAAAgF,KAAKE,MACZ,MAAOlF,EAAAgF,KAAKG,MACZ,MAAOnF,EAAAgF,KAAKI,MACZ,QAASL,EAAQM,YACjB,KAAMrF,EAAAgF,KAAKM,KACX,MAAOtF,EAAAgF,KAAKO,MACZ,MAAOvF,EAAAgF,KAAKQ,MACZ,MAAOxF,EAAAgF,KAAKS,MACZ,QAASV,EAAQW,YACjB,OAAQ1F,EAAAgF,KAAKW,OACb,MAAO3F,EAAAgF,KAAKY,MACZ,MAAO5F,EAAAgF,KAAKa,MACZ,OAAQ7F,EAAAgF,KAAKc,OACb,SAAU9F,EAAAgF,KAAKa,MACf,UAAW7F,EAAAgF,KAAKW,QAInBtM,KAAK0M,mBAAmB,aAAc/F,EAAAgF,KAAKG,IACzCa,QAAQjB,EAAQkB,SAAW,EAAI,IACjC5M,KAAK0M,mBAAmB,qBAAsB/F,EAAAgF,KAAKW,KACjDK,QAAQjB,EAAQmB,cAAgB,EAAI,EAAG,IACzC7M,KAAK0M,mBAAmB,gBAAiB/F,EAAAgF,KAAKW,KAC5CK,QAAQjB,EAAQoB,SAAW,EAAI,EAAG,IACpC9M,KAAK0M,mBAAmB,kBAAmB/F,EAAAgF,KAAKG,IAC9Ca,QAAQjB,EAAQqB,WAAY,IAC9B/M,KAAK0M,mBAAmB,qBAAsB/F,EAAAgF,KAAKG,IACjDa,QAAQjB,EAAQsB,kBAAmB,IACrChN,KAAK0M,mBAAmB,mBAAoB/F,EAAAgF,KAAKG,IAC/Ca,QAAQjB,EAAQuB,gBAAiB,IACnCjN,KAAK0M,mBAAmB,6BAA8B/F,EAAAgF,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAC9DlN,KAAK0M,mBAAmB,6BAA8B/F,EAAAgF,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAS9D,IANA,IAAIC,EAAgB,IAAIhH,MACpBiH,EAAgB,IAAIxD,IACpByD,EAAgB,IAAIlH,MACpBmH,EAAmB,IAAInH,MAGlB9F,EAAI,EAAGgL,EAAIrL,KAAKkL,QAAQ5F,OAAQjF,EAAIgL,IAAKhL,EAAG,CACnD,IAAIyE,EAAS9E,KAAKkL,QAAQ7K,GAGtBkN,EAAY,IAAIC,EAAUxN,KAAM8E,GACpC9E,KAAKiK,eAAewD,IAAIF,EAAUG,aAAcH,GAChDvN,KAAK2N,iBAAmBJ,EAIxB,IADA,IAAIK,EAAa9I,EAAO8I,WACfC,EAAI,EAAGvN,EAAIsN,EAAWtI,OAAQuI,EAAIvN,IAAKuN,EAAG,CACjD,IAAIC,EAAYF,EAAWC,GAC3B,OAAQC,EAAUC,MAChB,KAAKnH,EAAAoH,SAASC,iBACZjO,KAAKkO,gBAAkCJ,EAAWT,EAAeC,GACjE,MAEF,KAAK1G,EAAAoH,SAASG,gBACZnO,KAAKoO,eAAgCN,GACrC,MAEF,KAAKlH,EAAAoH,SAASK,OACZrO,KAAKsO,kBAAmCR,EAAWV,GACnD,MAEF,KAAKxG,EAAAoH,SAASO,oBACZvO,KAAKwO,mBAAwCV,GAC7C,MAEF,KAAKlH,EAAAoH,SAASS,OACZzO,KAAK0O,kBAAmCZ,EAAWV,EAAeD,GAClE,MAEF,KAAKvG,EAAAoH,SAASW,qBACZ3O,KAAK4O,oBAA0Cd,GAC/C,MAEF,KAAKlH,EAAAoH,SAASa,qBACZ7O,KAAK8O,oBAA0ChB,EAAWT,EAAeC,GACzE,MAEF,KAAK1G,EAAAoH,SAASe,gBACZ/O,KAAKgP,oBAAqClB,GAC1C,MAEF,KAAKlH,EAAAoH,SAASiB,SACZjP,KAAKkP,oBAAuCpB,KAQpD,IAASzN,EAAI,EAAGA,EAAI8M,EAAc7H,QAAS,CACzC,IAAI6J,EAAehC,EAAc9M,GAEjC,GADI+O,EAAcD,EAAaC,aAEzBC,EAAUrP,KAAKsP,gBAAgBH,EAAaI,aAAcnC,KAE5DpN,KAAKiK,eAAewD,IAAI0B,EAAaK,UAAWH,GAChDlC,EAAcsC,OAAOpP,EAAG,KAEpBgP,EAAUrP,KAAKsP,gBAAgBH,EAAaO,gBAAiBtC,KAC/DpN,KAAKiK,eAAewD,IAAI0B,EAAaK,UAAWH,GAChDlC,EAAcsC,OAAOpP,EAAG,KAExBL,KAAKuG,MACHG,EAAA5C,eAAe6L,kCACfP,EAAYhL,MACMgL,EAAYQ,OAAQC,KAAKvO,MAC3C8N,EAAYG,aAAanK,QAEzB/E,QAIFgP,EAAUrP,KAAKiK,eAAe/I,IAAIiO,EAAaI,gBAEjDvP,KAAKiK,eAAewD,IAAI0B,EAAaK,UAAWH,GAChDlC,EAAcsC,OAAOpP,EAAG,KAEpBgP,EAAUrP,KAAKiK,eAAe/I,IAAIiO,EAAaO,mBACjD1P,KAAKiK,eAAewD,IAAI0B,EAAaK,UAAWH,GAChDlC,EAAcsC,OAAOpP,EAAG,KAExBoD,QAAO,KACLpD,OAOV,IAAuC,IAAAyP,EAAAC,EAAA3C,GAAa4C,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAA7C,IAAAE,EAAAC,EAAAJ,EAAA1O,MAAA,GAAC+O,EAAAF,EAAA,GAAYG,EAAAH,EAAA,GAChBI,EAAqCD,EACrCjB,OAAO,EACX,EAAG,CACD,IAAIkB,EAAcC,WAkBX,EAGFnB,EAAUrP,KAAKiK,eAAe/I,IAAIqP,EAAchB,iBAEhDF,EAAUrP,KAAKiK,eAAe/I,IAAIqP,EAAcE,OAAO7P,KAAKwE,OAE7DpF,KAAK0Q,yBACHL,EACAhB,EACAkB,EAAcE,OAAOlB,cAGvBvP,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACfL,EAAaG,OAAOrM,MAAOkM,EAAaG,OAAO7P,KAAKwE,MAGxD,MAnCA,GAAIiK,EAAUrP,KAAKqK,iBAAiBnJ,IAAIqP,EAAchB,cAAe,CACnEvP,KAAK0Q,yBACHL,EACAhB,EACAkB,EAAcE,OAAOlB,cAEvB,OAEFgB,EAAgBnD,EAAclM,IAAIqP,EAAchB,gBAE9CvP,KAAKuG,MACHG,EAAA5C,eAAe6L,kCACfW,EAAaG,OAAOlB,aAAanL,MACWkM,EAAaG,OAAOb,OAAQC,KAAMvO,MAC9EgP,EAAaG,OAAOlB,aAAanK,YAuBhCmL,qGAIX,IAAIvF,EAAWhL,KAAKgL,SACpB,IAAS3K,EAAI,EAAGgL,EAAIgC,EAAc/H,OAAQjF,EAAIgL,IAAKhL,EAAG,CACpD,IAAIuQ,EAAmBvD,EAAchN,GACjCwQ,EAAqBD,EAAiBxB,YACtC0B,EAAcrN,OAAOoN,EAAmBE,aACxCC,EAAchG,EAASiG,kBAAkBH,EAAYlQ,KAAM,MAC/D,GAAKoQ,EACL,GAAIA,EAAYjD,MAAQtE,EAAYyH,gBAAiB,CACnD,IAAIC,EAAgCH,EACpCJ,EAAiBO,cAAgBA,OAEjCnR,KAAKuG,MACHG,EAAA5C,eAAesN,sCACfN,EAAY1M,OAOhB,IAAIiN,EAAgB3F,EAAQ2F,cAC5B,GAAIA,MACF,IAA0B,IAAAC,EAAAvB,EAAAsB,GAAaE,EAAAD,EAAArB,QAAAsB,EAAArB,KAAAqB,EAAAD,EAAArB,OAAE,CAAhC,IAAAuB,EAAApB,EAAAmB,EAAAjQ,MAAA,GAACmQ,EAAAD,EAAA,GAAO5Q,EAAA4Q,EAAA,GACf,GAAK5Q,EAAK0E,OAAV,CAEA,KADI+J,EAAUrP,KAAKiK,eAAe/I,IAAIN,IAEjC,MAAM,IAAI8Q,MAAM,sBAAwB9Q,GADhCZ,KAAKiK,eAAewD,IAAIgE,EAAOpC,sGAOlD,GAAIrP,KAAKiK,eAAe0H,IAAI,SAAU,CAChCtC,EAAU5L,OAAOzD,KAAKiK,eAAe/I,IAAI,UAC7CuC,OAAO4L,EAAQtB,MAAQtE,EAAYyH,iBACnClR,KAAKuK,eAAiC8E,EAIxC,GAAIrP,KAAKiK,eAAe0H,IAAI,UAAW,CACjCtC,EAAU5L,OAAOzD,KAAKiK,eAAe/I,IAAI,WAG7C,GAFAuC,OAAO4L,EAAQtB,MAAQtE,EAAYyH,iBAC/BU,EAAW5G,EAAS6G,aAA6BxC,EAAS,MAE5D,GAAIrP,KAAKmK,YAAYwH,IAAI,UAAW,CAClC,IAAIvC,EAA+BC,EAASD,YAC5CpP,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOgL,EAAY2C,+BAGtC/R,KAAKwK,eAAiBoH,EACtB5R,KAAKmK,YAAYsD,IAAI,SAAUmE,EAASI,MAOxC3C,EAAU5L,OAAOzD,KAAKiK,eAAe/I,IAAI,WAC7CuC,OAAO4L,EAAQtB,MAAQtE,EAAYwI,oBACnCjS,KAAKkS,cAAmC7C,EAItCrP,KAAKsK,mBAAmBqH,IAAI,YAC1BtC,EAAyBrP,KAAKsK,mBAAmBpJ,IAAI,QAASmO,SAExDtB,MAAQtE,EAAYwI,oBACP5C,EAAS8C,MAAM1L,EAAApE,YAAY+P,QAAU3L,EAAApE,YAAYgQ,WAElDhD,EAAS5B,IAAIhH,EAAApE,YAAYiQ,MAC7CtS,KAAKyK,aAAkC4E,IAK3C,GAAIrP,KAAKiK,eAAe0H,IAAI,SAAU,CAChCtC,EAAmBrP,KAAKiK,eAAe/I,IAAI,SAC/CuC,OAAO4L,EAAQtB,MAAQtE,EAAYwI,qBAC/BL,EAAW5R,KAAKgL,SAASuH,gBAAmClD,EAAS,SAC3DrP,KAAK0K,cAAgBkH,GAIrC,GAAI5R,KAAKiK,eAAe0H,IAAI,UAAW,CACrC,IAMQC,EALJY,GADAnD,EAAmBrP,KAAKiK,eAAe/I,IAAI,WACzBsR,QACtB,GAAIA,EACF,GAAIA,EAAQb,IAAI,YACdtC,EAAU5L,OAAO+O,EAAQtR,IAAI,aAC7BuC,OAAO4L,EAAQtB,MAAQtE,EAAYwI,qBAC/BL,EAAW5R,KAAKgL,SAASuH,gBAAmClD,EAAS,SAC3DrP,KAAK2K,uBAAyBiH,GAMlD,GACE5R,KAAKiK,eAAe0H,IAAI,kBACxB3R,KAAKiK,eAAe0H,IAAI,cACxB3R,KAAKiK,eAAe0H,IAAI,aACxB,CAEItC,EAAmBrP,KAAKiK,eAAe/I,IAAI,iBAC/CuC,OAAO4L,EAAQtB,MAAQtE,EAAYwI,oBACnC,IAAIpH,EAAqBpH,OAAOzD,KAAKgL,SAASuH,gBAAmClD,EAAS,OACtFoD,EAAY5H,EAAmB4H,UACnChP,OAA0C,GAAnCgP,EAAUC,eAAepN,QAChC7B,OAAOgP,EAAUC,eAAe,IAAM1S,KAAK0L,QAAQW,WACnD5I,OAAOgP,EAAUC,eAAe,GAAGC,oBACnClP,OAAOgP,EAAUG,YAAc5S,KAAK0L,QAAQW,WAG5CgD,EAAmBrP,KAAKiK,eAAe/I,IAAI,aAC3CuC,OAAO4L,EAAQtB,MAAQtE,EAAYwI,oBACnC,IAAInH,EAAiBrH,OAAOzD,KAAKgL,SAASuH,gBAAmClD,EAAS,OACtFoD,EAAY3H,EAAe2H,UAC3BhP,OAA0C,GAAnCgP,EAAUC,eAAepN,QAChC7B,OAAOgP,EAAUC,eAAe,IAAM1S,KAAK0L,QAAQW,WACnD5I,OAAOgP,EAAUC,eAAe,IAAM1S,KAAK0L,QAAQW,WACnD5I,OAAOgP,EAAUG,YAAcjM,EAAAgF,KAAKc,MAGpC4C,EAAmBrP,KAAKiK,eAAe/I,IAAI,aAC3CuC,OAAO4L,EAAQtB,MAAQtE,EAAYwI,oBACnC,IAAIlH,EAAiBtH,OAAOzD,KAAKgL,SAASuH,gBAAmClD,EAAS,OACtFoD,EAAY1H,EAAe0H,UAC3BhP,OAA0C,GAAnCgP,EAAUC,eAAepN,QAChC7B,OAAOgP,EAAUC,eAAe,IAAM1S,KAAK0L,QAAQW,WACnD5I,OAAOgP,EAAUG,YAAcjM,EAAAgF,KAAKc,MAEpCzM,KAAK6K,mBAAqBA,EAC1B7K,KAAK8K,eAAiBA,EACtB9K,KAAK+K,eAAiBA,EACtB/K,KAAK4K,OAAQ,IAKjBf,EAAA5H,UAAAyK,mBAAA,SAAmBmG,EAAoBb,EAAY1Q,GACjDmC,OAAOuO,EAAKc,GAAE,IACd9S,KAAKiK,eAAewD,IAAIoF,EACtB,IAAIE,EAAO/S,KAAM6S,EAAYA,EAAYb,EAAM,KAAMtI,EAAesJ,MACjEC,yBAAyB3R,KAKhCuI,EAAA5H,UAAAiR,iBAAA,SAAiBL,EAAoBb,EAAY1Q,GAC/CmC,OAAOuO,EAAKc,GAAE,IACd9S,KAAKiK,eAAewD,IAAIoF,EACtB,IAAIE,EAAO/S,KAAM6S,EAAYA,EAAYb,EAAM,KAAMtI,EAAesJ,MACjEG,uBAAuB7R,KAKtBuI,EAAA5H,UAAAqN,gBAAR,SACEC,EACA6D,GAIA,IAFA,IAAI/D,EACAhF,EAAmBrK,KAAKqK,mBACzB,CACD,GAAIgF,EAAUhF,EAAiBnJ,IAAIqO,GAAe,OAAOF,EACzD,IAAIiB,EAAe8C,EAAmBlS,IAAIqO,GAC1C,IAAKe,EAAc,MACnB,IAAIA,EAAaE,WAIjB,OAAOxQ,KAAKiK,eAAe/I,IAAIoP,EAAaf,cAH1CA,EAAee,EAAaf,aAKhC,OAAO,MAID1F,EAAA5H,UAAAoR,gBAAR,SACEC,EACAC,GAGA,IADA,IAAIC,EAAe9J,EAAesJ,KACzB3S,EAAI,EAAGgL,EAAIiI,EAAWhO,OAAQjF,EAAIgL,IAAKhL,EAAG,CACjD,IAAIoT,EAAYH,EAAWjT,GAEvBqT,EAAOC,EADA/M,EAAAgN,oBAAoBH,EAAU7S,OAErC8S,IACEA,GAAQhK,EAAemK,QACrBJ,EAAUrP,MAAMU,OAAOgP,UACzBN,GAAgBE,EAEhB1T,KAAKuG,MACHG,EAAA5C,eAAeiQ,8BACfN,EAAUrP,MAAOqP,EAAU7S,KAAKwD,MAAMS,YAG/B0O,EAAgBG,EAKlBF,EAAeE,EACxB1T,KAAKuG,MACHG,EAAA5C,eAAekQ,oBACfP,EAAUrP,MAAOqP,EAAU7S,KAAKwD,MAAMS,YAGxC2O,GAAgBE,EAVhB1T,KAAKuG,MACHG,EAAA5C,eAAeiQ,8BACfN,EAAUrP,MAAOqP,EAAU7S,KAAKwD,MAAMS,aAY9C,OAAO2O,GAID3J,EAAA5H,UAAAgS,YAAR,SACE5E,EACAD,GAEA,IAAI8E,EAAa9E,EAAYQ,OAE7B,GACGP,EAAQ8E,aAAazK,EAAe0K,SAEnChF,EAAYhL,MAAMU,OAAOgP,WACzBzE,EAAQyD,GAAGrM,EAAApE,YAAYgM,UAErB5K,OAAOyQ,GAAYnG,MAAQnH,EAAAoH,SAASqG,QAE5BH,EAAYnG,MAAQnH,EAAAoH,SAASiB,UACnCxL,OAAcyQ,EAAYtE,QAAQ7B,MAAQnH,EAAAoH,SAASqG,QAGzD,CACA,IAAIxB,EAAazD,EAAY2C,yBACzB/R,KAAKiK,eAAe0H,IAAIkB,GAC1B7S,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOiL,EAAQ3B,cAGlC1N,KAAKiK,eAAewD,IAAIoF,EAAYxD,GAIpCA,EAAQ8E,aAAazK,EAAemK,WACtCxE,EAAQ3B,aAAe0B,EAAY2C,2BAK/BlI,EAAA5H,UAAAiM,gBAAR,SACEkB,EACA/B,EACAC,EACAgH,QAAA,IAAAA,MAAA,MAEA,IAAI5G,EAAe0B,EAAYmF,sBAC/B,GAAIvU,KAAKiK,eAAe0H,IAAIjE,GAC1B1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,OAH5B,CAQA,IAAI4F,EAAalE,EAAYkE,WACzBkB,EAAapF,EAAYxO,KAAKwE,KAC9BnD,EAAY,IAAIwS,EAClBzU,KACAwU,EACA9G,EACA0B,EACAkE,EACItT,KAAKqT,gBAAgBC,EACnB5J,EAAe0K,OACf1K,EAAegL,OACfhL,EAAeiL,WAEjBjL,EAAesJ,MAErB/Q,EAAU2N,OAAS0E,EACnBtU,KAAKiK,eAAewD,IAAIC,EAAczL,GAEtC,IAAI2S,EAAkBxF,EAAYwF,gBAClC,GAAIA,EAAiB,CACnB,IAAIC,EAAqBD,EAAgBtP,OACzC,GAAIrD,EAAUkS,aAAazK,EAAeiL,WACpCE,GACF7U,KAAKuG,MACHG,EAAA5C,eAAegR,8CACflO,EAAAmO,MAAMjP,KACJsJ,EAAYxO,KAAKwD,MACjBwQ,EAAgBC,EAAqB,GAAGzQ,aAMzC,GAAIyQ,EAAoB,CAC7B,IAAK,IAAIxU,EAAI,EAAGA,EAAIwU,IAAsBxU,EACxCL,KAAKsG,QACHI,EAAA5C,eAAekR,wBACfJ,EAAgBvU,GAAG+D,OAGvBkJ,EAAiBzH,KAAK5D,IAQ1B,GAHImN,EAAY2B,aAAa1D,EAAcxH,KAAK5D,GAG5CqS,EAAW,CACb,GAAIA,EAAU9B,SACZ,GAAI8B,EAAU9B,QAAQb,IAAI6C,GAKxB,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5B4G,EAAU9B,QAAU,IAAI5I,IAE1B0K,EAAU9B,QAAQ/E,IAAI+G,EAAYvS,GAC9BqS,EAAUxB,GAAGrM,EAAApE,YAAY4S,gBAAkBhT,EAAU6Q,GAAGrM,EAAApE,YAAYgM,SACtEpM,EAAUwL,IAAIhH,EAAApE,YAAY4S,oBAIvB,GAAIhT,EAAU6Q,GAAGrM,EAAApE,YAAYgM,QAAS,CAC3C,GAAIrO,KAAKqK,iBAAiBsH,IAAIjE,GAK5B,YAJA1N,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACf9F,EAAYxO,KAAKwD,MAAOsJ,GAM5B,GAFA1N,KAAKqK,iBAAiBoD,IAAIC,EAAczL,GACxCjC,KAAK2N,iBAAiB6E,QAAQ/E,IAAI+G,EAAYvS,GAC1CA,EAAU6Q,GAAGrM,EAAApE,YAAYgM,SAAWe,EAAYhL,MAAMU,OAAOqQ,QAAS,CACxE,GAAInV,KAAKsK,mBAAmBqH,IAAI6C,GAAa,CAC3C,IAAIY,EAA+BpV,KAAKsK,mBAAmBpJ,IAAIsT,GAK/D,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACf9F,EAAYxO,KAAKwD,MAAOgR,EAAe/F,QAAQ3B,cAInDzL,EAAUwL,IAAIhH,EAAApE,YAAY4S,eAC1BjV,KAAKsK,mBAAmBmD,IAAI+G,GAC1BnF,QAASpN,EACToT,WAAYjG,EAAYxO,QAO9B,IADA,IAAI0U,EAAqBlG,EAAYoD,QACrBnH,GAAPhL,EAAI,EAAOiV,EAAmBhQ,QAAQjF,EAAIgL,IAAKhL,EAAG,CACzD,IAAIkV,EAAoBD,EAAmBjV,GAC3C,OAAQkV,EAAkBxH,MACxB,KAAKnH,EAAAoH,SAASwH,iBACZxV,KAAKyV,gBAAkCF,EAAmBtT,GAC1D,MAEF,KAAK2E,EAAAoH,SAAS0H,kBACRH,EAAkBpD,MAAM1L,EAAApE,YAAYsT,IAAMlP,EAAApE,YAAYuT,KACxD5V,KAAK6V,mBAAsCN,EAAmBtT,GAE9DjC,KAAK8V,iBAAoCP,EAAmBtT,GAE9D,MAEF,QAEE,YADAwB,QAAO,IAMbzD,KAAKiU,YAAYhS,EAAWmN,KAItBvF,EAAA5H,UAAAwT,gBAAR,SACErG,EACA2G,GAEA,IAAInV,EAAOwO,EAAYxO,KAAKwE,KACxBsI,EAAe0B,EAAYmF,sBAC3BjB,EAAalE,EAAYkE,WACzB0C,EAAcD,EAAehI,MAAQtE,EAAYwM,oBAGrD,GAAI7G,EAAY0D,GAAGrM,EAAApE,YAAY6T,QAAS,CAKtC,GAJIF,GAEFvS,QAAO,GAELzD,KAAKiK,eAAe0H,IAAIjE,GAK1B,YAJA1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,GAI5B,GAAIqI,EAAevD,SACjB,GAAIuD,EAAevD,QAAQb,IAAI/Q,GAK7B,YAJAZ,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5BqI,EAAevD,QAAU,IAAI5I,IAE/B,IAAIuM,EAAc,IAAIpD,EACpB/S,KACAY,EACA8M,EACA/G,EAAAgF,KAAKc,KACL2C,EACAkE,EACItT,KAAKqT,gBAAgBC,EAAY5J,EAAe0M,QAChD1M,EAAesJ,MAErBmD,EAAYvG,OAASmG,EACrBA,EAAevD,QAAQ/E,IAAI7M,EAAMuV,GACjCnW,KAAKiK,eAAewD,IAAIC,EAAcyI,GAClCJ,EAAejD,GAAGrM,EAAApE,YAAY4S,gBAChCkB,EAAY1I,IAAIhH,EAAApE,YAAY4S,eAG1BkB,EAAYhC,aAAazK,EAAe0M,UAAYD,EAAYrD,GAAGrM,EAAApE,YAAYgU,WACjFrW,KAAKuG,MACHG,EAAA5C,eAAeiQ,8BACftQ,OAAOmD,EAAA0P,cAAc1P,EAAAS,cAAc+O,OAAQ9C,IAAalP,MAAO,cAK9D,CAKL,GAJI4R,GAEFvS,QAAQ2L,EAAY+C,MAAM1L,EAAApE,YAAYkU,SAAW9P,EAAApE,YAAYsT,IAAMlP,EAAApE,YAAYuT,MAE7EG,EAAeS,iBACjB,GAAIT,EAAeS,gBAAgB7E,IAAI/Q,GAKrC,YAJAZ,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5BqI,EAAeS,gBAAkB,IAAI5M,IAEvC,IAAI6M,EAAgB,IAAIC,EACtBX,EACAnV,EACA8M,EACA0B,GAEEkE,GAAYtT,KAAKqT,gBAAgBC,EAAY5J,EAAesJ,MAChE+C,EAAeS,gBAAgB/I,IAAI7M,EAAM6V,KAKrC5M,EAAA5H,UAAA6T,iBAAR,SACE1G,EACA2G,GAEA,IAAIvB,EAAapF,EAAYxO,KAAKwE,KAC9BsI,EAAe0B,EAAYmF,sBAC3BtS,EAAsC,KAEtCqR,EAAalE,EAAYkE,WACzBqD,EAAiBjN,EAAesJ,KAWpC,GAVIM,IACFqD,EAAiB3W,KAAKqT,gBAAgBC,EACpC5J,EAAenC,gBACfmC,EAAeZ,gBACfY,EAAeL,iBACfK,EAAe0M,SAKfhH,EAAY0D,GAAGrM,EAAApE,YAAY6T,QAAS,CAGtC,GAFAzS,OAAO2L,EAAYxO,KAAKmN,MAAQnH,EAAAoH,SAAS4I,aAErC5W,KAAKiK,eAAe0H,IAAIjE,GAK1B,YAJA1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBAAwB1C,EAAYxO,KAAKwD,MACxDsJ,GAIJ,GAAIqI,EAAevD,SACjB,GAAIuD,EAAevD,QAAQb,IAAI6C,GAK7B,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5BqI,EAAevD,QAAU,IAAI5I,IAE/B3H,EAAY,IAAI4U,EACd7W,KACAwU,EACA9G,EACA0B,EACA2G,EACAY,GAEFZ,EAAevD,QAAQ/E,IAAI+G,EAAYvS,GACvCjC,KAAKiK,eAAewD,IAAIC,EAAczL,GAClC8T,EAAejD,GAAGrM,EAAApE,YAAY4S,gBAChChT,EAAUwL,IAAIhH,EAAApE,YAAY4S,mBAIvB,CACL,GAAIc,EAAeS,iBACjB,GAAIT,EAAeS,gBAAgB7E,IAAI6C,GAKrC,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5BqI,EAAeS,gBAAkB,IAAI5M,IAEvC3H,EAAY,IAAI4U,EACd7W,KACAwU,EACA9G,EACA0B,EACA2G,EACAY,GAKEvH,EAAYxO,KAAKmN,MAAQnH,EAAAoH,SAAS4I,YAChCb,EAAee,qBACjB9W,KAAKuG,MACHG,EAAA5C,eAAeiT,qDACf3H,EAAYxO,KAAKwD,QAGnBnC,EAAUwL,IAAIhH,EAAApE,YAAYuU,aAC1Bb,EAAee,qBAAuB7U,GAGxC8T,EAAeS,gBAAgB/I,IAAI+G,EAAYvS,GAE7C8T,EAAejD,GAAGrM,EAAApE,YAAY4S,gBAChChT,EAAUwL,IAAIhH,EAAApE,YAAY4S,eAI9BjV,KAAKgX,uBAAuB5H,EAAYkE,WAAYrR,EAAW8T,IAGzDlM,EAAA5H,UAAA+U,uBAAR,SACE1D,EACArR,EACA8T,GAEA,GAAIzC,EACF,IAAK,IAAIjT,EAAI,EAAGgL,EAAIiI,EAAWhO,OAAQjF,EAAIgL,IAAKhL,EAAG,CACjD,IAAIoT,EAAYH,EAAWjT,GAC3B,OAAQoT,EAAUtM,eAChB,KAAKP,EAAAS,cAAcC,SACnB,KAAKV,EAAAS,cAAcE,gBACnB,KAAKX,EAAAS,cAAcyB,gBACnB,KAAKlC,EAAAS,cAAcgC,iBACjB,IAAI4N,EAAUxD,EAAUyD,WAAazD,EAAUyD,UAAU5R,QAAU,EACnE,GAAe,GAAX2R,EAAc,CAChB,IAAIE,EAA0B1D,EAAUyD,UAAW,GACnD,GACEC,EAASpJ,MAAQnH,EAAAoH,SAASoJ,SACND,EAAUE,aAAezQ,EAAA0Q,YAAYC,OACzD,CACA,IAAIxJ,EAAO7G,EACTuM,EAAUtM,cACgBgQ,EAAU7V,OAEtC,GAAIyM,GAAQvH,EAAagD,QACvBxJ,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfmC,EAAS/S,WAEN,CACL,IAAIoT,EAAYzB,EAAe0B,mBAC3BD,EAAU7F,IAAI5D,GAChB/N,KAAKuG,MACHG,EAAA5C,eAAe4T,kCACfP,EAAS/S,QAGXnC,EAAU0V,aAAe5J,EACzByJ,EAAU/J,IAAIM,EAAM9L,UAIxBjC,KAAKuG,MACHG,EAAA5C,eAAe8T,wBACfT,EAAS/S,YAIbpE,KAAKuG,MACHG,EAAA5C,eAAe+T,+BACfpE,EAAUrP,MAAO,IAAK6S,EAAQpS,SAAS,OAS7CgF,EAAA5H,UAAA4T,mBAAR,SACEzG,EACA2G,GAEA,IAAIvB,EAAapF,EAAYxO,KAAKwE,KAC9B0S,EAAuB1I,EAAYmF,sBACnCwD,EAAkB/X,KAAKiK,eAAe/I,IAAI4W,GAC1CE,EAAW5I,EAAY0D,GAAGrM,EAAApE,YAAYsT,KACtCsC,GAAQ,EACZ,GAAIF,GACF,GACEA,EAAgBhK,MAAQtE,EAAYyO,UAI/B,OAHJF,EACcD,EAAiBI,gBACjBJ,EAAiBK,iBAOhC,YAJApY,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAO0T,QAK5BC,EAAkB,IAAIM,EACpBrY,KACAwU,EACAsD,EACA/B,GAEFkC,GAAQ,EAGV,IAAI3E,EAAalE,EAAYkE,WACzBqD,EAAiBjN,EAAesJ,KAChCM,IACFqD,EAAiB3W,KAAKqT,gBAAgBC,EACpC5J,EAAe0M,SAInB,IAAIkC,GAAYN,EAAWvR,EAAAjE,cAAgBiE,EAAAhE,eAAiB+R,EAG5D,GAAIpF,EAAY0D,GAAGrM,EAAApE,YAAY6T,QAAS,CACtC,IAAIqC,EAAaxC,EAAerI,aAAejH,EAAA9D,iBAAmB2V,EAClE,GAAItY,KAAKiK,eAAe0H,IAAI4G,GAK1B,YAJAvY,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOmU,GAI5B,IAAIC,EAAkB,IAAI3B,EACxB7W,KACAsY,EACAC,EACAnJ,EACA,KACAuH,GAOF,GALIqB,EACSD,EAAiBI,gBAAkBK,EAEnCT,EAAiBK,gBAAkBI,EAE5CP,EAAO,CACT,GAAIlC,EAAevD,SACjB,GAAIuD,EAAevD,QAAQb,IAAI6C,GAK7B,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOmU,QAK5BxC,EAAevD,QAAU,IAAI5I,IAE/BmM,EAAevD,QAAQ/E,IAAI+G,EAAYuD,QAEvCtU,OAAOsS,EAAevD,SAAWuD,EAAevD,QAAQb,IAAI6C,IAE9DxU,KAAKiK,eAAewD,IAAIqK,EAAsBC,GAC1ChC,EAAejD,GAAGrM,EAAApE,YAAY4S,gBAChC8C,EAAgBtK,IAAIhH,EAAApE,YAAY4S,mBAI7B,CACL,IAAIwD,EAAe1C,EAAerI,aAAejH,EAAA/D,mBAAqB4V,EACtE,GAAIvC,EAAeS,iBACjB,GAAIT,EAAeS,gBAAgB7E,IAAI2G,GAKrC,YAJAtY,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAO0T,QAK5B/B,EAAeS,gBAAkB,IAAI5M,IAEvC,IAAI8O,EAAoB,IAAI7B,EAC1B7W,KACAsY,EACAG,EACArJ,EACA2G,EACAY,GAEEqB,EACSD,EAAiBI,gBAAkBO,EAEnCX,EAAiBK,gBAAkBM,EAEhD3C,EAAeS,gBAAgB/I,IAAI6K,EAAUP,GAC7C/X,KAAKiK,eAAewD,IAAIqK,EAAsBC,GAC1ChC,EAAejD,GAAGrM,EAAApE,YAAY4S,iBAChC8C,EAAgBtK,IAAIhH,EAAApE,YAAY4S,eAChCyD,EAAkBjL,IAAIhH,EAAApE,YAAY4S,kBAKhCpL,EAAA5H,UAAAmM,eAAR,SACEgB,EACAkF,QAAA,IAAAA,MAAA,MAEA,IAAI5G,EAAe0B,EAAYmF,sBAC/B,GAAIvU,KAAKiK,eAAe0H,IAAIjE,GAC1B1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,OAH5B,CAOA,IAAI8G,EAAapF,EAAYxO,KAAKwE,KAC9BiK,EAAU,IAAIsJ,EAAK3Y,KAAMwU,EAAY9G,EAAc0B,GAIvD,GAHAC,EAAQO,OAAS0E,EACjBtU,KAAKiK,eAAewD,IAAIC,EAAc2B,GAElCiF,EAAW,CACb,GAAIA,EAAU9B,SACZ,GAAI8B,EAAU9B,QAAQb,IAAI6C,GAKxB,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5B4G,EAAU9B,QAAU,IAAI5I,IAE1B0K,EAAU9B,QAAQ/E,IAAI+G,EAAYnF,GAC9BiF,EAAUxB,GAAGrM,EAAApE,YAAY4S,gBAAkB5F,EAAQyD,GAAGrM,EAAApE,YAAYgM,SACpEgB,EAAQ5B,IAAIhH,EAAApE,YAAY4S,oBAErB,GAAI5F,EAAQyD,GAAGrM,EAAApE,YAAYgM,QAAS,CACzC,GAAIrO,KAAKqK,iBAAiBsH,IAAIjE,GAK5B,YAJA1N,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACf9F,EAAYxO,KAAKwD,MAAOsJ,GAM5B,GAFA1N,KAAKqK,iBAAiBoD,IAAIC,EAAc2B,GACxCrP,KAAK2N,iBAAiB6E,QAAQ/E,IAAI+G,EAAYnF,GAC1CD,EAAYhL,MAAMU,OAAOqQ,QAAS,CACpC,GAAInV,KAAKsK,mBAAmBqH,IAAI6C,GAAa,CAC3C,IAAIY,EAA+BpV,KAAKsK,mBAAmBpJ,IAAIsT,GAK/D,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACf9F,EAAYxO,KAAKwD,MAAOgR,EAAe/F,QAAQ3B,cAInD2B,EAAQ5B,IAAIhH,EAAApE,YAAY4S,eACxBjV,KAAKsK,mBAAmBmD,IAAI+G,GAC1BnF,QAAOA,EACPgG,WAAYjG,EAAYxO,QAM9B,IADA,IAAIgY,EAASxJ,EAAYwJ,OAChBvY,EAAI,EAAGgL,EAAIuN,EAAOtT,OAAQjF,EAAIgL,IAAKhL,EAC1CL,KAAK6Y,oBAAoBD,EAAOvY,GAAIgP,GAGtCrP,KAAKiU,YAAY5E,EAASD,KAGpBvF,EAAA5H,UAAA4W,oBAAR,SACEzJ,EACA0J,GAEA,IAAIlY,EAAOwO,EAAYxO,KAAKwE,KACxBsI,EAAe0B,EAAYmF,sBAC/B,GAAIuE,EAAItG,SACN,GAAIsG,EAAItG,QAAQb,IAAI/Q,GAKlB,YAJAZ,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5BoL,EAAItG,QAAU,IAAI5I,IAEpB,IAAItI,EAAQ,IAAIyX,EAAUD,EAAK9Y,KAAMY,EAAM8M,EAAc0B,GACzD0J,EAAItG,QAAQ/E,IAAI7M,EAAMU,GAClBwX,EAAIhG,GAAGrM,EAAApE,YAAY4S,gBACrB3T,EAAMmM,IAAIhH,EAAApE,YAAY4S,gBAIlBpL,EAAA5H,UAAAqM,kBAAR,SACER,EACAV,GAEA,IAAIoF,EAAU1E,EAAU0E,QACxB,GAAIA,EACF,IAAK,IAAInS,EAAI,EAAGgL,EAAImH,EAAQlN,OAAQjF,EAAIgL,IAAKhL,EAC3CL,KAAKgZ,iBAAiBxG,EAAQnS,GAAIyN,EAAUmL,aAAc7L,QAG5DpN,KAAKuG,MACHG,EAAA5C,eAAekR,wBACflH,EAAU1J,QAKRyF,EAAA5H,UAAAyO,yBAAR,SACEhD,EACA2B,EACA6J,GAGAlZ,KAAKqK,iBAAiBoD,IAAIC,EAAc2B,GAGxC,IAAI4J,EAAeC,EAAmB9U,MAAMU,OAAOmU,aAC/CE,EAAS1S,EAAA1D,iBAAmBkW,EAC5B1L,EAAYvN,KAAKiK,eAAe/I,IAAIiY,GACnC5L,IAAWA,EAAY9J,OAAOzD,KAAKiK,eAAe/I,IAAIiY,EAAS1S,EAAAnE,eAAiB,WACrFmB,OAAO8J,EAAUQ,MAAQtE,EAAY2P,WACrC,IAAI5E,EAAa0E,EAAmB9T,KACxBmI,EAAWiF,QAAQ/E,IAAI+G,EAAYnF,GAG/C,IAAIvK,EAASoU,EAAmB9U,MAAMU,OAClCA,EAAOgP,UACL9T,KAAKiK,eAAe0H,IAAI6C,GAC1BxU,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACfgE,EAAmB9U,MAAOoQ,IAG5BnF,EAAQ3B,aAAe8G,EACvBxU,KAAKiK,eAAewD,IAAI+G,EAAYnF,IAI7BvK,EAAOqQ,SAChBnV,KAAKsK,mBAAmBmD,IAAIyL,EAAmB9T,MAC7CiK,QAAOA,EACPgG,WAAY6D,KAKVrP,EAAA5H,UAAA+W,iBAAR,SACEvI,EACAwI,EACA7L,GAEA,IAQIiM,EACAC,EACAhJ,EAVAf,EAAekB,EAAOrM,MAAMU,OAAOmU,aAAexS,EAAAnE,eAAiBmO,EAAOlB,aAAanK,KAC3F,GAAIpF,KAAKqK,iBAAiBsH,IAAIpC,GAC5BvP,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACfzE,EAAOlB,aAAanL,MAAOmL,QAS/B,GAAoB,MAAhB0J,EAAsB,CAIxB,GAHAI,EAAiB5I,EAAOrM,MAAMU,OAAOmU,aAAexS,EAAAnE,eAAiBmO,EAAO7P,KAAKwE,KAG7EpF,KAAKiK,eAAe0H,IAAI0H,GAM1B,YALArZ,KAAK0Q,yBACHnB,EACSvP,KAAKiK,eAAe/I,IAAImY,GACjC5I,EAAOlB,cAMX,GAAInC,EAAcuE,IAAIpC,GAKpB,YAJAvP,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACfzE,EAAOlB,aAAanL,MAAOmL,IAI/Be,EAAe,IAAItJ,GACNwJ,YAAa,EAC1BF,EAAaf,aAAe8J,EAC5B/I,EAAaG,OAASA,EACtBrD,EAAcK,IAAI8B,EAAce,OAG3B,CAKL,GAJA+I,EAAiBJ,EAAexS,EAAAnE,eAAiBmO,EAAO7P,KAAKwE,KAG7DkU,EAAoBtZ,KAAKiK,eAAe/I,IAAImY,GAO1C,YALArZ,KAAK0Q,yBACHnB,EACA+J,EACA7I,EAAOlB,cAOX,IADA,IAAIgK,EAAO,IAAIC,IACRlJ,EAAelD,EAAclM,IAAImY,IAAiB,CACvD,IAAI/I,EAAaE,WAaV,CAEL,GADA8I,EAAoBtZ,KAAKiK,eAAe/I,IAAIoP,EAAaf,cAOvD,YALAvP,KAAK0Q,yBACHnB,EACA+J,EACA7I,EAAOlB,cAIX,MArBA,GADA+J,EAAoBtZ,KAAKqK,iBAAiBnJ,IAAIoP,EAAaf,cAOzD,YALAvP,KAAK0Q,yBACHnB,EACA+J,EACA7I,EAAOlB,cAKX,GADA8J,EAAiB/I,EAAaf,aAC1BgK,EAAK5H,IAAIrB,GAAe,MAC5BiJ,EAAKE,IAAInJ,GAgBb,GAAIlD,EAAcuE,IAAIpC,GAKpB,YAJAvP,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACfzE,EAAOlB,aAAanL,MAAOmL,IAI/Be,EAAe,IAAItJ,GACNwJ,YAAa,EAC1BF,EAAaf,aAAe8J,EAC5B/I,EAAaG,OAASA,EACtBrD,EAAcK,IAAI8B,EAAce,KAI5BzG,EAAA5H,UAAAuM,mBAAR,SACEY,EACAkF,QAAA,IAAAA,MAAA,MAEA,IAAI5G,EAAe0B,EAAYmF,sBAC/B,GAAIvU,KAAKiK,eAAe0H,IAAIjE,GAC1B1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,OAH5B,CAOA,IAAI8G,EAAapF,EAAYxO,KAAKwE,KAC9BkO,EAAalE,EAAYkE,WACzBrR,EAAY,IAAI4U,EAClB7W,KACAwU,EACA9G,EACA0B,EACA,KACAkE,EACItT,KAAKqT,gBAAgBC,EACnB5J,EAAe0K,OACf1K,EAAe0M,OACf1M,EAAegQ,UAEjBhQ,EAAesJ,MAKrB,GAHA/Q,EAAU2N,OAAS0E,EACnBtU,KAAKiK,eAAewD,IAAIC,EAAczL,GAElCqS,EAAW,CACb,GAAIA,EAAU9B,SACZ,GAAI8B,EAAU9B,QAAQb,IAAI6C,GAKxB,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5B4G,EAAU9B,QAAU,IAAI5I,IAE1B0K,EAAU9B,QAAQ/E,IAAI+G,EAAYvS,GAC9BqS,EAAUxB,GAAGrM,EAAApE,YAAY4S,gBAAkBhT,EAAU6Q,GAAGrM,EAAApE,YAAYgM,UACtEpM,EAAU2N,OAAS0E,EACnBrS,EAAUwL,IAAIhH,EAAApE,YAAY4S,qBAEvB,GAAIhT,EAAU6Q,GAAGrM,EAAApE,YAAYgM,QAAS,CAC3C,GAAIrO,KAAKqK,iBAAiBsH,IAAIjE,GAK5B,YAJA1N,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACf9F,EAAYxO,KAAKwD,MAAOsJ,GAM5B,GAFA1N,KAAKqK,iBAAiBoD,IAAIC,EAAczL,GACxCjC,KAAK2N,iBAAiB6E,QAAQ/E,IAAI+G,EAAYvS,GAC1CmN,EAAYhL,MAAMU,OAAOqQ,QAAS,CACpC,GAAInV,KAAKsK,mBAAmBqH,IAAI6C,GAAa,CAC3C,IAAIY,EAA+BpV,KAAKsK,mBAAmBpJ,IAAIsT,GAK/D,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOgR,EAAe/F,QAAQ3B,cAInDzL,EAAUwL,IAAIhH,EAAApE,YAAY4S,eAC1BjV,KAAKsK,mBAAmBmD,IAAI+G,GAC1BnF,QAASpN,EACToT,WAAYjG,EAAYxO,QAK9BZ,KAAKiU,YAAYhS,EAAWmN,KAGtBvF,EAAA5H,UAAAyM,kBAAR,SACEZ,EACAV,EACAD,GAEA,IAAIwM,EAAe7L,EAAU6L,aAC7B,GAAIA,EACF,IAAK,IAAItZ,EAAI,EAAGgL,EAAIsO,EAAarU,OAAQjF,EAAIgL,IAAKhL,EAChDL,KAAK4Z,iBACHD,EAAatZ,GACbyN,EAAUmL,aACV7L,EAAeD,QAGd,GAAIW,EAAU+L,cAAe,CAClC,IAAIrF,EAAa1G,EAAU+L,cAAczU,KACrCsI,EACFI,EAAU1J,MAAMU,OAAOmU,aACvBxS,EAAAnE,eACAkS,EAEF,GAAIxU,KAAKiK,eAAe0H,IAAIjE,GAM1B,YALA1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACfhE,EAAU+L,cAAczV,MACxBsJ,GAMJ,IAAIH,EAAYvN,KAAKiK,eAAe/I,IAAI4M,EAAUmL,cAClD,GAAI1L,EAEF,YADAvN,KAAKiK,eAAewD,IAAIC,EAAcH,GAKxC,IAAI4B,EAAe,IAAIpI,EACvBoI,EAAaK,UAAY9B,EACzB,IAAI6B,EAAe9I,EAAA1D,iBAAmB+K,EAAUmL,aAChD9J,EAAaI,aAAeA,EAC5BJ,EAAaO,gBAAkBH,EAAe9I,EAAAnE,eAAiB,QAC/D6M,EAAaC,YAAc,KAC3BjC,EAActH,KAAKsJ,KAIftF,EAAA5H,UAAA2X,iBAAR,SACExK,EACA6J,EACA7F,EACAjG,GAEA,IAAIqC,EAAYJ,EAAYmF,sBAC5B,GAAIvU,KAAKiK,eAAe0H,IAAInC,GAC1BxP,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOoL,OAH5B,CAQA,IAGIH,EAHAE,EAAe0J,EAAexS,EAAAnE,eAAiB8M,EAAYG,aAAanK,KAI5E,GAAIiK,EAAUrP,KAAKqK,iBAAiBnJ,IAAIqO,GACtCvP,KAAKiK,eAAewD,IAAI+B,EAAWH,OADrC,CAMA,IAAMyK,EAAYrT,EAAAnE,eAAiB,QAC/B6M,EAAe,IAAIpI,EACvBoI,EAAaK,UAAYA,EACrByJ,EAAac,SAASD,IACxB3K,EAAaI,aAAeA,EAC5BJ,EAAaO,gBACXuJ,EAAarT,UAAU,EAAGqT,EAAa3T,OAASwU,EAAUxU,OAAS,GACnE8J,EAAYG,aAAanK,OAG3B+J,EAAaI,aAAeA,EAC5BJ,EAAaO,gBACXuJ,EACAa,EACArT,EAAAnE,eACA8M,EAAYG,aAAanK,MAG7B+J,EAAaC,YAAcA,EAC3BjC,EAActH,KAAKsJ,MAGbtF,EAAA5H,UAAA2M,oBAAR,SAA4BQ,EAAmCkF,QAAA,IAAAA,MAAA,MAC7D,IAAI5G,EAAe0B,EAAYmF,sBAC/B,GAAIvU,KAAKiK,eAAe0H,IAAIjE,GAC1B1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,OAH5B,CAQA,IAAI4F,EAAalE,EAAYkE,WACzBkB,EAAapF,EAAYxO,KAAKwE,KAC9BnD,EAAY,IAAI+X,EAClBha,KACAwU,EACA9G,EACA0B,EACAkE,EACItT,KAAKqT,gBAAgBC,EAAY5J,EAAe0K,QAChD1K,EAAesJ,MAKrB,GAHA/Q,EAAU2N,OAAS0E,EACnBtU,KAAKiK,eAAewD,IAAIC,EAAczL,GAElCqS,EAAW,CACb,GAAIA,EAAU9B,SACZ,GAAI8B,EAAU9B,QAAQb,IAAI1P,EAAUyL,cAKlC,YAJA1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5B4G,EAAU9B,QAAU,IAAI5I,IAE1B0K,EAAU9B,QAAQ/E,IAAIxL,EAAUyL,aAAczL,GAC1CqS,EAAUxB,GAAGrM,EAAApE,YAAY4S,gBAAkBhT,EAAU6Q,GAAGrM,EAAApE,YAAYgM,SACtEpM,EAAUwL,IAAIhH,EAAApE,YAAY4S,oBAEvB,GAAIhT,EAAU6Q,GAAGrM,EAAApE,YAAYgM,QAAS,CAC3C,GAAIrO,KAAKqK,iBAAiBsH,IAAIjE,GAK5B,YAJA1N,KAAKuG,MACHG,EAAA5C,eAAeoR,4DACf9F,EAAYxO,KAAKwD,MAAOsJ,GAM5B,GAFA1N,KAAKqK,iBAAiBoD,IAAIC,EAAczL,GACxCjC,KAAK2N,iBAAiB6E,QAAQ/E,IAAI+G,EAAYvS,GAC1CmN,EAAYhL,MAAMU,OAAOqQ,QAAS,CACpC,GAAInV,KAAKsK,mBAAmBqH,IAAI6C,GAAa,CAC3C,IAAIY,EAA+BpV,KAAKsK,mBAAmBpJ,IAAIsT,GAK/D,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOgR,EAAe/F,QAAQ3B,cAInDzL,EAAUwL,IAAIhH,EAAApE,YAAY4S,eAC1BjV,KAAKsK,mBAAmBmD,IAAI+G,GAC1BnF,QAASpN,EACToT,WAAYjG,EAAYxO,QAM9B,IADA,IAAI0U,EAAqBlG,EAAYoD,QAC5BnS,EAAI,EAAGgL,EAAIiK,EAAmBhQ,OAAQjF,EAAIgL,IAAKhL,EAAG,CACzD,IAAIkV,EAAoBD,EAAmBjV,GAC3C,OAAQkV,EAAkBxH,MAExB,KAAKnH,EAAAoH,SAASwH,iBACZxV,KAAKyV,gBAAkCF,EAAmBtT,GAC1D,MAEF,KAAK2E,EAAAoH,SAAS0H,kBACRH,EAAkBpD,MAAM1L,EAAApE,YAAYsT,IAAMlP,EAAApE,YAAYuT,KACxD5V,KAAK6V,mBAAsCN,EAAmBtT,GAE9DjC,KAAK8V,iBAAoCP,EAAmBtT,GAE9D,MAEF,QACE,MAAM,IAAIyP,MAAM,8BAKtB1R,KAAKiU,YAAYhS,EAAWmN,KAGtBvF,EAAA5H,UAAA6M,oBAAR,SACEM,EACA/B,EACAC,EACA2M,QAAA,IAAAA,MAAA,MAEA,IAAIvM,EAAe0B,EAAYmF,sBAC3BC,EAAapF,EAAYxO,KAAKwE,KAC9BkP,EAAYtU,KAAKiK,eAAe/I,IAAIwM,GAQxC,GAPK4G,KACHA,EAAY,IAAI4F,EAAUla,KAAMwU,EAAY9G,EAAc0B,IAChDQ,OAASqK,EACnBja,KAAKiK,eAAewD,IAAIC,EAAc4G,GACtCtU,KAAKiU,YAAYK,EAAWlF,IAG1B6K,EAAiB,CACnB,GAAIA,EAAgBzH,SAClB,GAAIyH,EAAgBzH,QAAQb,IAAI6C,GAK9B,YAJAxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,QAK5BuM,EAAgBzH,QAAU,IAAI5I,IAEhCqQ,EAAgBzH,QAAQ/E,IAAI+G,EAAYF,GACpC2F,EAAgBnH,GAAGrM,EAAApE,YAAY4S,gBAAkBX,EAAUxB,GAAGrM,EAAApE,YAAYgM,SAC5EiG,EAAU7G,IAAIhH,EAAApE,YAAY4S,oBAEvB,GAAIX,EAAUxB,GAAGrM,EAAApE,YAAYgM,QAAS,CAC3C,IAAI+G,EAAiBpV,KAAKqK,iBAAiBnJ,IAAIwM,GAa/C,GAZI0H,GACGA,EAAetC,GAAGrM,EAAApE,YAAYgM,SACjCrO,KAAKuG,MACHG,EAAA5C,eAAeqW,kFACf/K,EAAYxO,KAAKwD,MAAOkQ,EAAU5G,cAGtC4G,EAAYc,GAEZpV,KAAKqK,iBAAiBoD,IAAIC,EAAc4G,GAE1CtU,KAAK2N,iBAAiB6E,QAAQ/E,IAAI+G,EAAYF,GAC1ClF,EAAYhL,MAAMU,OAAOqQ,QAAS,CACpC,GAAInV,KAAKsK,mBAAmBqH,IAAI6C,GAAa,CAC3C,IAAI4F,EAA+Bpa,KAAKsK,mBAAmBpJ,IAAIsT,GAC/D,GAAI4F,EAAe/K,UAAYiF,EAK7B,YAJAtU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOgW,EAAe/K,QAAQ3B,mBAKnD1N,KAAKsK,mBAAmBmD,IAAI+G,GAC1BnF,QAASiF,EACTe,WAAYjG,EAAYxO,OAG5B0T,EAAU7G,IAAIhH,EAAApE,YAAY4S,gBAK9B,IADA,IAAIzC,EAAUpD,EAAYoD,QACjBnS,EAAI,EAAGgL,EAAImH,EAAQlN,OAAQjF,EAAIgL,IAAKhL,EAC3C,OAAQmS,EAAQnS,GAAG0N,MACjB,KAAKnH,EAAAoH,SAASC,iBACZjO,KAAKkO,gBAAkCsE,EAAQnS,GAAIgN,EAAeC,EAAkBgH,GACpF,MAEF,KAAK1N,EAAAoH,SAASG,gBACZnO,KAAKoO,eAAgCoE,EAAQnS,GAAIiU,GACjD,MAEF,KAAK1N,EAAAoH,SAASO,oBACZvO,KAAKwO,mBAAwCgE,EAAQnS,GAAIiU,GACzD,MAEF,KAAK1N,EAAAoH,SAASW,qBACZ3O,KAAK4O,oBAA0C4D,EAAQnS,GAAIiU,GAC3D,MAEF,KAAK1N,EAAAoH,SAASa,qBACZ7O,KAAK8O,oBAA0C0D,EAAQnS,GAAIgN,EAAeC,EAAkBgH,GAC5F,MAEF,KAAK1N,EAAAoH,SAASe,gBAGZ/O,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfxC,EAAQnS,GAAG+D,OAEb,MAEF,KAAKwC,EAAAoH,SAASiB,SACZjP,KAAKkP,oBAAuCsD,EAAQnS,GAAIiU,GACxD,MAEF,QACE,MAAM,IAAI5C,MAAM,+BAMhB7H,EAAA5H,UAAA+M,oBAAR,SAA4BI,EAA8BkF,QAAA,IAAAA,MAAA,MAGxD,IAAI1T,EAAOwO,EAAYxO,KAAKwE,KAC5B,GAAIpF,KAAKmK,YAAYwH,IAAI/Q,IAASZ,KAAKoK,YAAYuH,IAAI/Q,GACrDZ,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOxD,OAH5B,CAOA,IAAI6Q,EAAQ,IAAIxK,EAChBwK,EAAM4I,eAAiBjL,EAAYiL,eACnC5I,EAAMO,KAAO5C,EAAY4C,KACzBhS,KAAKoK,YAAYqD,IAAI7M,EAAM6Q,KAGrB5H,EAAA5H,UAAAiN,oBAAR,SAA4BpB,EAA8BwG,QAAA,IAAAA,MAAA,MAExD,IADA,IAAIqF,EAAe7L,EAAU6L,aACpBtZ,EAAI,EAAGgL,EAAIsO,EAAarU,OAAQjF,EAAIgL,IAAKhL,EAAG,CACnD,IAAI+O,EAAcuK,EAAatZ,GAC3BiT,EAAalE,EAAYkE,WACzB5F,EAAe0B,EAAYmF,sBAC/B,GAAIvU,KAAKiK,eAAe0H,IAAIjE,GAC1B1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,OAH5B,CAOA,IAAI8G,EAAapF,EAAYxO,KAAKwE,KAC9BkV,EAAS,IAAIvH,EACf/S,KACAwU,EACA9G,EACA/G,EAAAgF,KAAKc,KACL2C,EACAkE,EACItT,KAAKqT,gBAAgBC,EACnB5J,EAAe0K,OACf1K,EAAe0M,OACf1M,EAAegQ,UAEjBhQ,EAAesJ,MAYrB,GAVAsH,EAAO1K,OAAS0E,EAChBtU,KAAKiK,eAAewD,IAAIC,EAAc4M,GAElCA,EAAOnG,aAAazK,EAAe0M,UAAYkE,EAAOxH,GAAGrM,EAAApE,YAAYkY,QACvEva,KAAKuG,MACHG,EAAA5C,eAAeiQ,8BACftQ,OAAOmD,EAAA0P,cAAc1P,EAAAS,cAAc+O,OAAQ9C,IAAalP,MAAO,UAI/DkQ,EAAW,CACb,GAAIA,EAAU9B,SACZ,GAAI8B,EAAU9B,QAAQb,IAAI6C,GAAa,CACrCxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,GAE1B,eAGF4G,EAAU9B,QAAU,IAAI5I,IAE1B0K,EAAU9B,QAAQ/E,IAAI+G,EAAY8F,GAC9BhG,EAAUxB,GAAGrM,EAAApE,YAAY4S,gBAAkBqF,EAAOxH,GAAGrM,EAAApE,YAAYgM,SACnEiM,EAAO7M,IAAIhH,EAAApE,YAAY4S,oBAEpB,GAAIqF,EAAOxH,GAAGrM,EAAApE,YAAYgM,UAC3BrO,KAAKqK,iBAAiBsH,IAAIjE,GAC5B1N,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOsJ,GAG1B1N,KAAKqK,iBAAiBoD,IAAIC,EAAc4M,GAE1Cta,KAAK2N,iBAAiB6E,QAAQ/E,IAAI+G,EAAY8F,GAC1ClL,EAAYhL,MAAMU,OAAOqQ,SAAS,CACpC,GAAInV,KAAKsK,mBAAmBqH,IAAI6C,GAAa,CAC3C,IAAIY,EAA+BpV,KAAKsK,mBAAmBpJ,IAAIsT,GAC/DxU,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOgR,EAAe/F,QAAQ3B,cAEjD,SAEF4M,EAAO7M,IAAIhH,EAAApE,YAAY4S,eACvBjV,KAAKsK,mBAAmBmD,IAAI+G,GAC1BnF,QAASiL,EACTjF,WAAYjG,EAAYxO,OAI9BZ,KAAKiU,YAAYqG,EAAQlL,MAG/BvF,EAxtDA,CAA6BnD,EAAAT,mBAqxD7B,SAAA0N,EAAoC5F,GAClC,OAAQA,GACN,KAAKnH,EAAAS,cAAc+M,OAAQ,OAAO1K,EAAe0K,OACjD,KAAKxN,EAAAS,cAAcC,SACnB,KAAKV,EAAAS,cAAcE,gBAAiB,OAAOmC,EAAenC,gBAC1D,KAAKX,EAAAS,cAAcyB,gBAAiB,OAAOY,EAAeZ,gBAC1D,KAAKlC,EAAAS,cAAcgC,iBAAkB,OAAOK,EAAeL,iBAC3D,KAAKzC,EAAAS,cAAcsN,UAAW,OAAOjL,EAAeiL,UACpD,KAAK/N,EAAAS,cAAcqN,OAAQ,OAAOhL,EAAegL,OACjD,KAAK9N,EAAAS,cAAc+O,OAAQ,OAAO1M,EAAe0M,OACjD,KAAKxP,EAAAS,cAAcqS,SAAU,OAAOhQ,EAAegQ,SACnD,KAAK9S,EAAAS,cAAcwM,QAAS,OAAOnK,EAAemK,QAClD,QAAS,OAAOnK,EAAesJ,MAjyDtBtT,EAAAmK,UA2tDb,SAAYJ,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,0BAhCF,CAAYA,EAAA/J,EAAA+J,cAAA/J,EAAA+J,iBAmCZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBApBF,CAAYA,EAAAhK,EAAAgK,iBAAAhK,EAAAgK,oBAuBZhK,EAAAiU,sBAiBA,IAAA6G,EAAA,WAoBE,SAAAA,EAAsBC,EAAkBjG,EAAoB9G,GAT5D1N,KAAA0a,MAAqBjU,EAAApE,YAAY2Q,KAEjChT,KAAA2W,eAAiCjN,EAAesJ,KAEhDhT,KAAAwS,QAAsC,KAEtCxS,KAAA4P,OAAyB,KAIvB5P,KAAKya,QAAUA,EACfza,KAAKwU,WAAaA,EAClBxU,KAAK0N,aAAeA,EAWxB,OAPE8M,EAAAvY,UAAA6Q,GAAA,SAAGY,GAA2B,OAAQ1T,KAAK0a,MAAQhH,IAASA,GAE5D8G,EAAAvY,UAAAkQ,MAAA,SAAMuI,GAA4B,OAA+B,IAAvB1a,KAAK0a,MAAQA,IAEvDF,EAAAvY,UAAAwL,IAAA,SAAIiG,GAA2B1T,KAAK0a,OAAShH,GAE7C8G,EAAAvY,UAAAkS,aAAA,SAAaT,GAA8B,OAAQ1T,KAAK2W,eAAiBjD,IAASA,GACpF8G,EAlCA,GAAsB9a,EAAA8a,UAqCtB,IAAAhN,EAAA,SAAA1D,GAQE,SAAA0D,EACEiN,EACA3V,GAFF,IAAAiF,EAIED,EAAAtJ,KAAAR,KAAMya,EAAS3V,EAAOmU,aAAcxS,EAAA1D,iBAAmB+B,EAAOmU,eAAajZ,YAV7E+J,EAAAgE,KAAOtE,EAAY2P,UAWjBrP,EAAKyI,QAAU,IAAI5I,MAEvB,OAf+BuB,EAAAqC,EAAA1D,GAe/B0D,EAfA,CAA+BgN,GAAlB9a,EAAA8N,YAkBb,IAAA0M,EAAA,SAAApQ,GASE,SAAAoQ,EACEO,EACAjG,EACA9G,EACA0B,GAJF,IAAArF,EAMED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,IAAa1N,YAZ1C+J,EAAAgE,KAAOtE,EAAYkR,UAajB5Q,EAAKqF,YAAcA,EACnBrF,EAAK2Q,MAAQtL,EAAYsL,QAE7B,OAnB+BvP,EAAA+O,EAAApQ,GAmB/BoQ,EAnBA,CAA+BM,GAAlB9a,EAAAwa,YAsBb,IAAAvB,EAAA,SAAA7O,GAQE,SAAA6O,EACE8B,EACAjG,EACA9G,EACA0B,GAJF,IAAArF,EAMED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,IAAa1N,YAZ1C+J,EAAAgE,KAAOtE,EAAYmR,KAajB7Q,EAAKqF,YAAcA,EACnBrF,EAAK2Q,MAAQtL,EAAYsL,QAE7B,OAlB0BvP,EAAAwN,EAAA7O,GAkB1B6O,EAlBA,CAA0B6B,GAAb9a,EAAAiZ,OAqBb,IAAAI,EAAA,SAAAjP,GASE,SAAAiP,EACED,EACA2B,EACAjG,EACA9G,EACA0B,GALF,IAAArF,EAOED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,IAAa1N,YAd1C+J,EAAAgE,KAAOtE,EAAYoR,UAKnB9Q,EAAA+Q,cAAqB,EAUnB/Q,EAAK6F,OAASkJ,EACd/O,EAAKqF,YAAcA,IAEvB,OApB+BjE,EAAA4N,EAAAjP,GAoB/BiP,EApBA,CAA+ByB,GAAlB9a,EAAAqZ,YAsBb,SAAkBgC,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBAHF,CAAkBrb,EAAAqb,oBAAArb,EAAAqb,uBAMlB,IAAAC,EAAA,SAAAlR,GAeE,SAAAkR,EACEP,EACAjG,EACA9G,EACAsE,EACA5C,GALF,IAAArF,EAOED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,IAAa1N,YAb1C+J,EAAAkR,kBAAiB,EAcflR,EAAKiI,KAAOA,EACZjI,EAAKqF,YAAcA,IAgBvB,OAxCyCjE,EAAA6P,EAAAlR,GA2BvCkR,EAAA/Y,UAAAgR,yBAAA,SAAyB3R,GAIvB,OAHAtB,KAAKib,kBAAiB,EACtBjb,KAAKkb,qBAAuB5Z,EAC5BtB,KAAKyN,IAAIhH,EAAApE,YAAYkY,MAAQ9T,EAAApE,YAAY8Y,SAClCnb,MAGTgb,EAAA/Y,UAAAkR,uBAAA,SAAuB7R,GAIrB,OAHAtB,KAAKib,kBAAiB,EACtBjb,KAAKob,mBAAqB9Z,EAC1BtB,KAAKyN,IAAIhH,EAAApE,YAAYkY,MAAQ9T,EAAApE,YAAY8Y,SAClCnb,MAEXgb,EAxCA,CAAyCR,GAA5B9a,EAAAsb,sBA2Cb,IAAAjI,EAAA,SAAAjJ,GAIE,SAAAiJ,EACE0H,EACAjG,EACA9G,EACAsE,EACA5C,EACAuH,GANF,IAAA5M,EAQED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,EAAcsE,EAAM5C,IAAYpP,YAV7D+J,EAAAgE,KAAOtE,EAAY2K,OAWjBrK,EAAK2Q,MAAQtL,EAAcA,EAAYsL,MAAQjU,EAAApE,YAAY2Q,KAC3DjJ,EAAK4M,eAAiBA,EACtB5M,EAAKiI,KAAOA,IAEhB,OAjB4B7G,EAAA4H,EAAAjJ,GAiB5BiJ,EAjBA,CAA4BiI,GAAftb,EAAAqT,SAoBb,IAAAsI,EAAA,WAiBA,OALE,SAAYza,EAAcoR,EAAYsJ,QAAA,IAAAA,MAAA,MACpCtb,KAAKY,KAAOA,EACZZ,KAAKgS,KAAOA,EACZhS,KAAKsb,YAAcA,GAfvB,GAAa5b,EAAA2b,YAoBb,IAAAE,EAAA,SAAAzR,GASE,SAAAyR,EACEd,EACAjG,EACAgH,EACAxJ,EACA5C,QAAA,IAAAA,MAAA,MALF,IAAArF,EAOED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAYA,EAAYxC,EAAM5C,IAAYpP,YAd3D+J,EAAAgE,KAAOtE,EAAYgS,MAKnB1R,EAAA2R,aAA8B,KAU5B3R,EAAKyR,MAAQA,IAEjB,OAnB2BrQ,EAAAoQ,EAAAzR,GAmB3ByR,EAnBA,CAA2BP,GAAdtb,EAAA6b,QAsBb,IAAA1E,EAAA,SAAA/M,GAgBE,SAAA+M,EACE4D,EACAjG,EACA9G,EACA0B,EACA2G,EACAY,QADA,IAAAZ,MAAA,WACA,IAAAY,MAAiCjN,EAAesJ,MANlD,IAAAjJ,EAQED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,IAAa1N,YAtB1C+J,EAAAgE,KAAOtE,EAAYwI,mBAOnBlI,EAAA4R,UAAkC,IAAI/R,IAEtCG,EAAA6R,mBAAoC,KAEpC7R,EAAA4N,aAA6BnR,EAAagD,QAYxCO,EAAKqF,YAAcA,EACnBrF,EAAK2Q,MAAQtL,EAAYsL,MACzB3Q,EAAKgM,eAAiBA,EACtBhM,EAAK4M,eAAiBA,IAI1B,OAhCuCxL,EAAA0L,EAAA/M,GA+BrC+M,EAAA5U,UAAA4C,SAAA,WAAqB,OAAO7E,KAAKwU,YACnCqC,EAhCA,CAAuC2D,GAA1B9a,EAAAmX,oBAmCb,IAAAgF,EAAA,SAAA/R,GAoCE,SAAA+R,EACE5Z,EACAyL,EACA+E,EACA7C,EACAkM,gBADA,IAAAlM,MAAA,WACA,IAAAkM,MAAA,MALF,IAAA/R,EAOED,EAAAtJ,KAAAR,KAAMiC,EAAUwY,QAASxY,EAAUuS,WAAY9G,IAAa1N,KAO5D,GAhDF+J,EAAAgE,KAAOtE,EAAYsS,SAOnBhS,EAAAiS,aAAkC,IAAIpS,IAEtCG,EAAAkS,iBAEAlS,EAAAmS,oBAEAnS,EAAAoS,aAA8B,KAM9BpS,EAAAqS,kBAEArS,EAAAsS,IAAmB,EAEnBtS,EAAAuS,oBAA2B,EAE3BvS,EAAAwS,WAA8B,KAE9BxS,EAAAyS,WAA0B,KAElBzS,EAAA0S,YAAmB,EACnB1S,EAAA2S,WAA2B,KACnC3S,EAAA4S,aAAoB,EAkFZ5S,EAAA6S,SAA2B,KAC3B7S,EAAA8S,SAA2B,KAC3B9S,EAAA+S,SAA2B,KAC3B/S,EAAAgT,SAA2B,KA1EjChT,EAAK9H,UAAYA,EACjB8H,EAAK0I,UAAYA,EACjB1I,EAAK6F,OAASA,EACd7F,EAAK2Q,MAAQzY,EAAUyY,MACvB3Q,EAAK4M,eAAiB1U,EAAU0U,eAChC5M,EAAK+R,wBAA0BA,GACzB7Z,EAAU6Q,GAAGrM,EAAApE,YAAYgQ,SAAW,CACxC,IAAI2K,EAAa,EACjB,GAAIpN,GAAUA,EAAO7B,MAAQtE,EAAYwT,MAAO,CAC9CxZ,OAAOsG,EAAK+I,GAAGrM,EAAApE,YAAY6a,WAC3B,IAAIC,EAAQ,IAAI5B,EACdtZ,EAAUwY,QACV,OACAuC,IACAvZ,OAAOgP,EAAU2K,WAEnBrT,EAAKiS,aAAavO,IAAI,OAAQ0P,GAC9BpT,EAAKkS,cAAckB,EAAM3B,OAAS2B,EAClC,IAAIE,EAAiCzN,EAAQkM,wBAC7C,GAAIuB,EAAwB,CACrBtT,EAAK+R,0BAAyB/R,EAAK+R,wBAA0B,IAAIlS,SACtE,IAA2C,IAAA0T,EAAAvN,EAAAsN,GAAsBE,EAAAD,EAAArN,QAAAsN,EAAArN,KAAAqN,EAAAD,EAAArN,OAAE,CAA1D,IAAAuN,EAAApN,EAAAmN,EAAAjc,MAAA,GAACmc,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GAClBzT,EAAK+R,wBAAwBnK,IAAI8L,IACpC1T,EAAK+R,wBAAwBrO,IAAIgQ,EAAeC,4GAKtDja,QAAQsG,EAAK+I,GAAGrM,EAAApE,YAAY6a,WAG9B,IADA,IAAIxK,EAAiBD,EAAUC,eACtBrS,EAAI,EAAGgL,EAAIqH,EAAepN,OAAQjF,EAAIgL,IAAKhL,EAAG,CACrD,IAAIsd,EAAgBjL,EAAerS,GAC/Bud,EAAgBnL,EAAUoL,iBAAiBxd,GAC3C8c,EAAQ,IAAI5B,EACdtZ,EAAUwY,QACVmD,EACAZ,IACAW,GAGF5T,EAAKiS,aAAavO,IAAImQ,EAAeT,GACrCpT,EAAKkS,cAAckB,EAAM3B,OAAS2B,UAGtCpT,EAAK+T,KAAOC,EAAKpc,OAAOoI,KAkL5B,OA3Q8BoB,EAAA0Q,EAAA/R,GA6F5B+R,EAAA5Z,UAAA+b,SAAA,SAAShM,EAAYpR,EAA4BwO,QAA5B,IAAAxO,MAAA,WAA4B,IAAAwO,MAAA,MAE/C,IAAI4N,EAAahd,KAAKyS,UAAUC,eAAepN,OAAStF,KAAKkc,iBAAiB5W,OAC1EtF,KAAK8S,GAAGrM,EAAApE,YAAY6a,aAAaF,EACrC,IAAIG,EAAQ,IAAI5B,EACdvb,KAAKiC,UAAUwY,QACf7Z,GAEI,OAASoc,EAAWnY,SAAS,IACjCmY,EACAhL,EACA5C,GAEF,GAAIxO,EAAM,CACR,GAAIZ,KAAKgc,aAAarK,IAAI/Q,GAAO,MAAM,IAAI8Q,MAAM,wBACjD1R,KAAKgc,aAAavO,IAAI7M,EAAMuc,GAI9B,OAFAnd,KAAKic,cAAckB,EAAM3B,OAAS2B,EAClCnd,KAAKkc,iBAAiBrW,KAAKmM,GACpBmL,GASTtB,EAAA5Z,UAAAgc,aAAA,SAAajM,EAAYkM,GACvB,IAAIC,EAoBAhB,EAnBJ,YAFuB,IAAAe,OAAA,GAEflM,EAAKoM,gBACX,OACED,EAAQne,KAAK4c,SACb,MAEF,OACEuB,EAAQne,KAAK6c,SACb,MAEF,OACEsB,EAAQne,KAAK8c,SACb,MAEF,OACEqB,EAAQne,KAAK+c,SACb,MAEF,QAAS,MAAM,IAAIrL,MAAM,0BAa3B,OAVIyM,GAASA,EAAM7Y,SACjB6X,EAAQgB,EAAME,OACRrM,KAAOA,EACbmL,EAAMzC,MAAQjU,EAAApE,YAAY2Q,MAE1BmK,EAAQnd,KAAKge,SAAShM,GAEpBA,EAAKc,GAAG,KACV9S,KAAK8d,KAAKQ,gBAAgBnB,EAAM3B,MAAO0C,GAElCf,GAITtB,EAAA5Z,UAAAsc,cAAA,SAAcpB,GACZ,IAAIA,EAAMrK,GAAGrM,EAAApE,YAAY8Y,SAAzB,CAEA,IAAIgD,EAEJ,OAHA1a,OAAO0Z,EAAM3B,OAAS,GAEtB/X,OAAqB,MAAd0Z,EAAMnL,MACEmL,EAAMnL,KAAMoM,gBACzB,OACED,EAAQne,KAAK4c,WAAa5c,KAAK4c,aAC/B,MAEF,OACEuB,EAAQne,KAAK6c,WAAa7c,KAAK6c,aAC/B,MAEF,OACEsB,EAAQne,KAAK8c,WAAa9c,KAAK8c,aAC/B,MAEF,OACEqB,EAAQne,KAAK+c,WAAa/c,KAAK+c,aAC/B,MAEF,QAAS,MAAM,IAAIrL,MAAM,0BAE3BjO,OAAO0Z,EAAM3B,OAAS,GACtB2C,EAAMtY,KAAKsX,KAIbtB,EAAA5Z,UAAAuc,oBAAA,SAAoBxM,EAAYkM,GAC9B,IAAIC,EAoBAhB,EAnBJ,OAAQnL,EAAKoM,gBACX,OACED,EAAQne,KAAK4c,WAAa5c,KAAK4c,aAC/B,MAEF,OACEuB,EAAQne,KAAK6c,WAAa7c,KAAK6c,aAC/B,MAEF,OACEsB,EAAQne,KAAK8c,WAAa9c,KAAK8c,aAC/B,MAEF,OACEqB,EAAQne,KAAK+c,WAAa/c,KAAK+c,aAC/B,MAEF,QAAS,MAAM,IAAIrL,MAAM,0BAa3B,OAVIyM,EAAM7Y,QACR6X,EAAQgB,EAAMA,EAAM7Y,OAAS,IACvB0M,KAAOA,GAEbmL,EAAQnd,KAAKge,SAAShM,GACtBmM,EAAMtY,KAAKsX,IAETnL,EAAKc,GAAG,KACV9S,KAAK8d,KAAKQ,gBAAgBnB,EAAM3B,MAAO0C,GAElCf,GAITtB,EAAA5Z,UAAAwc,kBAAA,WACE,IAAIC,EAAK1e,KAAKyc,cAGd,OAFKzc,KAAK0c,WACL1c,KAAK0c,WAAW7W,KAAK6Y,GADJ1e,KAAK0c,YAAegC,GAEnC1e,KAAKmc,aAAeuC,EAAG7Z,SAAS,KAIzCgX,EAAA5Z,UAAA0c,kBAAA,WACElb,OAA0B,MAAnBzD,KAAK0c,YACZ,IAAIpX,EAAiBtF,KAAK0c,WAAYpX,OACtC7B,OAAO6B,EAAS,GACRtF,KAAK0c,WAAY2B,MACrB/Y,EAAS,EACXtF,KAAKmc,aAAuBnc,KAAK0c,WAAYpX,EAAS,GAAGT,SAAS,KAElE7E,KAAKmc,aAAe,KACpBnc,KAAK0c,WAAa,OAKtBb,EAAA5Z,UAAA2c,SAAA,SAASjf,EAAgB0c,GAMvB,GALArc,KAAKqc,IAAMA,EACX5Y,QAAQzD,KAAK0c,aAAe1c,KAAK0c,WAAWpX,QAC5CtF,KAAK0c,WAAa,KAClB1c,KAAKmc,aAAe,KACpBnc,KAAK4c,SAAW5c,KAAK6c,SAAW7c,KAAK8c,SAAW9c,KAAK+c,SAAW,KAC5D/c,KAAKya,QAAQ/O,QAAQmT,UAEvB,IADA,IAAIzC,EAAiBpc,KAAKoc,eACjB/b,EAAI,EAAGgL,EAAI+Q,EAAe9W,OAAQjF,EAAIgL,IAAKhL,EAAG,CACrD,IAAIye,EAAgB1C,EAAe/b,GACnCV,EAAOof,iBACL1C,EACAyC,EAAcE,aACdF,EAAcha,OAAOma,eACrBH,EAAc9Z,KACd8Z,EAAc7Z,UAOtB4W,EAAA5Z,UAAA4C,SAAA,WAAqB,OAAO7E,KAAKiC,UAAUuS,YAC7CqH,EA3QA,CAA8BrB,GAAjB9a,EAAAmc,WA8Qb,IAAAqD,EAAA,SAAApV,GAUE,SAAAoV,EAAYzE,EAAkBhI,GAA9B,IAAA1I,EACED,EAAAtJ,KAAAR,KAAMya,EAAS,GAAI,KAAGza,KATxB+J,EAAAgE,KAAOtE,EAAY0V,gBAUjB,IAAI3K,EAAa/B,EAAU2M,2BAC3BrV,EAAKyK,WAAaA,EAClBzK,EAAK2D,aAAe8G,EACpBzK,EAAK0I,UAAYA,EACjB1I,EAAKiI,KAAOrL,EAAAgF,KAAKQ,IAAIkT,WAAW5M,KAEpC,OAlBoCtH,EAAA+T,EAAApV,GAkBpCoV,EAlBA,CAAoC1E,GAAvB9a,EAAAwf,iBAqBb,IAAAxI,EAAA,SAAA5M,GAUE,SAAA4M,EACEX,EACAvB,EACA9G,EACA0B,GAJF,IAAArF,EAMED,EAAAtJ,KAAAR,KAAM+V,EAAe0E,QAASjG,EAAY9G,IAAa1N,YAdzD+J,EAAAgE,KAAOtE,EAAY6V,gBAejBvV,EAAKgM,eAAiBA,EACtBhM,EAAKqF,YAAcA,EACnBrF,EAAK2Q,MAAQtL,EAAYsL,QAE7B,OArBoCvP,EAAAuL,EAAA5M,GAqBpC4M,EArBA,CAAoC8D,GAAvB9a,EAAAgX,iBAwBb,IAAA6I,EAAA,SAAAzV,GAUE,SAAAyV,EACEtd,EACAyL,EACAsE,EACA5C,EACAQ,GALF,IAAA7F,EAOED,EAAAtJ,KAAAR,KAAMiC,EAAUwY,QAASxY,EAAUuS,WAAY9G,EAAcsE,EAAM5C,IAAYpP,YAfjF+J,EAAAgE,KAAOtE,EAAY+V,MAKnBzV,EAAA0V,cAAqB,EAWnB1V,EAAK9H,UAAYA,EACjB8H,EAAK2Q,MAAQzY,EAAUyY,MACvB3Q,EAAKiI,KAAOA,EACZjI,EAAK6F,OAASA,IAElB,OAvB2BzE,EAAAoU,EAAAzV,GAuB3ByV,EAvBA,CAA2BvE,GAAdtb,EAAA6f,QA0Bb,IAAAlH,EAAA,SAAAvO,GAYE,SAAAuO,EACEoC,EACAjG,EACA9G,EACAkC,GAJF,IAAA7F,EAMED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,IAAa1N,YAhB1C+J,EAAAgE,KAAOtE,EAAYyO,SAKnBnO,EAAAoO,gBAA4C,KAE5CpO,EAAAqO,gBAA4C,KAU1CrO,EAAK6F,OAASA,IAElB,OArB8BzE,EAAAkN,EAAAvO,GAqB9BuO,EArBA,CAA8BmC,GAAjB9a,EAAA2Y,WAwBb,IAAA5D,EAAA,SAAA3K,GAiBE,SAAA2K,EACEgG,EACAjG,EACA9G,EACA0B,EACAuH,GALF,IAAA5M,EAOED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,IAAa1N,YAtB1C+J,EAAAgE,KAAOtE,EAAYyH,gBAKnBnH,EAAA4R,UAA+B,IAAI/R,IAEnCG,EAAAyM,gBAA8C,KAE9CzM,EAAAoH,cAAuC,KAEvCpH,EAAA+M,qBAAiD,KAEjD/M,EAAA0N,mBAA2D,IAAI7N,IAU7DG,EAAKqF,YAAcA,EACnBrF,EAAK2Q,MAAQtL,EAAYsL,MACzB3Q,EAAK4M,eAAiBA,IAM1B,OAjCoCxL,EAAAsJ,EAAA3K,GA8BlC2K,EAAAxS,UAAA4C,SAAA,WACE,OAAO7E,KAAKwU,YAEhBC,EAjCA,CAAoC+F,GAAvB9a,EAAA+U,iBAoCb,IAAAiL,EAAA,SAAA5V,GAwBE,SAAA4V,EACEzd,EACAuS,EACA9G,EACAiS,EACAC,gBADA,IAAAD,MAAA,WACA,IAAAC,MAAA,MALF,IAAA7V,EAOED,EAAAtJ,KAAAR,KAAMiC,EAAUwY,QAASjG,EAAY9G,IAAa1N,KASlD,GAtCF+J,EAAAgE,KAAOtE,EAAYwT,MAWnBlT,EAAA+R,wBAAmD,KAEnD/R,EAAA8V,oBAA2B,EAE3B9V,EAAA+V,oBAAuC,KAEvC/V,EAAAyN,UAA+C,KAE/CzN,EAAAgW,aAAyB,EAWvBhW,EAAK9H,UAAYA,EACjB8H,EAAK2Q,MAAQzY,EAAUyY,MACvB3Q,EAAK4M,eAAiB1U,EAAU0U,eAChC5M,EAAK4V,cAAgBA,EACrB5V,EAAKiI,KAAO/P,EAAUwY,QAAQ/O,QAAQW,UAAU2T,QAAQjW,GACxDA,EAAK6V,KAAOA,EAGRA,EAAM,CACR,IAAIvC,EAAyBuC,EAAK9D,wBAClC,GAAIuB,EAAwB,CACrBtT,EAAK+R,0BAAyB/R,EAAK+R,wBAA0B,IAAIlS,SACtE,IAAiC,IAAAqW,EAAAlQ,EAAAsN,GAAsB6C,EAAAD,EAAAhQ,QAAAiQ,EAAAhQ,KAAAgQ,EAAAD,EAAAhQ,OAAE,CAAhD,IAAAuN,EAAApN,EAAA8P,EAAA5e,MAAA,GAACgX,EAAAkF,EAAA,GAAU2C,EAAA3C,EAAA,GAClBzT,EAAK+R,wBAAwBrO,IAAI6K,EAAU6H,uGAMjD,IACI9f,EAAQgL,EADR+D,EAAcrF,EAAK9H,UAAUmN,YAEjC,GAAIA,EAAa,CACf,IAAIiL,EAAiBjL,EAAYiL,eACjC,GAAIsF,EAAe,CACjB,IAAKtU,EAAIsU,EAAcra,SAAW+U,EAAe/U,OAC/C,MAAM,IAAIoM,MAAM,gCAElB,GAAIrG,EAEF,IADKtB,EAAK+R,0BAAyB/R,EAAK+R,wBAA0B,IAAIlS,KACjEvJ,EAAI,EAAGA,EAAIgL,IAAKhL,EACnB0J,EAAK+R,wBAAwBrO,IAAI4M,EAAeha,GAAGO,KAAKwE,KAAMua,EAActf,SAG3E,GAAIga,EAAe/U,OACxB,MAAM,IAAIoM,MAAM,yCA4CxB,OA9G2BvG,EAAAuU,EAAA5V,GAwEzB4V,EAAAzd,UAAAme,eAAA,SAAeC,GACb,IAAIC,EAAwBtgB,KAC5B,GAAG,GAAIsgB,GAAWD,EAAQ,OAAO,QAC1BC,EAAUA,EAAQV,MACzB,OAAO,GAITF,EAAAzd,UAAAse,eAAA,SAAexS,EAAoByS,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQzS,GACN,KAAKvH,EAAagB,YAEhB,GADIiZ,EAAoBzgB,KAAKugB,eAAe/Z,EAAakB,uBAClC,OAAO+Y,EAC9B,MAEF,KAAKja,EAAaiB,YAChB,IAAIgZ,EACJ,GADIA,EAAoBzgB,KAAKugB,eAAe/Z,EAAamB,uBAClC,OAAO8Y,EAC9B,MAEF,QAAShd,QAAO,GAGpB,IAAImO,EAAyB5R,KAC7B,EAAG,CACD,IAAIwX,EAAY5F,EAAS4F,UACzB,GAAIA,EAAW,CACb,IAAIkJ,EAAWlJ,EAAUtW,IAAI6M,GAC7B,GAAI2S,EAAU,OAAOA,SAEhB9O,EAAWA,EAASgO,MAC7B,OAAO,MAGTF,EAAAzd,UAAA4C,SAAA,WACE,OAAO7E,KAAKwU,YAEhBkL,EA9GA,CAA2BlF,GAAd9a,EAAAggB,QAiHb,IAAA1F,EAAA,SAAAlQ,GAQE,SAAAkQ,EACES,EACAjG,EACA9G,EACA0B,EACAuH,GALF,IAAA5M,EAOED,EAAAtJ,KAAAR,KAAMya,EAASjG,EAAY9G,EAAc0B,EAAauH,IAAe3W,YAbvE+J,EAAAgE,KAAOtE,EAAYwM,sBAerB,OAjBwC9K,EAAA6O,EAAAlQ,GAiBxCkQ,EAjBA,CAAwCvF,GAA3B/U,EAAAsa,qBAoBb,IAAA2G,EAAA,SAAA7W,GAUE,SAAA6W,EACE1e,EACAuS,EACA9G,EACAiS,EACAC,QADA,IAAAD,eACA,IAAAC,MAAA,MALF,IAAA7V,EAOED,EAAAtJ,KAAAR,KAAMiC,EAAWuS,EAAY9G,EAAciS,EAAeC,IAAK5f,YAfjE+J,EAAAgE,KAAOtE,EAAYmX,YAiBrB,OAnB+BzV,EAAAwV,EAAA7W,GAmB/B6W,EAnBA,CAA+BjB,GAAlBhgB,EAAAihB,YAsBb,SAAkBE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,0BAEAA,IAAA,0BAKAA,IAAA,kDAEAA,IAAA,iDAEAA,IAAA,iDAEAA,IAAA,uDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,4CAKAA,IAAA,sCAMAA,IAAA,sCAQAA,IAAA,wCAxDF,CAAkBnhB,EAAAmhB,YAAAnhB,EAAAmhB,eAgElB,IAAA9C,EAAA,WAyCE,SAAAA,IAtBA/d,KAAA8gB,aAAyC,KAof3C,OA7eS/C,EAAApc,OAAP,SAAcof,GACZ,IAAIC,EAAa,IAAIjD,EAWrB,OAVAiD,EAAWpR,OAAS,KACpBoR,EAAWtG,MAAK,EAChBsG,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACxBF,EAAWG,YAAc,KACzBH,EAAWpO,WAAamO,EAAgBtO,UAAUG,WAClDoO,EAAWlF,wBAA0BiF,EAAgBjF,wBACrDkF,EAAWI,cAAgBzU,QAAQ,GACnCqU,EAAWK,iBAAmB,KACvBL,GAMTjD,EAAA9b,UAAA6Q,GAAA,SAAGY,GAAyB,OAAQ1T,KAAK0a,MAAQhH,IAASA,GAE1DqK,EAAA9b,UAAAkQ,MAAA,SAAMuB,GAAyB,OAA8B,IAAtB1T,KAAK0a,MAAQhH,IAEpDqK,EAAA9b,UAAAwL,IAAA,SAAIiG,GAAyB1T,KAAK0a,OAAShH,GAE3CqK,EAAA9b,UAAAqf,MAAA,SAAM5N,GAAyB1T,KAAK0a,QAAUhH,GAG9CqK,EAAA9b,UAAAsf,KAAA,WACE,IAAIC,EAAS,IAAIzD,EAWjB,OAVAyD,EAAO5R,OAAS5P,KAChBwhB,EAAO9G,MAAQ1a,KAAK0a,MACpB8G,EAAOT,gBAAkB/gB,KAAK+gB,gBAC9BS,EAAOP,cAAgBjhB,KAAKihB,cAC5BO,EAAON,WAAalhB,KAAKkhB,WACzBM,EAAOL,YAAcnhB,KAAKmhB,YAC1BK,EAAO5O,WAAa5S,KAAK4S,WACzB4O,EAAO1F,wBAA0B9b,KAAK8b,wBACtC0F,EAAOJ,cAAgBphB,KAAKohB,cAC5BI,EAAOH,iBAAmBrhB,KAAKqhB,iBAAmBrhB,KAAKqhB,iBAAiBI,QAAU,KAC3ED,GAITzD,EAAA9b,UAAAyf,KAAA,mBACM9R,EAASnM,OAAOzD,KAAK4P,QACzB,GAAI5P,KAAK8gB,aAAc,KACrB,IAAwB,IAAAtD,EAAAzN,EAAA/P,KAAK8gB,aAAalI,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAA/C,IAAI0R,EAAWxR,EAAA7O,MACdqgB,EAAY7O,GAAGrM,EAAApE,YAAYuf,SAC7B5hB,KAAK+gB,gBAAgBxC,cAAcoD,qGAGvC3hB,KAAK8gB,aAAe,KAEtB,OAAOlR,GAITmO,EAAA9b,UAAA4f,eAAA,SAAe7P,EAAYpR,EAAcsd,EAAe9O,GACtD,IAAIuS,EAAc3hB,KAAK+gB,gBAAgB9C,aAAajM,GAAM,GAC1D,GAAKhS,KAAK8gB,aACL,CACH,IAAIgB,EAAgB9hB,KAAK8gB,aAAa5f,IAAIN,GAC1C,GAAIkhB,EAOF,OANI1S,EACFpP,KAAK+gB,gBAAgBtG,QAAQlU,MAC3BG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,OAEdX,QAAO,GACPqe,OAVa9hB,KAAK8gB,aAAe,IAAIlX,IAkBhD,OALA+X,EAAYlU,IAAIhH,EAAApE,YAAYuf,QAC5B5hB,KAAK8gB,aAAarT,IAAI7M,EAAM+gB,GACxB3P,EAAKc,GAAG,KACV9S,KAAKse,gBAAgBqD,EAAYnG,MAAO0C,GAEnCyD,GAIT5D,EAAA9b,UAAA8f,oBAAA,SAAoBvG,EAAYxJ,EAAYpR,GAC1C,GAAKZ,KAAK8gB,aACL,CACH,IAAIgB,EAAgB9hB,KAAK8gB,aAAa5f,IAAIN,GAC1C,GAAIkhB,EAAe,CACjB,IAAI1S,EAAc0S,EAAc1S,YAOhC,OANIA,EACFpP,KAAK+gB,gBAAgBtG,QAAQlU,MAC3BG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,OAEdX,QAAO,GACPqe,QAXa9hB,KAAK8gB,aAAe,IAAIlX,IAchDnG,OAAO+X,EAAQxb,KAAK+gB,gBAAgB9E,cAAc3W,QAClD,IAAI0c,EAAc,IAAIzG,EACpBvb,KAAK+gB,gBAAgBtG,QACrB7Z,EACA4a,EACAxJ,EACA,MAGF,OADAhS,KAAK8gB,aAAarT,IAAI7M,EAAMohB,GACrBA,GAITjE,EAAA9b,UAAAggB,eAAA,SAAerhB,GACb,IAAIuc,EACAmD,EAAuBtgB,KAC3B,GACE,GAAIsgB,EAAQQ,eAAiB3D,EAAQmD,EAAQQ,aAAa5f,IAAIN,IAC5D,OAAOuc,QAEFmD,EAAUA,EAAQ1Q,QAC3B,OAAO5P,KAAK+gB,gBAAgB/E,aAAa9a,IAAIN,IAI/Cmd,EAAA9b,UAAAigB,eAAA,SAAe1G,GACb,IAAI2G,EACAC,EACJ,GAAI5G,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OAAO,EACtB2G,EAAMniB,KAAKohB,kBACN,MAAIgB,EAAMpiB,KAAKqhB,kBAMpB,OAAO,EALP,IAAIhhB,GAAMmb,EAAQ,IAAM,GAAM,EAC9B,GAAInb,GAAK+hB,EAAI9c,OAAQ,OAAO,EAC5B6c,EAAMC,EAAI/hB,GACVmb,GAAmB,IAATnb,EAAI,GAIhB,OAAOgiB,OACLC,QACEH,EACAI,QACEC,QACA7V,QAAQ6O,KAGZiH,WAKJ1E,EAAA9b,UAAAqc,gBAAA,SAAgB9C,EAAY0C,GAC1B,IAAIiE,EACAO,GAAY,EAChB,GAAIlH,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OACf2G,EAAMniB,KAAKohB,kBACN,CACL,IAAIgB,EAAMpiB,KAAKqhB,iBAMf,IALAqB,GAAQlH,EAAQ,IAAM,GAAM,EACvB4G,IACHpiB,KAAKqhB,iBAAmBe,EAAM,IAAIjc,MAAMuc,EAAM,GAC9CN,EAAI9c,OAAS,GAER8c,EAAI9c,QAAUod,GAAKN,EAAIvc,KAAK8G,QAAQ,IAC3CwV,EAAMC,EAAIM,GACVlH,GAAqB,IAAXkH,EAAM,GAElBP,EAAMjE,EACFyE,OACER,EACAI,QACEC,QACA7V,QAAQ6O,KAGZ8G,QACEH,EACAS,QACEL,QACEC,QACA7V,QAAQ6O,MAIdkH,GAAO,EAAW1iB,KAAKqhB,iBAAkBqB,GAAOP,EAC/CniB,KAAKohB,cAAgBe,GAI5BpE,EAAA9b,UAAA4gB,QAAA,SAAQC,GACN9iB,KAAK0a,OAAuB,KAAdoI,EAAMpI,MACpB1a,KAAKohB,cAAgB0B,EAAM1B,cAC3BphB,KAAKqhB,iBAAmByB,EAAMzB,kBAIhCtD,EAAA9b,UAAA8gB,mBAAA,SAAmBD,GACbA,EAAMhQ,GAAE,IACV9S,KAAKyN,IAAG,IAENqV,EAAMhQ,GAAE,IACV9S,KAAKyN,IAAG,KAENqV,EAAMhQ,GAAE,IAAsBgQ,EAAM5B,YAAclhB,KAAKkhB,YACzDlhB,KAAKyN,IAAG,KAENqV,EAAMhQ,GAAE,KAAyBgQ,EAAM7B,eAAiBjhB,KAAKihB,eAC/DjhB,KAAKyN,IAAG,KAENqV,EAAMhQ,GAAE,KACV9S,KAAKyN,IAAG,OAKZsQ,EAAA9b,UAAA+gB,cAAA,SAAcC,EAAYC,GAExBljB,KAAK0a,OAASuI,EAAKvI,MAAQwI,EAAMxI,MAAK,GAGtC1a,KAAK0a,OAAmB,KAAVuI,EAAKvI,MACnB1a,KAAK0a,OAAoB,KAAXwI,EAAMxI,MAGpB1a,KAAKohB,cAAgBkB,QAAQW,EAAK7B,cAAe8B,EAAM9B,eACvD,IAAI+B,EAAUF,EAAK5B,iBACf+B,EAAWF,EAAM7B,iBACrB,GAAe,MAAX8B,GAA+B,MAAZC,EAAkB,CACvC,IAAIC,EAAUrjB,KAAKqhB,iBACfiC,EAAYC,IAAIJ,EAAQ7d,OAAQ8d,EAAS9d,QAC7C,GAAIge,EAAW,CACb,GAAKD,EACA,KAAOA,EAAQ/d,OAASge,GAAWD,EAAQxd,KAAK8G,QAAQ,SAD/C0W,EAAU,IAAIld,MAAMmd,GAElC,IAAK,IAAIjjB,EAAI,EAAGA,EAAIijB,IAAajjB,EAC/BgjB,EAAQhjB,GAAKiiB,QACXa,EAAQ9iB,GACR+iB,EAAS/iB,OAYnB0d,EAAA9b,UAAAuhB,YAAA,SAAYC,EAAqBzR,GAM/B,GAHAvO,OAAOuO,GAAQrL,EAAAgF,KAAKc,OAGfuF,EAAKc,GAAG,IAAsC,OAAO,EAE1D,IAAI4Q,EACJ,OAAQ7c,EAAA8c,gBAAgBF,IAGtB,KAAK5c,EAAA+c,aAAaC,SAChB,IAAI9C,EAAkB/gB,KAAK+gB,gBACvB5D,EAAQ4D,EAAgB9E,cAAcpV,EAAAid,iBAAiBL,IAC3D,OAAQ1C,EAAgBjD,KAAKoE,eAAe/E,EAAM3B,QAC3CuI,EAAsB5G,EAAMnL,KAAMA,GAI3C,KAAKnL,EAAA+c,aAAaI,SAEhB,OADAvgB,OAAOoD,EAAAod,WAAWR,IACXzjB,KAAKwjB,YAAY3c,EAAAqd,iBAAiBT,GAAOzR,GAIlD,KAAKnL,EAAA+c,aAAaO,UAAW,OAAO,EAEpC,KAAKtd,EAAA+c,aAAaQ,OAChB,OAAQvd,EAAAwd,YAAYZ,IAGlB,KAAK5c,EAAAyd,SAASC,MACd,KAAK1d,EAAAyd,SAASE,MACd,KAAK3d,EAAAyd,SAASG,MACd,KAAK5d,EAAAyd,SAASI,MACd,KAAK7d,EAAAyd,SAASK,MACd,KAAK9d,EAAAyd,SAASM,MACd,KAAK/d,EAAAyd,SAASO,MACd,KAAKhe,EAAAyd,SAASQ,MACd,KAAKje,EAAAyd,SAASS,MACd,KAAKle,EAAAyd,SAASU,MACd,KAAKne,EAAAyd,SAASW,MACd,KAAKpe,EAAAyd,SAASY,MACd,KAAKre,EAAAyd,SAASa,MACd,KAAKte,EAAAyd,SAASc,MACd,KAAKve,EAAAyd,SAASe,MACd,KAAKxe,EAAAyd,SAASgB,MACd,KAAKze,EAAAyd,SAASiB,MACd,KAAK1e,EAAAyd,SAASkB,MACd,KAAK3e,EAAAyd,SAASmB,MACd,KAAK5e,EAAAyd,SAASoB,MACd,KAAK7e,EAAAyd,SAASqB,MACd,KAAK9e,EAAAyd,SAASsB,MACd,KAAK/e,EAAAyd,SAASuB,MACd,KAAKhf,EAAAyd,SAASwB,MACd,KAAKjf,EAAAyd,SAASyB,MACd,KAAKlf,EAAAyd,SAAS0B,MACd,KAAKnf,EAAAyd,SAAS2B,MACd,KAAKpf,EAAAyd,SAAS4B,MACd,KAAKrf,EAAAyd,SAAS6B,MACd,KAAKtf,EAAAyd,SAAS8B,MACd,KAAKvf,EAAAyd,SAAS+B,MACd,KAAKxf,EAAAyd,SAASgC,MAAO,OAAO,EAG5B,KAAKzf,EAAAyd,SAASiC,OACZ,QAEI1f,EAAA8c,gBAAgBD,EAAU7c,EAAA2f,cAAc/C,KAAU5c,EAAA+c,aAAa6C,QAEhC,GAA7B5f,EAAA6f,iBAAiBhD,IAEc,GAA7B7c,EAAA6f,iBAAiBhD,KAChB1jB,KAAKwjB,YAAY3c,EAAA8f,eAAelD,GAAOzR,KAI5CnL,EAAA8c,gBAAgBD,EAAU7c,EAAA8f,eAAelD,KAAU5c,EAAA+c,aAAa6C,QAEjC,GAA7B5f,EAAA6f,iBAAiBhD,IAEc,GAA7B7c,EAAA6f,iBAAiBhD,KAChB1jB,KAAKwjB,YAAY3c,EAAA2f,cAAc/C,GAAOzR,KASjD,KAAKnL,EAAAyd,SAASsC,OAGZ,QAGM/f,EAAA8c,gBAAgBD,EAAU7c,EAAA2f,cAAc/C,KAAU5c,EAAA+c,aAAa6C,OAC/D5f,EAAA6f,iBAAiBhD,IAAY1R,EAAK6U,wBAAwBlgB,EAAAgF,KAAKG,OAC3D9L,KAAKwjB,YAAYE,EAAS1R,IAG9BnL,EAAA8c,gBAAgBD,EAAU7c,EAAA8f,eAAelD,KAAU5c,EAAA+c,aAAa6C,OAChE5f,EAAA6f,iBAAiBhD,IAAY1R,EAAK6U,wBAAwBlgB,EAAAgF,KAAKG,OAC3D9L,KAAKwjB,YAAYE,EAAS1R,IAMtC,KAAKnL,EAAAyd,SAASwC,OACZ,IAAIC,EAAQ,GAAK/U,EAAKgV,KACtB,OAAOngB,EAAA8c,gBAAgBD,EAAU7c,EAAA8f,eAAelD,KAAU5c,EAAA+c,aAAa6C,OAChE5f,EAAA6f,iBAAiBhD,GAAWqD,EAIrC,KAAKlgB,EAAAyd,SAAS2C,OACRF,EAAQ,GAAK/U,EAAKgV,KACtB,OAAOhnB,KAAKwjB,YAAY3c,EAAA2f,cAAc/C,GAAOzR,KAC3CnL,EAAA8c,gBAAgBD,EAAU7c,EAAA8f,eAAelD,KAAU5c,EAAA+c,aAAa6C,OAChE5f,EAAA6f,iBAAiBhD,GAAWqD,GAMhC,KAAKlgB,EAAAyd,SAAS4C,OACRH,EAAQ,GAAK/U,EAAKgV,KACtB,OAAOhV,EAAKc,GAAE,KAERjM,EAAA8c,gBAAgBD,EAAU7c,EAAA8f,eAAelD,KAAU5c,EAAA+c,aAAa6C,OAChE5f,EAAA6f,iBAAiBhD,GAAWqD,GAE9B/mB,KAAKwjB,YAAY3c,EAAA2f,cAAc/C,GAAOzR,MACpCnL,EAAA8c,gBAAgBD,EAAU7c,EAAA8f,eAAelD,KAAU5c,EAAA+c,aAAa6C,OAChE5f,EAAA6f,iBAAiBhD,IAAYqD,GAKrC,KAAKlgB,EAAAyd,SAAS6C,OACd,KAAKtgB,EAAAyd,SAAS8C,OACd,KAAKvgB,EAAAyd,SAAS+C,OACZ,OAAOrnB,KAAKwjB,YAAY3c,EAAA2f,cAAc/C,GAAOzR,IACtChS,KAAKwjB,YAAY3c,EAAA8f,eAAelD,GAAOzR,GAGlD,MAGF,KAAKnL,EAAA+c,aAAa0D,MAChB,OAAQzgB,EAAA0gB,WAAW9D,IAGjB,KAAK5c,EAAA2gB,QAAQC,OACb,KAAK5gB,EAAA2gB,QAAQE,OAAQ,OAAO,EAG5B,KAAK7gB,EAAA2gB,QAAQG,OACb,KAAK9gB,EAAA2gB,QAAQI,OACb,KAAK/gB,EAAA2gB,QAAQK,UAAW,OAAO7V,EAAKgV,KAAO,EAE7C,MAIF,KAAKngB,EAAA+c,aAAa6C,MAChB,IAAInlB,EAAa,EACjB,OAAQuF,EAAAihB,kBAAkBrE,IACxB,OAAuBniB,EAAQuF,EAAA6f,iBAAiBjD,GAAO,MACvD,OAAuBniB,EAAQuF,EAAAkhB,oBAAoBtE,GAAO,MAC1D,OAAuBniB,EAAQwK,IAAIjF,EAAAmhB,iBAAiBvE,IAAQ,MAC5D,OAAuBniB,EAAQwK,IAAIjF,EAAAohB,iBAAiBxE,IAAQ,MAC5D,QAAShgB,QAAO,GAElB,OAAQuO,EAAKjE,MACX,OAAkB,OAAOzM,EAAQsK,GAAGsc,WAAa5mB,EAAQsK,GAAGuc,UAC5D,OAAmB,OAAO7mB,EAAQuK,IAAIqc,WAAa5mB,EAAQuK,IAAIsc,UAC/D,OAAkB,OAAO7mB,EAAQ,GAAKA,EAAQ2K,GAAGkc,UACjD,OAAmB,OAAO7mB,EAAQ,GAAKA,EAAQ4K,IAAIic,UACnD,QAAoB,OAAuB,KAAP,EAAR7mB,GAE9B,MAIF,KAAKuF,EAAA+c,aAAawE,KAChB,IAAIC,OAAQ,EACZ,OAAQxhB,EAAAyhB,aAAa7E,IACnB,KAAK,EAAM4E,EAAWxhB,EAAA0hB,aAAa9E,GAAQ9c,EAAAgF,KAAKC,GAAKjF,EAAAgF,KAAKM,GAAI,MAC9D,KAAK,EAAMoc,EAAWxhB,EAAA0hB,aAAa9E,GAAQ9c,EAAAgF,KAAKE,IAAMlF,EAAAgF,KAAKO,IAAK,MAChE,QAAWmc,EAAWxhB,EAAA0hB,aAAa9E,GAAQ9c,EAAAgF,KAAKG,IAAMnF,EAAAgF,KAAKQ,IAE7D,OAAO4X,EAAsBsE,EAAUrW,GAMzC,KAAKnL,EAAA+c,aAAa4E,MAChB,IAAK3hB,EAAA4hB,aAAahF,GAAO,CACvB,IAAIuD,EAAOvjB,OAAOoD,EAAA6hB,mBAAmBjF,IACjCkF,EAAO9hB,EAAA+hB,cAAcnF,EAAMuD,EAAO,GACtC,OAAOhnB,KAAKwjB,YAAYmF,EAAM3W,GAGhC,MAIF,KAAKnL,EAAA+c,aAAaiF,GAChB,OAAO7oB,KAAKwjB,YAAY3c,EAAAiiB,UAAUrF,GAAOzR,IAClChS,KAAKwjB,YAAY/f,OAAOoD,EAAAkiB,WAAWtF,IAAQzR,GAIpD,KAAKnL,EAAA+c,aAAaoF,OAChB,OAAOhpB,KAAKwjB,YAAY3c,EAAAoiB,cAAcxF,GAAOzR,IACtChS,KAAKwjB,YAAY3c,EAAAqiB,cAAczF,GAAOzR,GAI/C,KAAKnL,EAAA+c,aAAauF,KAChB,IAAI1O,EAAUza,KAAK+gB,gBAAgBtG,QAC/B7I,EAAWnO,OAAOgX,EAAQvQ,gBAAgBhJ,IAAIuC,OAAOoD,EAAAuiB,cAAc3F,MACvEhgB,OAAOmO,EAAS7D,MAAQtE,EAAYsS,UACpC,IAAInJ,EAAwBhB,EAAUa,UAAUG,WAChD,OAAmBhB,EAAUkM,KAAKhL,GAAE,IAC7BiR,EAAsBnR,EAAYZ,GAI3C,KAAKnL,EAAA+c,aAAayF,YAAa,OAAO,EAExC,OAAO,GAITtL,EAAA9b,UAAA2c,SAAA,WACEnb,OAAsB,MAAfzD,KAAK4P,QACZ5P,KAAKihB,cAAgB,KACrBjhB,KAAKkhB,WAAa,KAClBlhB,KAAKmhB,YAAc,KACnBnhB,KAAK8b,wBAA0B,MAEnCiC,EAvgBA,GA0gBA,SAAAgG,EAA+BsE,EAAgBiB,GAC7C,IAAIC,EAAWlB,EAASmB,SACpBC,EAASH,EAAOE,SACpB,OAAQnB,EAASvV,GAAE,IACZyW,EAAWE,GACXpB,EAASvV,GAAE,IAAsBwW,EAAOxW,GAAE,GA/gBtCpT,EAAAqe,6ZCz8Fb,IAAAtX,EAAAtG,EAAA,GAQAupB,EAAAvpB,EAAA,GAYST,EAAAiqB,MAXPD,EAAAC,MAWcjqB,EAAAqV,MATd2U,EAAA3U,MAGF,IASY/G,EATZ9K,EAAA/C,EAAA,IASA,SAAY6N,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBAvEF,CAAYA,EAAAtO,EAAAsO,WAAAtO,EAAAsO,cA2EZtO,EAAAkqB,oBAAA,SAAoC7b,GAClC,OAAQA,GACN,KAAKC,EAASoJ,QACd,KAAKpJ,EAAS6b,KACd,KAAK7b,EAAS8b,KACd,KAAK9b,EAAS+b,MAAO,OAAO,EAE9B,OAAO,GAITrqB,EAAAsqB,eAAA,SAA+Bjc,GAC7B,OAAQA,GACN,KAAKC,EAASic,WACd,KAAKjc,EAASkc,KACd,KAAKlc,EAASmc,cACd,KAAKnc,EAASoc,eAAgB,OAAO,EAEvC,OAAO,GAIT1qB,EAAA2qB,sBAAA,SAAsCtc,GACpC,OAAQA,GACN,KAAKC,EAASic,WACd,KAAKjc,EAASoc,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAE,EAAA,oBAAAA,IAOEtqB,KAAA4P,OAAsB,KAEtB5P,KAAA0a,MAAqBjU,EAAApE,YAAY2Q,KAm4BnC,OAh4BEsX,EAAAroB,UAAA6Q,GAAA,SAAGY,GAA2B,OAAQ1T,KAAK0a,MAAQhH,IAASA,GAE5D4W,EAAAroB,UAAAkQ,MAAA,SAAMuB,GAA2B,OAA8B,IAAtB1T,KAAK0a,MAAQhH,IAEtD4W,EAAAroB,UAAAwL,IAAA,SAAIiG,GAA2B1T,KAAK0a,OAAShH,GAItC4W,EAAAC,WAAP,SACE3pB,EACA+e,EACA6K,EACApmB,GAEA,IAAI4N,EAAO,IAAIyY,EAKf,OAJAzY,EAAK5N,MAAQA,EACb4N,EAAKpR,KAAOA,EAAMA,EAAKgP,OAASoC,EAChCA,EAAK2N,cAAgBA,EAAmBA,GAAe+K,GAAU/K,EAAe3N,GAChFA,EAAKwY,WAAaA,EACXxY,GAGFsY,EAAAK,kBAAP,SACEvmB,GAEA,OAAOkmB,EAAKC,WACVD,EAAKM,2BAA2B,GAAIxmB,GACpC,MACA,EACAA,IAIGkmB,EAAAO,oBAAP,SACEjqB,EACAmQ,EACA3M,GAEA,IAAI0mB,EAAO,IAAIC,EAIf,OAHAD,EAAK1mB,MAAQA,EACb0mB,EAAKlqB,KAAOA,EAAMA,EAAKgP,OAASkb,EAChCA,EAAK/Z,YAAcA,EAAiBA,IAAaA,EAAYnB,OAASkb,GAC/DA,GAGFR,EAAAU,gBAAP,SACEpqB,EACAoR,EACAsJ,EACAvN,EACA3J,GAEA,IAAI0mB,EAAO,IAAIG,EAMf,OALAH,EAAK1mB,MAAQA,EACb0mB,EAAKlqB,KAAOA,EAAMA,EAAKgP,OAASkb,EAChCA,EAAK9Y,KAAOA,EAAUA,IAAMA,EAAKpC,OAASkb,GAC1CA,EAAKxP,YAAcA,EAAiBA,IAAaA,EAAY1L,OAASkb,GACtEA,EAAKI,cAAgBnd,EACd+c,GAGFR,EAAAa,gBAAP,SACEC,EACAxY,EACAyY,EACAb,EACApmB,GAEA,IAAIknB,EAAM,IAAIC,EAMd,OALAD,EAAIlnB,MAAQA,EACZknB,EAAIF,WAAaA,EAAYV,GAAUU,EAAYE,GACnDA,EAAI1Y,WAAaA,EAAYA,EAAWhD,OAAS0b,EACjDA,EAAID,iBAAmBA,EAAsBA,IAAkBA,EAAiBzb,OAAS0b,GACzFA,EAAId,WAAaA,EACVc,GAKFhB,EAAAkB,gBAAP,SACE5qB,EACA6qB,EACArnB,GAEA,IAAIsnB,EAAO,IAAIC,EAKf,OAJAD,EAAKtnB,MAAQA,EACbsnB,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAKxU,UAAYuU,EAAUA,GAAMf,GAAUe,EAAMC,GACjDA,EAAKvkB,cAAgByM,EAAoBhT,GAClC8qB,GAGFpB,EAAAsB,cAAP,SACExmB,EACA2I,EACA3J,GAEA,IAAIynB,EAAO,IAAIC,EAIf,OAHAD,EAAKznB,MAAQA,EACbynB,EAAKE,YAAche,EACnB8d,EAAKzmB,KAAOA,EACLymB,GAKFvB,EAAAM,2BAAP,SACEhqB,EACAwD,GAEA,IAAIqf,EAAO,IAAIuI,EAGf,OAFAvI,EAAKrf,MAAQA,EACbqf,EAAKre,KAAOxE,EACL6iB,GAGF6G,EAAA2B,gCAAP,SACE7nB,GAEA,IAAIqf,EAAO,IAAIuI,EAGf,OAFAvI,EAAKrf,MAAQA,EACbqf,EAAKre,KAAO,GACLqe,GAGF6G,EAAA4B,6BAAP,SACEC,EACA/nB,GAEA,IAAIqf,EAAO,IAAI2I,EAGf,OAFA3I,EAAKrf,MAAQA,EACbqf,EAAK4I,mBAAqBF,EAsrD9B,SAA4BG,EAAwB1c,GAClD,IAAK,IAAIvP,EAAI,EAAGgL,EAAIihB,EAAMhnB,OAAQjF,EAAIgL,IAAKhL,EAAG,CAC5C,IAAIwrB,EAAOS,EAAMjsB,GACbwrB,IAAMA,EAAKjc,OAASA,IAzrDY2c,CAAmBJ,EAAU1I,GAC1DA,GAGF6G,EAAAkC,0BAAP,SACEC,EACAC,EACApD,EACAllB,GAEA,IAAIqf,EAAO,IAAIkJ,EAKf,OAJAlJ,EAAKrf,MAAQA,EACbqf,EAAKgJ,cAAgBA,EACrBhJ,EAAKiJ,WAAaA,EAAYA,EAAW9c,OAAS6T,EAClDA,EAAK6F,OAASA,EAAQA,EAAO1Z,OAAS6T,EAC/BA,GAGF6G,EAAAsC,uBAAP,SACEC,EACA5J,EACAC,EACA9e,GAEA,IAAIqf,EAAO,IAAIqJ,EAKf,OAJArJ,EAAKrf,MAAQA,EACbqf,EAAKoJ,SAAWA,EAChBpJ,EAAKR,KAAOA,EAAMA,EAAKrT,OAAS6T,EAChCA,EAAKP,MAAQA,EAAOA,EAAMtT,OAAS6T,EAC5BA,GAGF6G,EAAAyC,qBAAP,SACEL,EACAM,EACAvB,EACArnB,GAEA,IAAIqf,EAAO,IAAIwJ,EAKf,OAJAxJ,EAAKrf,MAAQA,EACbqf,EAAKiJ,WAAaA,EAAYA,EAAW9c,OAAS6T,EAClDA,EAAK9D,cAAgBqN,EAAcA,GAAUtC,GAAUsC,EAAUvJ,GACjEA,EAAKvM,UAAYuU,EAAMf,GAAUe,EAAMhI,GAChCA,GAGF6G,EAAA4C,sBAAP,SACE9d,GAEA,IAAIqU,EAAO,IAAI0J,EAGf,OAFA1J,EAAKrf,MAAQgL,EAAYhL,MACzBqf,EAAKrU,YAAcA,EACZqU,GAGF6G,EAAA8C,sBAAP,SACEC,EACAjpB,GAEA,IAAIqf,EAAO,IAAI6J,EAGf,OAFA7J,EAAKrf,MAAQA,EACbqf,EAAK4J,YAAcA,EAAa3C,GAAU2C,EAAa5J,GAChDA,GAGF6G,EAAAiD,4BAAP,SACEnpB,GAEA,IAAIqf,EAAO,IAAI+J,EAEf,OADA/J,EAAKrf,MAAQA,EACNqf,GAGF6G,EAAAmD,8BAAP,SACEf,EACArd,EACAjL,GAEA,IAAIqf,EAAO,IAAIiK,EAIf,OAHAjK,EAAKrf,MAAQA,EACbqf,EAAKiJ,WAAaA,EAAYA,EAAW9c,OAAS6T,EAClDA,EAAKkK,kBAAoBte,EAASA,EAAQO,OAAS6T,EAC5CA,GAGF6G,EAAAsD,sBAAP,SACExpB,GAEA,IAAIqf,EAAO,IAAIoK,EAEf,OADApK,EAAKrf,MAAQA,EACNqf,GAGF6G,EAAAwD,6BAAP,SACExsB,EACA8C,GAEA,IAAIqf,EAAO,IAAIsK,EAGf,OAFAtK,EAAKrf,MAAQA,EACbqf,EAAKniB,MAAQA,EACNmiB,GAGF6G,EAAA0D,yBAAP,SACE5e,GAEA,IAAIqU,EAAO,IAAIwK,EAIf,OAHAxK,EAAK/I,MAAQtL,EAAYsL,MAAQjU,EAAApE,YAAY6rB,MAC7CzK,EAAKrf,MAAQgL,EAAYhL,MACzBqf,EAAKrU,YAAcA,EACZqU,GAGF6G,EAAA6D,2BAAP,SACEzB,EACA0B,EACAhqB,GAEA,IAAIqf,EAAO,IAAI4K,EAIf,OAHA5K,EAAKrf,MAAQA,EACbqf,EAAKiJ,WAAaA,EAAYA,EAAW9c,OAAS6T,EAClDA,EAAK2K,OAASA,EAAQA,EAAOxe,OAAS6T,EAC/BA,GAGF6G,EAAAgE,+BAAP,SACEhtB,EACA8C,GAEA,IAAIqf,EAAO,IAAI8K,EAGf,OAFA9K,EAAKrf,MAAQA,EACbqf,EAAKniB,MAAQA,EACNmiB,GAGF6G,EAAAkE,oBAAP,SACE9B,EACAM,EACAvB,EACArnB,GAEA,IAAIqf,EAAO,IAAIgL,EAKf,OAJAhL,EAAKrf,MAAQA,EACbqf,EAAKiJ,WAAaA,EAAYA,EAAW9c,OAAS6T,EAClDA,EAAK9D,cAAgBqN,EAAcA,GAAUtC,GAAUsC,EAAUvJ,GACjEA,EAAKvM,UAAYuU,EAAMf,GAAUe,EAAMhI,GAChCA,GAGF6G,EAAAoE,qBAAP,SACEtqB,GAEA,IAAIqf,EAAO,IAAIkL,EAEf,OADAlL,EAAKrf,MAAQA,EACNqf,GAGF6G,EAAAsE,8BAAP,SACEC,EACAjW,EACAxU,GAEA,IAAIqf,EAAO,IAAIqL,EAIf,OAHArL,EAAKrf,MAAQA,EACbqf,EAAKoL,MAAQA,EACbpL,EAAK7K,OAASA,EACP6K,GAGF6G,EAAAyE,8BAAP,SACErC,EACAtoB,GAEA,IAAIqf,EAAO,IAAIuL,EAGf,OAFAvL,EAAKrf,MAAQA,EACbqf,EAAKiJ,WAAaA,EAAYA,EAAW9c,OAAS6T,EAC3CA,GAGF6G,EAAA2E,+BAAP,SACEvC,EACA1qB,EACAoC,GAEA,IAAIqf,EAAO,IAAIyL,EAIf,OAHAzL,EAAKrf,MAAQA,EACbqf,EAAKiJ,WAAaA,EAAYA,EAAW9c,OAAS6T,EAClDA,EAAKzhB,SAAWA,EAAUA,EAAS4N,OAAS6T,EACrCA,GAGF6G,EAAA6E,8BAAP,SACEC,EACA1U,EACAtW,GAEA,IAAIqf,EAAO,IAAI4L,EAIf,OAHA5L,EAAKrf,MAAQA,EACbqf,EAAK2L,QAAUA,EACf3L,EAAK6L,aAAe5U,EACb+I,GAGF6G,EAAAiF,wBAAP,SACEC,EACAC,EACAC,EACAtrB,GAEA,IAAIqf,EAAO,IAAIkM,EAKf,OAJAlM,EAAKrf,MAAQA,EACbqf,EAAK+L,UAAYA,EAAWA,EAAU5f,OAAS6T,EAC/CA,EAAKgM,OAASA,EAAQA,EAAO7f,OAAS6T,EACtCA,EAAKiM,OAASA,EAAQA,EAAO9f,OAAS6T,EAC/BA,GAGF6G,EAAAsF,8BAAP,SACEtuB,EACA8C,GAEA,IAAIqf,EAAO,IAAIoM,EAGf,OAFApM,EAAKrf,MAAQA,EACbqf,EAAKniB,MAAQA,EACNmiB,GAGF6G,EAAAwF,sBAAP,SACE1rB,GAEA,IAAIqf,EAAO,IAAIsM,EAEf,OADAtM,EAAKrf,MAAQA,EACNqf,GAGF6G,EAAA0F,qBAAP,SACE5rB,GAEA,IAAIqf,EAAO,IAAIwM,EAEf,OADAxM,EAAKrf,MAAQA,EACNqf,GAGF6G,EAAA4F,qBAAP,SACE9rB,GAEA,IAAIqf,EAAO,IAAI0M,EAEf,OADA1M,EAAKrf,MAAQA,EACNqf,GAGF6G,EAAA8F,6BAAP,SACEvD,EACAnJ,EACAtf,GAEA,IAAIqf,EAAO,IAAI4M,EAIf,OAHA5M,EAAKrf,MAAQA,EACbqf,EAAKoJ,SAAWA,EAChBpJ,EAAKC,QAAUA,EAASA,EAAQ9T,OAAS6T,EAClCA,GAGF6G,EAAAgG,4BAAP,SACEzD,EACAnJ,EACAtf,GAEA,IAAIqf,EAAO,IAAI8M,EAIf,OAHA9M,EAAKrf,MAAQA,EACbqf,EAAKoJ,SAAWA,EAChBpJ,EAAKC,QAAUA,EAASA,EAAQ9T,OAAS6T,EAClCA,GAKF6G,EAAAkG,qBAAP,SACE5iB,EACAxJ,GAEA,IAAIsnB,EAAO,IAAI+E,GAGf,OAFA/E,EAAKtnB,MAAQA,EACbsnB,EAAK9d,WAAaA,EAAY8c,GAAU9c,EAAY8d,GAC7CA,GAGFpB,EAAAoG,qBAAP,SACEC,EACAvsB,GAEA,IAAIsnB,EAAO,IAAIkF,GAGf,OAFAlF,EAAKtnB,MAAQA,EACbsnB,EAAKiF,MAAQA,EAAWA,IAAOA,EAAM/gB,OAAS8b,GACvCA,GAGFpB,EAAAuG,uBAAP,SACExb,EACAgF,EACAtJ,EACA6D,EACApC,EACAc,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAIoF,GASf,OARApF,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOyU,EAAYA,EAAWzF,OAAS8b,EAC5CA,EAAKrR,eAAiBA,EAAgBqQ,GAAUrQ,EAAgBqR,GAChEA,EAAK3a,YAAcA,EAAiBA,IAAaA,EAAYnB,OAAS8b,GACtEA,EAAK9W,gBAAkBA,EAAqBA,GAAiB8V,GAAU9V,EAAiB8W,GACxFA,EAAKlZ,QAAUA,EAASkY,GAAUlY,EAASkZ,GAC3CA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAAyG,wBAAP,SACEJ,EACAvsB,GAEA,IAAIsnB,EAAO,IAAIsF,GAGf,OAFAtF,EAAKtnB,MAAQA,EACbsnB,EAAKiF,MAAQA,EAAWA,IAAOA,EAAM/gB,OAAS8b,GACvCA,GAGFpB,EAAA2G,kBAAP,SACEnjB,EACA0hB,EACAprB,GAEA,IAAIsnB,EAAO,IAAIwF,GAIf,OAHAxF,EAAKtnB,MAAQA,EACbsnB,EAAK5d,UAAYA,EAAWA,EAAU8B,OAAS8b,EAC/CA,EAAK8D,UAAYA,EAAWA,EAAU5f,OAAS8b,EACxCA,GAGFpB,EAAA6G,qBAAP,SACE/sB,GAEA,IAAIsnB,EAAO,IAAI0F,GAEf,OADA1F,EAAKtnB,MAAQA,EACNsnB,GAGFpB,EAAA+G,sBAAP,SACEzwB,EACA4R,EACAc,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAI4F,GAMf,OALA5F,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAK9S,OAASpG,EAASkY,GAAUlY,EAASkZ,GAC1CA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAAiH,2BAAP,SACE3wB,EACAU,EACAoZ,EACAtW,GAEA,IAAIsnB,EAAO,IAAI8F,GAKf,OAJA9F,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAKpqB,MAAQA,EAAWA,IAAOA,EAAMsO,OAAS8b,GACvCA,GAGFpB,EAAAmH,sBAAP,SACEjf,EACA3C,EACA6K,EACAtW,GAEA,IAAIsnB,EAAO,IAAIgG,GAKf,GAJAhG,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAKlZ,QAAUA,EAAaA,GAASkY,GAAUlY,EAASkZ,GACxDA,EAAK7b,KAAOA,EACRA,EAAM,CACR,IAAI9K,EAAiB7B,EAAAyuB,cAAc9hB,EAAKvO,OACpCuO,EAAKvO,MAAMswB,WAAW,KACxBlG,EAAK3mB,eAAiB7B,EAAA2uB,YACpB9sB,EACAX,EAAMU,OAAOC,gBAGf2mB,EAAK3mB,eAAiBA,EAExB2mB,EAAKzS,aAAe6Y,GAAmBpG,EAAK3mB,qBAE5C2mB,EAAK3mB,eAAiB,KACtB2mB,EAAKzS,aAAe,KAEtB,OAAOyS,GAGFpB,EAAAyH,4BAAP,SACEnxB,EACA2O,EACAnL,GAEA,IAAIsnB,EAAO,IAAIsG,GAIf,OAHAtG,EAAKtnB,MAAQA,EACbsnB,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAKnc,aAAeA,EAAcA,EAAaK,OAAS8b,EACjDA,GAGFpB,EAAA2H,mBAAP,SACErxB,EACA2O,EACAnL,GAEA,IAAI0mB,EAAO,IAAIoH,GASf,OARApH,EAAK1mB,MAAQA,EACb0mB,EAAKlqB,KAAOA,EAAMA,EAAKgP,OAASkb,EAC3Bvb,EAGHA,EAAaK,OAASkb,EAFtBvb,EAAe3O,EAIjBkqB,EAAKvb,aAAeA,EACbub,GAGFR,EAAA6H,0BAAP,SACEzF,GAEA,IAAIhB,EAAO,IAAI0G,GAGf,OAFA1G,EAAKtnB,MAAQsoB,EAAWtoB,MACxBsnB,EAAKgB,WAAaA,EAAYA,EAAW9c,OAAS8b,EAC3CA,GAGFpB,EAAA+H,kBAAP,SACE7C,EACA8C,EACAC,EACAnuB,GAEA,IAAIsnB,EAAO,IAAI8G,GAKf,OAJA9G,EAAKtnB,MAAQA,EACbsnB,EAAK8D,UAAYA,EAAWA,EAAU5f,OAAS8b,EAC/CA,EAAK4G,OAASA,EAAQA,EAAO1iB,OAAS8b,EACtCA,EAAK6G,QAAUA,EAAaA,IAASA,EAAQ3iB,OAAS8b,GAC/CA,GAGFpB,EAAAmI,sBAAP,SACEC,EACA7iB,EACAzL,GAEA,IAAIsnB,EAAO,IAAIiH,GACfjH,EAAKtnB,MAAQA,EACbsnB,EAAK/R,aAAe+Y,EAAWA,GAAOhI,GAAUgI,EAAOhH,GACvDA,EAAK7R,cAAgB,KACrB6R,EAAK7b,KAAOA,EACZ,IAAI9K,EAAiB7B,EAAAyuB,cAAc9hB,EAAKvO,OAaxC,OAZIuO,EAAKvO,MAAMswB,WAAW,KACxBlG,EAAK3mB,eAAiB7B,EAAA2uB,YACpB9sB,EACAX,EAAMU,OAAOC,iBAGVA,EAAe6sB,WAAWnrB,EAAA3D,kBAC7BiC,EAAiB0B,EAAA3D,eAAiBiC,GAEpC2mB,EAAK3mB,eAAiBA,GAExB2mB,EAAKzS,aAAe6Y,GAAmBpG,EAAK3mB,gBACrC2mB,GAGFpB,EAAAsI,kCAAP,SACEvd,EACAxF,EACAzL,GAEA,IAAIsnB,EAAO,IAAIiH,GAUf,OATAjH,EAAKtnB,MAAQA,EACbsnB,EAAK/R,aAAe,KACpB+R,EAAK7R,cAAgBxE,EACrBqW,EAAK7b,KAAOA,EACZ6b,EAAK3mB,eAAiB7B,EAAA2uB,YACpB3uB,EAAAyuB,cAAc9hB,EAAKvO,OACnB8C,EAAMU,OAAOC,gBAEf2mB,EAAKzS,aAAe6Y,GAAmBpG,EAAK3mB,gBACrC2mB,GAGFpB,EAAAuI,wBAAP,SACEtjB,EACA3O,EACAwD,GAEA,IAAI0mB,EAAO,IAAIgI,GASf,OARAhI,EAAK1mB,MAAQA,EACb0mB,EAAKvb,aAAeA,EAAcA,EAAaK,OAASkb,EACnDlqB,EAGHA,EAAKgP,OAASkb,EAFdlqB,EAAO2O,EAITub,EAAKlqB,KAAOA,EACLkqB,GAGFR,EAAAyI,2BAAP,SACEnyB,EACAyZ,EACAtJ,EACAyB,EACAc,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAIsH,GAQf,OAPAtH,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAKrR,eAAiBA,EAAoBA,GAAgBqQ,GAAUrQ,EAAgBqR,GACpFA,EAAK3a,YAAcA,EAAiBA,IAAaA,EAAYnB,OAAS8b,GACtEA,EAAKlZ,QAAUA,EAASkY,GAAUlY,EAASkZ,GAC3CA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAA2I,uBAAP,SACEryB,EACAoR,EACAsJ,EACAhI,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAIwH,GAOf,OANAxH,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAK1Z,KAAOA,EAAUA,IAAMA,EAAKpC,OAAS8b,GAC1CA,EAAKpQ,YAAcA,EAAiBA,IAAaA,EAAY1L,OAAS8b,GACtEA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAA6I,mBAAP,SACE7X,EACAkU,EACA4D,EACAtlB,EACA1J,GAEA,IAAIsnB,EAAO,IAAI2H,GAMf,OALA3H,EAAKtnB,MAAQA,EACbsnB,EAAKpQ,YAAcA,EAAiBA,IAAaA,EAAY1L,OAAS8b,GACtEA,EAAK8D,UAAYA,EAAeA,IAAWA,EAAU5f,OAAS8b,GAC9DA,EAAK0H,YAAcA,EAAiBA,IAAaA,EAAYxjB,OAAS8b,GACtEA,EAAK5d,UAAYA,EAAWA,EAAU8B,OAAS8b,EACxCA,GAGFpB,EAAAgJ,0BAAP,SACE1yB,EACAyZ,EACA5H,EACA8gB,EACAjgB,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAI8H,GAQf,OAPA9H,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAKrR,eAAiBA,EAAoBA,GAAgBqQ,GAAUrQ,EAAgBqR,GACpFA,EAAKjZ,UAAYA,EAAWA,EAAU7C,OAAS8b,EAC/CA,EAAK6H,KAAOA,EAAUA,IAAMA,EAAK3jB,OAAS8b,GAC1CA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAAmJ,wBAAP,SACE7yB,EACAyZ,EACA5H,EACA8gB,EACAjgB,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAIgI,GAQf,OAPAhI,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAKrR,eAAiBA,EAAoBA,GAAgBqQ,GAAUrQ,EAAgBqR,GACpFA,EAAKjZ,UAAYA,EAAWA,EAAU7C,OAAS8b,EAC/CA,EAAK6H,KAAOA,EAAUA,IAAMA,EAAK3jB,OAAS8b,GAC1CA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAAqJ,2BAAP,SACE/yB,EACA4R,EACAc,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAIkI,GAMf,OALAlI,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAKlZ,QAAUA,EAASkY,GAAUlY,EAASkZ,GAC3CA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAAuJ,sBAAP,SACEvyB,EACA8C,GAEA,IAAIsnB,EAAO,IAAIoI,GAGf,OAFApI,EAAKtnB,MAAQA,EACbsnB,EAAKpqB,MAAQA,EAAWA,IAAOA,EAAMsO,OAAS8b,GACvCA,GAGFpB,EAAAyJ,sBAAP,SACEvE,EACAwE,EACA5vB,GAEA,IAAIsnB,EAAO,IAAIuI,GAIf,OAHAvI,EAAKtnB,MAAQA,EACbsnB,EAAK8D,UAAYA,EAAWA,EAAU5f,OAAS8b,EAC/CA,EAAKsI,MAAQA,EAAOtJ,GAAUsJ,EAAOtI,GAC9BA,GAGFpB,EAAA4J,iBAAP,SACEvD,EACA/iB,EACAxJ,GAEA,IAAI0mB,EAAO,IAAIqJ,GAIf,OAHArJ,EAAK1mB,MAAQA,EACb0mB,EAAK6F,MAAQA,EAAWA,IAAOA,EAAM/gB,OAASkb,GAC9CA,EAAKld,WAAaA,EAAY8c,GAAU9c,EAAYkd,GAC7CA,GAGFR,EAAA8J,qBAAP,SACE9yB,EACA8C,GAEA,IAAIsnB,EAAO,IAAI2I,GAGf,OAFA3I,EAAKtnB,MAAQA,EACbsnB,EAAKpqB,MAAQA,EAAOA,EAAMsO,OAAS8b,EAC5BA,GAGFpB,EAAAgK,mBAAP,SACE1mB,EACA2mB,EACAC,EACAC,EACArwB,GAEA,IAAIsnB,EAAO,IAAIgJ,GASf,OARAhJ,EAAKtnB,MAAQA,EACbsnB,EAAK9d,WAAaA,EAAY8c,GAAU9c,EAAY8d,GACpDA,EAAK6I,cAAgBA,EACjBA,IAAeA,EAAc3kB,OAAS8b,GAC1CA,EAAK8I,gBAAkBA,EACnBA,GAAiB9J,GAAU8J,EAAiB9I,GAChDA,EAAK+I,kBAAoBA,EACrBA,GAAmB/J,GAAU+J,EAAmB/I,GAC7CA,GAGFpB,EAAAqK,sBAAP,SACE/zB,EACAyZ,EACA5I,EACA6B,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAIkJ,GAOf,OANAlJ,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK9qB,KAAOA,EAAMA,EAAKgP,OAAS8b,EAChCA,EAAKrR,eAAiBA,EAAoBA,GAAgBqQ,GAAUrQ,EAAgBqR,GACpFA,EAAK1Z,KAAOP,EAAOA,EAAM7B,OAAS8b,EAClCA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAAuK,wBAAP,SACElb,EACArG,EACAoH,EACAtW,GAEA,IAAIsnB,EAAO,IAAIoJ,GAKf,OAJApJ,EAAKtnB,MAAQA,EACbsnB,EAAKhR,MAAQA,EACbgR,EAAK/R,aAAeA,EAAc+Q,GAAU/Q,EAAc+R,GAC1DA,EAAKpY,WAAaA,EAAgBA,GAAYoX,GAAUpX,EAAYoY,GAC7DA,GAGFpB,EAAAyK,0BAAP,SACEn0B,EACAoR,EACAsJ,EACAhI,EACAoH,EACAtW,GAEA,IAAI0mB,EAAO,IAAIkK,GAOf,OANAlK,EAAK1mB,MAAQA,EACb0mB,EAAKpQ,MAAQA,EACboQ,EAAKlqB,KAAOA,EAAMA,EAAKgP,OAASkb,EAChCA,EAAK9Y,KAAOA,EAAUA,IAAMA,EAAKpC,OAASkb,GAC1CA,EAAKxP,YAAcA,EAAiBA,IAAaA,EAAY1L,OAASkb,GACtEA,EAAKxX,WAAaA,EACXwX,GAGFR,EAAA2K,oBAAP,SACEvI,EACAtoB,GAEA,IAAIsnB,EAAO,IAAIwJ,GAGf,OAFAxJ,EAAKtnB,MAAQA,EACbsnB,EAAKgB,WAAaA,EACXhB,GAGFpB,EAAA6K,qBAAP,SACE3F,EACA1hB,EACA1J,GAEA,IAAIsnB,EAAO,IAAI0J,GAIf,OAHA1J,EAAKtnB,MAAQA,EACbsnB,EAAK8D,UAAYA,EAAWA,EAAU5f,OAAS8b,EAC/CA,EAAK5d,UAAYA,EAAWA,EAAU8B,OAAS8b,EACxCA,GAEXpB,EA54BA,GAAsB5qB,EAAA4qB,OAg5BtB,IAAA+K,EAAA,SAAAvrB,GAAA,SAAAurB,mDAKA,OAL6ClqB,EAAAkqB,EAAAvrB,GAK7CurB,EALA,CAA6C/K,GAAvB5qB,EAAA21B,iBAQtB,IAAA5K,EAAA,SAAA3gB,GAAA,SAAA2gB,IAAA,IAAA1gB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASunB,OAMlB,OAP8BpqB,EAAAsf,EAAA3gB,GAO9B2gB,EAPA,CAA8B4K,GAAjB31B,EAAA+qB,WAUb,IAAAM,EAAA,SAAAjhB,GAAA,SAAAihB,IAAA,IAAAhhB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASwnB,gBAMlB,OAPuCrqB,EAAA4f,EAAAjhB,GAOvCihB,EAPA,CAAuCT,GAA1B5qB,EAAAqrB,oBAUb,SAAY0K,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAY/1B,EAAA+1B,gBAAA/1B,EAAA+1B,mBAUZ,IAAAxK,EAAA,SAAAnhB,GAAA,SAAAmhB,IAAA,IAAAlhB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS0nB,UAWhB3rB,EAAA4rB,yBAAoD,OACtD,OAbmCxqB,EAAA8f,EAAAnhB,GAanCmhB,EAbA,CAAmCX,GAAtB5qB,EAAAurB,gBAgBb,IAcY5jB,EAdZkkB,EAAA,SAAAzhB,GAAA,SAAAyhB,IAAA,IAAAxhB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS4nB,YAQlB,OATmCzqB,EAAAogB,EAAAzhB,GASnCyhB,EATA,CAAmC8J,GA6BnC,SAAAzhB,EAAoChT,GAElC,GAAIA,EAAKmN,MAAQC,EAASic,WAAY,CACpC,IAAI4L,EAAiCj1B,EAAMwE,KAE3C,OADA3B,OAAOoyB,EAAQvwB,QACPuwB,EAAQnwB,WAAW,IACzB,QACE,GAAe,WAAXmwB,EAAsB,OAAOxuB,EAAcwM,QAC/C,MAEF,SACE,GAAe,YAAXgiB,EAAuB,OAAOxuB,EAAcqS,SAChD,MAEF,SACE,GAAe,UAAXmc,EAAqB,OAAOxuB,EAAc+M,OAC9C,MAEF,SACE,GAAe,UAAXyhB,EAAqB,OAAOxuB,EAAc+O,OAC9C,MAEF,SACE,GAAe,YAAXyf,EAAuB,OAAOxuB,EAAcC,SAChD,MAEF,SACE,GAAe,UAAXuuB,EAAqB,OAAOxuB,EAAcqN,OAC9C,MAEF,SACE,GAAe,aAAXmhB,EAAwB,OAAOxuB,EAAcsN,gBAIhD,GACL/T,EAAKmN,MAAQC,EAASoc,gBACKxpB,EAAM8rB,WAAW3e,MAAQC,EAASic,WAC7D,CACI4L,EAA4Dj1B,EAAM8rB,WAAYtnB,KAClF3B,OAAOoyB,EAAQvwB,QACf,IAAIwwB,EAAqCl1B,EAAMoB,SAASoD,KAGxD,GAFA3B,OAAOqyB,EAAQxwB,QAEA,YAAXuwB,EACF,OAAQC,EAAQpwB,WAAW,IACzB,QACE,GAAe,UAAXowB,EAAqB,OAAOzuB,EAAcE,gBAC9C,MAEF,SACE,OAAQuuB,GACN,IAAK,SAAU,OAAOzuB,EAAcyB,gBACpC,IAAK,UAAW,OAAOzB,EAAcgC,mBAO/C,OAAOhC,EAAc0uB,OAzFVr2B,EAAA6rB,gBAcb,SAAYlkB,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,sBAXF,CAAYA,EAAA3H,EAAA2H,gBAAA3H,EAAA2H,mBAeZ3H,EAAAkU,sBAgEA,IAAA+X,EAAA,SAAA7hB,GAAA,SAAA6hB,IAAA,IAAA5hB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASgoB,YAQlB,OATmC7qB,EAAAwgB,EAAA7hB,GASnC6hB,EATA,CAAmCrB,GAAtB5qB,EAAAisB,gBAYb,SAAYsK,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYv2B,EAAAu2B,cAAAv2B,EAAAu2B,iBAUZ,IAAAnK,EAAA,SAAAhiB,GAAA,SAAAgiB,IAAA,IAAA/hB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASkoB,UAMlB,OAPiC/qB,EAAA2gB,EAAAhiB,GAOjCgiB,EAPA,CAAiCxB,GAApB5qB,EAAAosB,cAYb,IAAAqK,EAAA,SAAArsB,GAAA,SAAAqsB,mDAAgD,OAAPhrB,EAAAgrB,EAAArsB,GAAOqsB,EAAhD,CAAyC7L,GAAnB5qB,EAAAy2B,aAGtB,IAQY7e,EARZ0U,EAAA,SAAAliB,GAAA,SAAAkiB,IAAA,IAAAjiB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASic,aAIlB,OAL0C9e,EAAA6gB,EAAAliB,GAK1CkiB,EALA,CAA0CmK,GAA7Bz2B,EAAAssB,uBAQb,SAAY1U,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA5X,EAAA4X,cAAA5X,EAAA4X,iBAUZ,IAAA8e,EAAA,SAAAtsB,GAAA,SAAAssB,IAAA,IAAArsB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASoJ,UAIlB,OALgDjM,EAAAirB,EAAAtsB,GAKhDssB,EALA,CAAgDD,GAA1Bz2B,EAAA02B,oBAQtB,IAAAhK,EAAA,SAAAtiB,GAAA,SAAAsiB,IAAA,IAAAriB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAsN,YAAcC,EAAY+e,QAI5B,OAL4ClrB,EAAAihB,EAAAtiB,GAK5CsiB,EALA,CAA4CgK,GAA/B12B,EAAA0sB,yBAQb,SAAYkK,GACVA,IAAA,mBACAA,IAAA,WAFF,CAAY52B,EAAA42B,gBAAA52B,EAAA42B,mBAMZ,IAAA3J,EAAA,SAAA7iB,GAAA,SAAA6iB,IAAA,IAAA5iB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASuoB,YAQlB,OATyCprB,EAAAwhB,EAAA7iB,GASzC6iB,EATA,CAAyCwJ,GAA5Bz2B,EAAAitB,sBAYb,IAAAG,EAAA,SAAAhjB,GAAA,SAAAgjB,IAAA,IAAA/iB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASwoB,SAQlB,OATsCrrB,EAAA2hB,EAAAhjB,GAStCgjB,EATA,CAAsCqJ,GAAzBz2B,EAAAotB,mBAYb,IAAAG,EAAA,SAAAnjB,GAAA,SAAAmjB,IAAA,IAAAljB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASkc,OAQlB,OAToC/e,EAAA8hB,EAAAnjB,GASpCmjB,EATA,CAAoCkJ,GAAvBz2B,EAAAutB,iBAYb,IAAAE,EAAA,SAAArjB,GAAA,SAAAqjB,IAAA,IAAApjB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASiP,QAIlB,OALqC9R,EAAAgiB,EAAArjB,GAKrCqjB,EALA,CAAqCgJ,GAAxBz2B,EAAAytB,kBAQb,IAAAG,EAAA,SAAAxjB,GAAA,SAAAwjB,IAAA,IAAAvjB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASyoB,QAIlB,OALqCtrB,EAAAmiB,EAAAxjB,GAKrCwjB,EALA,CAAqC6I,GAAxBz2B,EAAA4tB,kBAQb,IAAAE,EAAA,SAAA1jB,GAAA,SAAA0jB,IAAA,IAAAzjB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS4I,YAChB7M,EAAA3E,KAAO,gBACT,OAH2C+F,EAAAqiB,EAAA1jB,GAG3C0jB,EAHA,CAA2CxB,GAA9BtsB,EAAA8tB,wBAMb,IAAAE,EAAA,SAAA5jB,GAAA,SAAA4jB,IAAA,IAAA3jB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASmc,gBAMlB,OAP6Chf,EAAAuiB,EAAA5jB,GAO7C4jB,EAPA,CAA6CyI,GAAhCz2B,EAAAguB,0BAUb,IAAAK,EAAA,SAAAjkB,GAAA,SAAAikB,IAAA,IAAAhkB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAsN,YAAcC,EAAYof,QAI5B,OAL4CvrB,EAAA4iB,EAAAjkB,GAK5CikB,EALA,CAA4CqI,GAA/B12B,EAAAquB,yBAQb,IAAAE,EAAA,SAAAnkB,GAAA,SAAAmkB,IAAA,IAAAlkB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS+N,WAIlB,OALwC5Q,EAAA8iB,EAAAnkB,GAKxCmkB,EALA,CAAwCkI,GAA3Bz2B,EAAAuuB,qBAQb,IAAAI,EAAA,SAAAvkB,GAAA,SAAAukB,IAAA,IAAAtkB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS2oB,aAMlB,OAP0CxrB,EAAAkjB,EAAAvkB,GAO1CukB,EAPA,CAA0C8H,GAA7Bz2B,EAAA2uB,uBAUb,IAAAE,EAAA,SAAAzkB,GAAA,SAAAykB,IAAA,IAAAxkB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAsN,YAAcC,EAAYsf,UAI5B,OAL8CzrB,EAAAojB,EAAAzkB,GAK9CykB,EALA,CAA8C6H,GAAjC12B,EAAA6uB,2BAQb,IAAAE,EAAA,SAAA3kB,GAAA,SAAA2kB,IAAA,IAAA1kB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS6oB,MAClB,OAFmC1rB,EAAAsjB,EAAA3kB,GAEnC2kB,EAFA,CAAmCxB,GAAtBvtB,EAAA+uB,gBAKb,IAAAE,EAAA,SAAA7kB,GAAA,SAAA6kB,IAAA,IAAA5kB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS6b,KAChB9f,EAAA3E,KAAO,SACT,OAHoC+F,EAAAwjB,EAAA7kB,GAGpC6kB,EAHA,CAAoC3C,GAAvBtsB,EAAAivB,iBAMb,IAAAG,EAAA,SAAAhlB,GAAA,SAAAglB,IAAA,IAAA/kB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAsN,YAAcC,EAAYwf,SAM5B,OAP6C3rB,EAAA2jB,EAAAhlB,GAO7CglB,EAPA,CAA6CsH,GAAhC12B,EAAAovB,0BAUb,IAAAE,EAAA,SAAAllB,GAAA,SAAAklB,IAAA,IAAAjlB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS+oB,gBAIlB,OAL6C5rB,EAAA6jB,EAAAllB,GAK7CklB,EALA,CAA6CmH,GAAhCz2B,EAAAsvB,0BAQb,IAAAE,EAAA,SAAAplB,GAAA,SAAAolB,IAAA,IAAAnlB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASoc,iBAMlB,OAP8Cjf,EAAA+jB,EAAAplB,GAO9ColB,EAPA,CAA8CiH,GAAjCz2B,EAAAwvB,2BAUb,IAAAG,EAAA,SAAAvlB,GAAA,SAAAulB,IAAA,IAAAtlB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAsN,YAAcC,EAAY0f,SAM5B,OAP6C7rB,EAAAkkB,EAAAvlB,GAO7CulB,EAPA,CAA6C+G,GAAhC12B,EAAA2vB,0BAUb,IAAAM,EAAA,SAAA7lB,GAAA,SAAA6lB,IAAA,IAAA5lB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASipB,UAQlB,OATuC9rB,EAAAwkB,EAAA7lB,GASvC6lB,EATA,CAAuCwG,GAA1Bz2B,EAAAiwB,oBAYb,IAAAE,EAAA,SAAA/lB,GAAA,SAAA+lB,IAAA,IAAA9lB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAsN,YAAcC,EAAYC,SAI5B,OAL6CpM,EAAA0kB,EAAA/lB,GAK7C+lB,EALA,CAA6CuG,GAAhC12B,EAAAmwB,0BAQb,IAAAE,EAAA,SAAAjmB,GAAA,SAAAimB,IAAA,IAAAhmB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASkpB,MAChBntB,EAAA3E,KAAO,UACT,OAHqC+F,EAAA4kB,EAAAjmB,GAGrCimB,EAHA,CAAqC/D,GAAxBtsB,EAAAqwB,kBAMb,IAAAE,EAAA,SAAAnmB,GAAA,SAAAmmB,IAAA,IAAAlmB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASmpB,KAChBptB,EAAA3E,KAAO,SACT,OAHoC+F,EAAA8kB,EAAAnmB,GAGpCmmB,EAHA,CAAoCjE,GAAvBtsB,EAAAuwB,iBAMb,IAAAE,EAAA,SAAArmB,GAAA,SAAAqmB,IAAA,IAAApmB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS8b,KAChB/f,EAAA3E,KAAO,SACT,OAHoC+F,EAAAglB,EAAArmB,GAGpCqmB,EAHA,CAAoCnE,GAAvBtsB,EAAAywB,iBAMb,IAAAtC,EAAA,SAAA/jB,GAAA,SAAA+jB,IAAA,IAAA9jB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS+b,MAChBhgB,EAAA3E,KAAO,UACT,OAHqC+F,EAAA0iB,EAAA/jB,GAGrC+jB,EAHA,CAAqC7B,GAAxBtsB,EAAAmuB,kBAMb,IAAAuJ,EAAA,SAAAttB,GAAA,SAAAstB,mDAMA,OAN8CjsB,EAAAisB,EAAAttB,GAM9CstB,EANA,CAA8CjB,GAAxBz2B,EAAA03B,kBAStB,IAAA/G,EAAA,SAAAvmB,GAAA,SAAAumB,IAAA,IAAAtmB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASqpB,eAClB,OAF4ClsB,EAAAklB,EAAAvmB,GAE5CumB,EAFA,CAA4C+G,GAA/B13B,EAAA2wB,yBAKb,IAAAE,EAAA,SAAAzmB,GAAA,SAAAymB,IAAA,IAAAxmB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASspB,cAClB,OAF2CnsB,EAAAolB,EAAAzmB,GAE3CymB,EAFA,CAA2C6G,GAA9B13B,EAAA6wB,wBAMb7wB,EAAA63B,gBAAA,SAAgCzpB,GAC9B,IAAI8B,EAASnM,OAAOqK,EAAU8B,QAC9B,GAAIA,EAAO7B,MAAQC,EAASwpB,MAAO,CACjC,IAAI5pB,EAA8BgC,EAAQhC,WAC1C,GAAIA,EAAWA,EAAWtI,OAAS,KAAOwI,EACxC,OAAQrK,OAAOmM,EAAOA,QAAQ7B,MAC5B,KAAKC,EAASO,oBACd,KAAKP,EAAS0H,kBAAmB,OAAO,GAI9C,OAAO,GAIT,IAGY+hB,EAHZC,EAAA,SAAA5tB,GAAA,SAAA4tB,mDAA+C,OAAPvsB,EAAAusB,EAAA5tB,GAAO4tB,EAA/C,CAAwCpN,GAAlB5qB,EAAAg4B,YAGtB,SAAYD,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAA/3B,EAAA+3B,aAAA/3B,EAAA+3B,gBAUZ,IAAAE,EAAA,SAAA7tB,GAwBE,SAAA6tB,EAAY5yB,EAAwBK,EAAc2I,GAAlD,IAAAhE,EACED,EAAAtJ,KAAAR,OAAOA,KAxBT+J,EAAAgE,KAAOC,EAASqG,OAChBtK,EAAA6F,OAAS,KAeT7F,EAAA6tB,UAA8B,KAE9B7tB,EAAAkV,gBAAuB,EAEvBlV,EAAA8tB,YAAkC,KAKhC9tB,EAAK+tB,WAAa/pB,EAClBhE,EAAKhF,eAAiBA,EACtB,IAAIkU,EAAe6Y,GAAmB/nB,EAAKhF,gBAC3CgF,EAAKkP,aAAeA,EACpB,IAAI8e,EAAM9e,EAAa+e,YAAYvxB,EAAAnE,uBACnCyH,EAAKkuB,WAAaF,GAAO,EAAI9e,EAAarT,UAAUmyB,EAAM,GAAK9e,EAC/DlP,EAAK6D,WAAa,IAAIzH,MACtB4D,EAAK3F,MAAQ,IAAIslB,EAAA3U,MAAMhL,EAAM,EAAG3E,EAAKE,QACrCyE,EAAK3E,KAAOA,IAOhB,OAzC4B+F,EAAAwsB,EAAA7tB,GAsC1B/I,OAAAC,eAAI22B,EAAA11B,UAAA,eAAJ,WAAsB,OAAOjC,KAAK83B,YAAcL,EAAWS,uCAE3Dn3B,OAAAC,eAAI22B,EAAA11B,UAAA,iBAAJ,WAAwB,OAAOjC,KAAK83B,YAAcL,EAAWU,yCAC/DR,EAzCA,CAA4BrN,GAAf5qB,EAAAi4B,SA4Cb,IAAAS,EAAA,SAAAtuB,GAAA,SAAAsuB,IAAA,IAAAruB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YAKE+J,EAAAuJ,WAAqC,KAE3BvJ,EAAAsuB,+BAAgD,KAChDtuB,EAAAuuB,4BAA6C,OAwDzD,OAhEmDntB,EAAAitB,EAAAtuB,GAWjD/I,OAAAC,eAAIo3B,EAAAn2B,UAAA,gCAAJ,WAIE,OAHKjC,KAAKq4B,iCACRr4B,KAAKq4B,+BAAiCE,GAAmBv4B,MAAM,IAE1DA,KAAKq4B,gEAIdt3B,OAAAC,eAAIo3B,EAAAn2B,UAAA,6BAAJ,WAIE,OAHKjC,KAAKs4B,8BACRt4B,KAAKs4B,4BAA8BC,GAAmBv4B,MAAM,IAEvDA,KAAKs4B,6DAIdv3B,OAAAC,eAAIo3B,EAAAn2B,UAAA,kBAAJ,WACE,IAAI2N,EAAS5P,KAAK4P,OAClB,QAAKA,MAGDA,EAAO7B,MAAQC,EAASiB,YAAcW,EAASA,EAAOA,UAGnDA,EAAO7B,MAAQC,EAASqG,yCAIjCtT,OAAAC,eAAIo3B,EAAAn2B,UAAA,wBAAJ,WACE,IAAI2N,EAAS5P,KAAK4P,OAClB,SAAKA,GAAWA,EAAO7B,MAAQC,EAASiB,YAAcW,EAASA,EAAOA,WAGlEA,EAAO7B,MAAQC,EAASa,qBACnB7O,KAAK8S,GAAGrM,EAAApE,YAAYgM,SAAkCuB,EAAQ4oB,iBAEnE5oB,EAAO7B,MAAQC,EAASC,iBACnBjO,KAAK8S,GAAGrM,EAAApE,YAAY6T,SAA8BtG,EAAQ4oB,iBAE5D5oB,EAAO7B,MAAQC,EAASqG,QAAUrU,KAAK8S,GAAGrM,EAAApE,YAAYgM,0CAI/D+pB,EAAAn2B,UAAAw2B,oBAAA,SAAoBhoB,GAIlB,OACEA,EAAO7P,KAAKwE,MAAQqL,EAAOlB,aAAanK,MACxCpF,KAAKoE,MAAMU,QAAU2L,EAAOrM,MAAMU,SACjC9E,KAAKw4B,kBAGZJ,EAhEA,CAAmDV,GAA7Bh4B,EAAA04B,uBAmEtB,IAAAM,EAAA,SAAA5uB,GAAA,SAAA4uB,mDAMA,OAN+DvtB,EAAAutB,EAAA5uB,GAM/D4uB,EANA,CAA+DN,GAAzC14B,EAAAg5B,mCAStB,IAAAjI,GAAA,SAAA3mB,GAAA,SAAA2mB,IAAA,IAAA1mB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASwpB,QAIlB,OALoCrsB,EAAAslB,EAAA3mB,GAKpC2mB,EALA,CAAoCiH,GAAvBh4B,EAAA+wB,kBAQb,IAAAG,GAAA,SAAA9mB,GAAA,SAAA8mB,IAAA,IAAA7mB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS2qB,QAIlB,OALoCxtB,EAAAylB,EAAA9mB,GAKpC8mB,EALA,CAAoC8G,GAAvBh4B,EAAAkxB,kBAQb,IAAAE,GAAA,SAAAhnB,GAAA,SAAAgnB,IAAA,IAAA/mB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASC,mBAelB,OAhBsC9C,EAAA2lB,EAAAhnB,GAYpC/I,OAAAC,eAAI8vB,EAAA7uB,UAAA,iBAAJ,WACE,IAAIoY,EAAiBra,KAAKqa,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe/U,OAAS,mCAE7DwrB,EAhBA,CAAsCsH,GAAzB14B,EAAAoxB,oBAmBb,IAAAE,GAAA,SAAAlnB,GAAA,SAAAknB,IAAA,IAAAjnB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS4qB,WAIlB,OALuCztB,EAAA6lB,EAAAlnB,GAKvCknB,EALA,CAAuC0G,GAA1Bh4B,EAAAsxB,qBAQb,IAAAE,GAAA,SAAApnB,GAAA,SAAAonB,IAAA,IAAAnnB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS6qB,KAMlB,OAPiC1tB,EAAA+lB,EAAApnB,GAOjConB,EAPA,CAAiCwG,GAApBh4B,EAAAwxB,eAUb,IAAAE,GAAA,SAAAtnB,GAAA,SAAAsnB,IAAA,IAAArnB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS8qB,QAClB,OAFoC3tB,EAAAimB,EAAAtnB,GAEpCsnB,EAFA,CAAoCsG,GAAvBh4B,EAAA0xB,kBAKb,IAAAE,GAAA,SAAAxnB,GAAA,SAAAwnB,IAAA,IAAAvnB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASG,kBAIlB,OALqChD,EAAAmmB,EAAAxnB,GAKrCwnB,EALA,CAAqC8G,GAAxB14B,EAAA4xB,mBAQb,IAAAE,GAAA,SAAA1nB,GAAA,SAAA0nB,IAAA,IAAAznB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS+qB,uBAKlB,OAN0C5tB,EAAAqmB,EAAA1nB,GAM1C0nB,EANA,CAA0C4G,GAA7B14B,EAAA8xB,wBASb,IAAAQ,GAAA,SAAAloB,GAAA,SAAAkoB,IAAA,IAAAjoB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASgrB,eAMlB,OAP2C7tB,EAAA6mB,EAAAloB,GAO3CkoB,EAPA,CAA2C1H,GAA9B5qB,EAAAsyB,yBAUb,IAAAE,GAAA,SAAApoB,GAAA,SAAAooB,IAAA,IAAAnoB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASirB,eAMlB,OAPkC9tB,EAAA+mB,EAAApoB,GAOlCooB,EAPA,CAAkC5H,GAArB5qB,EAAAwyB,gBAUb,IAAAR,GAAA,SAAA5nB,GAAA,SAAA4nB,IAAA,IAAA3nB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASK,SAUlB,OAXqClD,EAAAumB,EAAA5nB,GAWrC4nB,EAXA,CAAqCgG,GAAxBh4B,EAAAgyB,mBAcb,IAAAU,GAAA,SAAAtoB,GAAA,SAAAsoB,IAAA,IAAAroB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASkrB,aAIlB,OALyC/tB,EAAAinB,EAAAtoB,GAKzCsoB,EALA,CAAyCsF,GAA5Bh4B,EAAA0yB,uBAQb,IAAAc,GAAA,SAAAppB,GAAA,SAAAopB,IAAA,IAAAnpB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASwH,iBAGhBzL,EAAAovB,gBAAuB,IACzB,OALsChuB,EAAA+nB,EAAAppB,GAKtCopB,EALA,CAAsCwF,GAAzBh5B,EAAAwzB,oBAQb,IAAAG,GAAA,SAAAvpB,GAAA,SAAAupB,IAAA,IAAAtpB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASorB,MAalB,OAdkCjuB,EAAAkoB,EAAAvpB,GAclCupB,EAdA,CAAkCqE,GAArBh4B,EAAA2zB,gBAiBb,IAAAG,GAAA,SAAA1pB,GAAA,SAAA0pB,IAAA,IAAAzpB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASO,sBAalB,OAdyCpD,EAAAqoB,EAAA1pB,GAUvC/I,OAAAC,eAAIwyB,EAAAvxB,UAAA,iBAAJ,WACE,IAAIoY,EAAiBra,KAAKqa,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe/U,OAAS,mCAE7DkuB,EAdA,CAAyC4E,GAA5B14B,EAAA8zB,uBAiBb,IAAAhB,GAAA,SAAA1oB,GAAA,SAAA0oB,IAAA,IAAAzoB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASqrB,KAQlB,OATiCluB,EAAAqnB,EAAA1oB,GASjC0oB,EATA,CAAiCkF,GAApBh4B,EAAA8yB,eAYb,IAAAM,GAAA,SAAAhpB,GAAA,SAAAgpB,IAAA,IAAA/oB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASsrB,oBAIlB,OALuCnuB,EAAA2nB,EAAAhpB,GAKvCgpB,EALA,CAAuCsF,GAA1B14B,EAAAozB,qBAQb,IAAAH,GAAA,SAAA7oB,GAAA,SAAA6oB,IAAA,IAAA5oB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASS,SAYlB,OAbqCtD,EAAAwnB,EAAA7oB,GAarC6oB,EAbA,CAAqC+E,GAAxBh4B,EAAAizB,mBAgBb,IAAAK,GAAA,SAAAlpB,GAAA,SAAAkpB,IAAA,IAAAjpB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASW,uBAClB,OAF0CxD,EAAA6nB,EAAAlpB,GAE1CkpB,EAFA,CAA0ClC,IAA7BpxB,EAAAszB,wBAKb,IAAAU,GAAA,SAAA5pB,GAAA,SAAA4pB,IAAA,IAAA3pB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS0H,oBAClB,OAFuCvK,EAAAuoB,EAAA5pB,GAEvC4pB,EAFA,CAAuCF,IAA1B9zB,EAAAg0B,qBAKb,IAAAE,GAAA,SAAA9pB,GAAA,SAAA8pB,IAAA,IAAA7pB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASa,uBAIlB,OAL0C1D,EAAAyoB,EAAA9pB,GAK1C8pB,EALA,CAA0CwE,GAA7B14B,EAAAk0B,wBAQb,IAAAE,GAAA,SAAAhqB,GAAA,SAAAgqB,IAAA,IAAA/pB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASurB,SAIlB,OALqCpuB,EAAA2oB,EAAAhqB,GAKrCgqB,EALA,CAAqC4D,GAAxBh4B,EAAAo0B,mBAQb,IAAAK,GAAA,SAAArqB,GAAA,SAAAqqB,IAAA,IAAApqB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASwrB,aAMlB,OAPgCruB,EAAAgpB,EAAArqB,GAOhCqqB,EAPA,CAAgC7J,GAAnB5qB,EAAAy0B,cAUb,IAAAF,GAAA,SAAAnqB,GAAA,SAAAmqB,IAAA,IAAAlqB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASyrB,SAMlB,OAPqCtuB,EAAA8oB,EAAAnqB,GAOrCmqB,EAPA,CAAqCyD,GAAxBh4B,EAAAu0B,mBAUb,IAAAI,GAAA,SAAAvqB,GAAA,SAAAuqB,IAAA,IAAAtqB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS0rB,QAIlB,OALoCvuB,EAAAkpB,EAAAvqB,GAKpCuqB,EALA,CAAoCqD,GAAvBh4B,EAAA20B,kBAQb,IAAAK,GAAA,SAAA5qB,GAAA,SAAA4qB,IAAA,IAAA3qB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS2rB,MAUlB,OAXkCxuB,EAAAupB,EAAA5qB,GAWlC4qB,EAXA,CAAkCgD,GAArBh4B,EAAAg1B,gBAcb,IAAAE,GAAA,SAAA9qB,GAAA,SAAA8qB,IAAA,IAAA7qB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASe,kBAMlB,OAPqC5D,EAAAypB,EAAA9qB,GAOrC8qB,EAPA,CAAqCwD,GAAxB14B,EAAAk1B,mBAUb,IAAAI,GAAA,SAAAlrB,GAAA,SAAAkrB,IAAA,IAAAjrB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS4rB,sBAClB,OAFyCzuB,EAAA6pB,EAAAlrB,GAEzCkrB,EAFA,CAAyC0D,GAA5Bh5B,EAAAs1B,uBAKb,IAAAF,GAAA,SAAAhrB,GAAA,SAAAgrB,IAAA,IAAA/qB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAASiB,WAMlB,OAPuC9D,EAAA2pB,EAAAhrB,GAOvCgrB,EAPA,CAAuC4C,GAA1Bh4B,EAAAo1B,qBAUb,IAAAI,GAAA,SAAAprB,GAAA,SAAAorB,IAAA,IAAAnrB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS6rB,OAIlB,OALmC1uB,EAAA+pB,EAAAprB,GAKnCorB,EALA,CAAmCwC,GAAtBh4B,EAAAw1B,iBAQb,IAAAE,GAAA,SAAAtrB,GAAA,SAAAsrB,IAAA,IAAArrB,EAAA,OAAAD,KAAAwrB,MAAAt1B,KAAAkX,YAAAlX,YACE+J,EAAAgE,KAAOC,EAAS8rB,QAMlB,OAPoC3uB,EAAAiqB,EAAAtrB,GAOpCsrB,EAPA,CAAoCsC,GAqBpC,SAAAa,GAAmCnpB,EAAmC2qB,QAAA,IAAAA,OAAA,GACpE,IAAIn5B,EAAOwO,EAAYxO,KAAKwE,KACxBwK,EAASR,EAAYQ,OACzB,OAAKA,IAEHR,EAAYrB,MAAQC,EAAS4rB,qBAC7BhqB,EAAO7B,MAAQC,EAASiB,WAElBW,EAASA,EAAOA,SAEpBA,EAAO7B,MAAQC,EAASC,iBACnBsqB,GAAqC3oB,EAAQmqB,IAClD3qB,EAAY0D,GAAGrM,EAAApE,YAAY6T,QACvBzP,EAAA9D,iBACA8D,EAAA/D,oBACF9B,EAGJgP,EAAO7B,MAAQC,EAASa,sBACxBe,EAAO7B,MAAQC,EAASG,gBAEjBoqB,GAAyC3oB,EAAQmqB,GACjDtzB,EAAA9D,iBAAmB/B,EAErBm5B,EACHn5B,EACAwO,EAAYhL,MAAMU,OAAOmU,aAAexS,EAAAnE,eAAiB1B,EAvBzCA,EA2BtB,SAAAkxB,GAAmCjiB,GAEjC,OADIA,EAAKkK,SAAS,SAAQlK,EAAOA,EAAKjK,UAAU,EAAGiK,EAAKvK,OAAS,IAC1DuK,EAMT,SAAA6a,GAAmB4B,EAAe1c,GAChC,IAAK,IAAIvP,EAAI,EAAGgL,EAAIihB,EAAMhnB,OAAQjF,EAAIgL,IAAKhL,EACzCisB,EAAMjsB,GAAGuP,OAASA,EA7DTlQ,EAAA01B,kBAUb11B,EAAA4W,cAAA,SAA8BvI,EAAqBuF,GACjD,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAGgL,EAAIiI,EAAWhO,OAAQjF,EAAIgL,IAAKhL,EAAG,CACjD,IAAIoT,EAAYH,EAAWjT,GAC3B,GAAIoT,EAAUtM,eAAiB4G,EAAM,OAAO0F,EAGhD,OAAO,MAIT/T,EAAA64B,sBA8BA74B,EAAAoyB,mKCt7DAkI,EAAA75B,EAAA,KACA65B,EAAA75B,EAAA,KACA65B,EAAA75B,EAAA,KACA65B,EAAA75B,EAAA,oFCJA,IAuBYyjB,EAvBZqW,EAAA95B,EAAA,KAaA,SAAkB+5B,GAChBA,IAAA,eACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,6BACAA,IAAA,gBAPF,CAAkBx6B,EAAAw6B,aAAAx6B,EAAAw6B,gBAUlB,SAAYtW,GACVA,IAAA,QAAUuW,sBAAoB,UAC9BvW,IAAA,MAAQwW,oBAAkB,QAC1BxW,IAAA,GAAKyW,iBAAe,KACpBzW,IAAA,KAAO0W,mBAAiB,OACxB1W,IAAA,MAAQ2W,oBAAkB,QAC1B3W,IAAA,OAAS4W,qBAAmB,SAC5B5W,IAAA,KAAO6W,mBAAiB,OACxB7W,IAAA,WAAa8W,yBAAuB,aACpC9W,IAAA,aAAe+W,2BAAyB,eACxC/W,IAAA,SAAWgX,uBAAqB,WAChChX,IAAA,SAAWiX,uBAAqB,WAChCjX,IAAA,UAAYkX,wBAAsB,YAClClX,IAAA,UAAYmX,wBAAsB,YAClCnX,IAAA,KAAOoX,mBAAiB,OACxBpX,IAAA,MAAQqX,oBAAkB,QAC1BrX,IAAA,MAAQsX,oBAAkB,QAC1BtX,IAAA,MAAQuX,oBAAkB,QAC1BvX,IAAA,OAASwX,qBAAmB,SAC5BxX,IAAA,OAASyX,qBAAmB,SAC5BzX,IAAA,KAAO0X,mBAAiB,OACxB1X,IAAA,OAAS2X,qBAAmB,SAC5B3X,IAAA,KAAO4X,mBAAiB,OACxB5X,IAAA,IAAM6X,kBAAgB,MACtB7X,IAAA,YAAc8X,0BAAwB,cACtC9X,IAAA,cAAgB+X,4BAA0B,gBAC1C/X,IAAA,UAAYgY,wBAAsB,YAClChY,IAAA,WAAaiY,yBAAuB,aACpCjY,IAAA,WAAakY,yBAAuB,aA5BtC,CAAYlY,EAAAlkB,EAAAkkB,eAAAlkB,EAAAkkB,kBA+BZ,SAAY4D,GACVA,IAAA,OAASuU,qBAAmB,SAC5BvU,IAAA,OAASwU,qBAAmB,SAC5BxU,IAAA,UAAYyU,wBAAsB,YAClCzU,IAAA,OAAS0U,uBAAqB,SAC9B1U,IAAA,OAAS2U,uBAAqB,SAC9B3U,IAAA,QAAU4U,wBAAsB,UAChC5U,IAAA,SAAW6U,yBAAuB,WAClC7U,IAAA,SAAW8U,yBAAuB,WAClC9U,IAAA,WAAa+U,2BAAyB,aACtC/U,IAAA,QAAUgV,wBAAsB,UAChChV,IAAA,OAASiV,qBAAmB,SAC5BjV,IAAA,OAASkV,qBAAmB,SAC5BlV,IAAA,OAASmV,qBAAmB,SAC5BnV,IAAA,UAAYoV,wBAAsB,YAClCpV,IAAA,OAASqV,uBAAqB,SAC9BrV,IAAA,OAASsV,uBAAqB,SAC9BtV,IAAA,QAAUuV,wBAAsB,UAChCvV,IAAA,SAAWwV,yBAAuB,WAClCxV,IAAA,SAAWyV,yBAAuB,WAClCzV,IAAA,WAAa0V,2BAAyB,aACtC1V,IAAA,QAAU2V,wBAAsB,UAChC3V,IAAA,OAAS4V,qBAAmB,SAC5B5V,IAAA,UAAY6V,yBAAuB,YACnC7V,IAAA,UAAY8V,yBAAuB,YACnC9V,IAAA,QAAU+V,sBAAoB,UAC9B/V,IAAA,cAAgBgW,iCAA+B,gBAC/ChW,IAAA,cAAgBiW,iCAA+B,gBAC/CjW,IAAA,cAAgBkW,iCAA+B,gBAC/ClW,IAAA,cAAgBmW,iCAA+B,gBAC/CnW,IAAA,cAAgBoW,iCAA+B,gBAC/CpW,IAAA,cAAgBqW,iCAA+B,gBAC/CrW,IAAA,cAAgBsW,iCAA+B,gBAC/CtW,IAAA,cAAgBuW,iCAA+B,gBAC/CvW,IAAA,eAAiBwW,+BAA6B,iBAC9CxW,IAAA,eAAiByW,+BAA6B,iBAC9CzW,IAAA,gBAAkB0W,mCAAiC,kBACnD1W,IAAA,gBAAkB2W,mCAAiC,kBACnD3W,IAAA,gBAAkB4W,mCAAiC,kBACnD5W,IAAA,gBAAkB6W,mCAAiC,kBACnD7W,IAAA,gBAAkB8W,mCAAiC,kBACnD9W,IAAA,gBAAkB+W,mCAAiC,kBACnD/W,IAAA,gBAAkBgX,mCAAiC,kBACnDhX,IAAA,gBAAkBiX,mCAAiC,kBACnDjX,IAAA,WAAakX,2BAAyB,aACtClX,IAAA,UAAYmX,0BAAwB,YACpCnX,IAAA,eAAiBoX,6BAA2B,iBAC5CpX,IAAA,eAAiBqX,6BAA2B,iBAG5CrX,IAAA,cAAgBsX,0BAAwB,gBACxCtX,IAAA,eAAiBuX,2BAAyB,iBAC1CvX,IAAA,cAAgBwX,0BAAwB,gBACxCxX,IAAA,eAAiByX,2BAAyB,iBAC1CzX,IAAA,eAAiB0X,2BAAyB,iBAtD5C,CAAYx/B,EAAA8nB,UAAA9nB,EAAA8nB,aAmEZ,SAAYlD,GACVA,IAAA,OAAS6a,qBAAmB,SAC5B7a,IAAA,OAAS8a,qBAAmB,SAC5B9a,IAAA,OAAS+a,qBAAmB,SAC5B/a,IAAA,OAASgb,sBAAoB,SAC7Bhb,IAAA,OAASib,sBAAoB,SAC7Bjb,IAAA,OAASkb,sBAAoB,SAC7Blb,IAAA,OAASmb,sBAAoB,SAC7Bnb,IAAA,OAASob,qBAAmB,SAC5Bpb,IAAA,MAAQqb,oBAAkB,QAC1Brb,IAAA,OAASsb,qBAAmB,SAC5Btb,IAAA,OAASub,qBAAmB,SAC5Bvb,IAAA,OAASwb,sBAAoB,SAC7Bxb,IAAA,OAASyb,sBAAoB,SAC7Bzb,IAAA,QAAU0b,sBAAoB,UAC9B1b,IAAA,QAAU2b,sBAAoB,UAC9B3b,IAAA,MAAQ4b,oBAAkB,QAC1B5b,IAAA,MAAQ6b,oBAAkB,QAC1B7b,IAAA,MAAQ8b,qBAAmB,QAC3B9b,IAAA,MAAQ+b,qBAAmB,QAC3B/b,IAAA,MAAQgc,qBAAmB,QAC3Bhc,IAAA,MAAQic,qBAAmB,QAC3Bjc,IAAA,MAAQkc,qBAAmB,QAC3Blc,IAAA,MAAQmc,qBAAmB,QAC3Bnc,IAAA,MAAQoc,qBAAmB,QAC3Bpc,IAAA,MAAQqc,qBAAmB,QAC3Brc,IAAA,OAASsc,qBAAmB,SAC5Btc,IAAA,OAASuc,qBAAmB,SAC5Bvc,IAAA,OAASwc,qBAAmB,SAC5Bxc,IAAA,OAASyc,sBAAoB,SAC7Bzc,IAAA,OAAS0c,sBAAoB,SAC7B1c,IAAA,OAAS2c,sBAAoB,SAC7B3c,IAAA,OAAS4c,sBAAoB,SAC7B5c,IAAA,OAAS6c,qBAAmB,SAC5B7c,IAAA,MAAQ8c,oBAAkB,QAC1B9c,IAAA,OAAS+c,qBAAmB,SAC5B/c,IAAA,OAASgd,qBAAmB,SAC5Bhd,IAAA,OAASid,sBAAoB,SAC7Bjd,IAAA,OAASkd,sBAAoB,SAC7Bld,IAAA,QAAUmd,sBAAoB,UAC9Bnd,IAAA,QAAUod,sBAAoB,UAC9Bpd,IAAA,MAAQqd,oBAAkB,QAC1Brd,IAAA,MAAQsd,oBAAkB,QAC1Btd,IAAA,MAAQud,qBAAmB,QAC3Bvd,IAAA,MAAQwd,qBAAmB,QAC3Bxd,IAAA,MAAQyd,qBAAmB,QAC3Bzd,IAAA,MAAQ0d,qBAAmB,QAC3B1d,IAAA,MAAQ2d,qBAAmB,QAC3B3d,IAAA,MAAQ4d,qBAAmB,QAC3B5d,IAAA,MAAQ6d,qBAAmB,QAC3B7d,IAAA,MAAQ8d,qBAAmB,QAC3B9d,IAAA,OAAS+d,uBAAqB,SAC9B/d,IAAA,OAASge,uBAAqB,SAC9Bhe,IAAA,OAASie,uBAAqB,SAC9Bje,IAAA,OAASke,uBAAqB,SAC9Ble,IAAA,YAAcme,4BAA0B,cACxCne,IAAA,OAASoe,uBAAqB,SAC9Bpe,IAAA,OAASqe,uBAAqB,SAC9Bre,IAAA,MAAQse,sBAAoB,QAC5Bte,IAAA,MAAQue,sBAAoB,QAC5Bve,IAAA,MAAQwe,sBAAoB,QAC5Bxe,IAAA,MAAQye,sBAAoB,QAC5Bze,IAAA,MAAQ0e,sBAAoB,QAC5B1e,IAAA,MAAQ2e,sBAAoB,QAC5B3e,IAAA,OAAS4e,uBAAqB,SAC9B5e,IAAA,OAAS6e,uBAAqB,SAC9B7e,IAAA,OAAS8e,uBAAqB,SAC9B9e,IAAA,OAAS+e,uBAAqB,SAC9B/e,IAAA,YAAcgf,4BAA0B,cACxChf,IAAA,OAASif,uBAAqB,SAC9Bjf,IAAA,OAASkf,uBAAqB,SAC9Blf,IAAA,MAAQmf,sBAAoB,QAC5Bnf,IAAA,MAAQof,sBAAoB,QAC5Bpf,IAAA,MAAQqf,sBAAoB,QAC5Brf,IAAA,MAAQsf,sBAAoB,QAC5Btf,IAAA,MAAQuf,sBAAoB,QAC5Bvf,IAAA,MAAQwf,sBAAoB,QA5E9B,CAAYpkC,EAAA4kB,WAAA5kB,EAAA4kB,cA+EZ,SAAYyf,GACVA,IAAA,SAAWC,qBAAmB,WAC9BD,IAAA,cAAgBE,0BAAwB,gBACxCF,IAAA,WAAaG,uBAAqB,aAClCH,IAAA,WAAaI,uBAAqB,aAJpC,CAAYzkC,EAAAqkC,SAAArkC,EAAAqkC,YAWZ,SAAYK,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYhlC,EAAA0kC,cAAA1kC,EAAA0kC,iBASZ,IAAAO,EAAA,oBAAAA,KAWA,OANSA,EAAAhjC,OAAP,SAAcijC,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAajlC,EAAAilC,gBAab,IAAAI,EAAA,WA+BE,SAAAA,IAsZQ/kC,KAAAglC,oBAA6B,EAC7BhlC,KAAAilC,sBAA6B,EAqQ7BjlC,KAAAklC,qBAA8B,EAC9BllC,KAAAmlC,sBAA+B,EAgMzC,OAh3BSJ,EAAApjC,OAAP,WACE,IAAIhC,EAAS,IAAIolC,EAGjB,OAFAplC,EAAO0c,IAAM+oB,wBACbzlC,EAAO0lC,cAAgBC,OAAOC,SAAS,IAChC5lC,GAGFolC,EAAAS,WAAP,SAAkBZ,GAChB,IAAIa,EAAOC,EAAad,GACxB,IACE,IAAIjlC,EAAS,IAAIolC,EAGjB,OAFAplC,EAAO0c,IAAMspB,oBAAoBF,EAAMb,EAAOt/B,QAC9C3F,EAAO0lC,cAAgBC,OAAOC,SAAS,IAChC5lC,UAEP2lC,OAAO5jB,KAAKkkB,WAAkBH,MAQlCV,EAAA9iC,UAAA4jC,gBAAA,SACEjlC,EACAklC,EACAC,GAEA,IAAIC,EAAOC,EAAYrlC,GACnB6kC,EAAOS,EAAcH,GACzB,IACE,OAAOI,yBAAyBnmC,KAAKqc,IAAK2pB,EAAMF,EAAQL,EAAMM,EAAaA,EAAWzgC,OAAS,WAE/FggC,OAAO5jB,KAAK+jB,GACZH,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAmkC,2BAAA,SACEN,EACAC,GAEA,IAAIN,EAAOS,EAAcH,GACzB,IACE,OAAOM,oCAAoCrmC,KAAKqc,IAAKypB,EAAQL,EAAMM,EAAaA,EAAWzgC,OAAS,WAEpGggC,OAAO5jB,KAAK+jB,KAIhBV,EAAA9iC,UAAAqkC,mBAAA,SAAmB1lC,GACjB,IAAIolC,EAAOC,EAAYrlC,GACvB,IACE2lC,4BAA4BvmC,KAAKqc,IAAK2pB,WAEtCV,OAAO5jB,KAAKskB,KAMhBjB,EAAA9iC,UAAAukC,UAAA,SAAUllC,GACR,IAAImlC,EAAMzmC,KAAKqlC,cAEf,OADAqB,sBAAsBD,EAAKnlC,GACpBqlC,eAAe3mC,KAAKqc,IAAKoqB,IAGlC1B,EAAA9iC,UAAA2kC,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIL,EAAMzmC,KAAKqlC,cAEf,OADA0B,sBAAsBN,EAAKI,EAAUC,GAC9BH,eAAe3mC,KAAKqc,IAAKoqB,IAGlC1B,EAAA9iC,UAAA+kC,UAAA,SAAU1lC,GACR,IAAImlC,EAAMzmC,KAAKqlC,cAEf,OADA4B,wBAAwBR,EAAKnlC,GACtBqlC,eAAe3mC,KAAKqc,IAAKoqB,IAGlC1B,EAAA9iC,UAAAilC,UAAA,SAAU5lC,GACR,IAAImlC,EAAMzmC,KAAKqlC,cAEf,OADA8B,wBAAwBV,EAAKnlC,GACtBqlC,eAAe3mC,KAAKqc,IAAKoqB,IAKlC1B,EAAA9iC,UAAAmlC,YAAA,SACEC,EACA5jB,GAEA,OAAO6jB,eAAetnC,KAAKqc,IAAKgrB,EAAI5jB,IAGtCshB,EAAA9iC,UAAAslC,aAAA,SACEF,EACApkB,EACAC,GAEA,OAAOskB,gBAAgBxnC,KAAKqc,IAAKgrB,EAAIpkB,EAAMC,IAG7C6hB,EAAA9iC,UAAAwlC,WAAA,SACEJ,EACAzmC,EACA8mC,QADA,IAAA9mC,MAAA,WACA,IAAA8mC,MAAA,MAEA,IAAI1B,EAAOC,EAAYrlC,GACnB6kC,EAAOkC,EAAcD,GACzB,IACE,OAAOE,cAAc5nC,KAAKqc,IAAKgrB,EAAIrB,EAAMP,EAAMiC,EAA6BA,EAAUpiC,OAAS,WAE/FggC,OAAO5jB,KAAK+jB,GACZH,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAA4lC,eAAA,SACErsB,EACAxJ,GAEA,OAAO81B,kBAAkB9nC,KAAKqc,IAAKb,EAAOxJ,IAG5C+yB,EAAA9iC,UAAA8lC,eAAA,SACEvsB,EACAla,GAEA,OAAO0mC,kBAAkBhoC,KAAKqc,IAAKb,EAAOla,IAG5CyjC,EAAA9iC,UAAAgmC,gBAAA,SACErnC,EACAoR,GAEA,IAAIg0B,EAAOC,EAAYrlC,GACvB,IACE,OAAOsnC,mBAAmBloC,KAAKqc,IAAK2pB,EAAMh0B,WAE1CszB,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAkmC,WAAA,SACEC,EACAC,EACAC,EACAt2B,EACA6yB,GAEA,YAFA,IAAAA,MAAA,GAEO0D,cAAcvoC,KAAKqc,IAAK+rB,EAAOC,EAAS,EAAI,EAAGxD,EAA6BuD,EAAOp2B,EAAMs2B,IAGlGvD,EAAA9iC,UAAAumC,YAAA,SACEJ,EACAE,EACAhnC,EACA0Q,EACA6yB,GAEA,YAFA,IAAAA,MAAA,GAEO4D,eAAezoC,KAAKqc,IAAK+rB,EAAOvD,EAA6BuD,EAAOE,EAAKhnC,EAAO0Q,IAGzF+yB,EAAA9iC,UAAAymC,iBAAA,SACEN,EACAE,EACAt2B,EACA6yB,GAEA,YAFA,IAAAA,MAAA,GAEO8D,oBAAoB3oC,KAAKqc,IAAK+rB,EAAOvD,EAAQ7yB,EAAMs2B,IAG5DvD,EAAA9iC,UAAA2mC,kBAAA,SACER,EACAE,EACAhnC,EACA0Q,EACA6yB,GAEA,YAFA,IAAAA,MAAA,GAEOgE,qBAAqB7oC,KAAKqc,IAAK+rB,EAAOvD,EAAQyD,EAAKhnC,EAAO0Q,IAGnE+yB,EAAA9iC,UAAA6mC,gBAAA,SACEzB,EACAe,EACAvD,EACAyD,EACAhnC,EACA0Q,GAEA,OAAO+2B,mBAAmB/oC,KAAKqc,IAAKgrB,EAAIe,EAAOvD,EAAQyD,EAAKhnC,EAAO0Q,IAGrE+yB,EAAA9iC,UAAA+mC,oBAAA,SACEZ,EACAvD,EACAyD,EACAW,EACAC,EACAl3B,GAEA,OAAOm3B,uBAAuBnpC,KAAKqc,IAAK+rB,EAAOvD,EAAQyD,EAAKW,EAAUC,EAAal3B,IAGrF+yB,EAAA9iC,UAAAmnC,iBAAA,SACEd,EACAW,EACAI,EACAC,GAEA,OAAOC,oBAAoBvpC,KAAKqc,IAAKisB,EAAKW,EAAUI,EAASC,IAG/DvE,EAAA9iC,UAAAunC,iBAAA,SACElB,EACAmB,GAEA,OAAOC,oBAAoB1pC,KAAKqc,IAAKisB,EAAKmB,IAK5C1E,EAAA9iC,UAAA0nC,eAAA,SACEnuB,EACAla,GAEA,OAAOsoC,kBAAkB5pC,KAAKqc,IAAKb,EAAOla,IAG5CyjC,EAAA9iC,UAAA4nC,gBAAA,SACEjpC,EACAU,GAEA,IAAI0kC,EAAOC,EAAYrlC,GACvB,IACE,OAAOkpC,mBAAmB9pC,KAAKqc,IAAK2pB,EAAM1kC,WAE1CgkC,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAA8nC,YAAA,SACEpZ,EACAqZ,EACAh4B,QAAA,IAAAA,MAAA,GAEA,IAAIg0B,EAAOC,EAAYtV,GACnB8U,EAAOkC,EAAcqC,GACzB,IACE,OAAOC,eAAejqC,KAAKqc,IAAK2pB,EAAMP,EAAMuE,EAAS1kC,OAAQ0M,WAE7DszB,OAAO5jB,KAAK+jB,GACZH,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAioC,YAAA,SACEvZ,EACAnB,EACAluB,QADA,IAAAkuB,MAAA,QACA,IAAAluB,MAAA,GAEA,IAAI0kC,EAAOC,EAAYtV,GACvB,IACE,OAAOwZ,eAAenqC,KAAKqc,IAAK2pB,EAAMxW,EAAWluB,WAEjDgkC,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAmoC,WAAA,SACE1d,GAEA,OAAO2d,cAAcrqC,KAAKqc,IAAKqQ,IAGjCqY,EAAA9iC,UAAAqoC,WAAA,SACE3Z,EACA4C,GAEA,IAAIyS,EAAOC,EAAYtV,GACvB,IACE,OAAO4Z,cAAcvqC,KAAKqc,IAAK2pB,EAAMzS,WAErC+R,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAuoC,SAAA,SACEhb,EACA8C,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOkY,YAAYzqC,KAAKqc,IAAKmT,EAAW8C,EAAQC,IAGlDwS,EAAA9iC,UAAAyoC,UAAA,WACE,OAAOC,aAAa3qC,KAAKqc,MAG3B0oB,EAAA9iC,UAAA2oC,aAAA,SACEle,GAEA,YAFA,IAAAA,MAAA,GAEOme,gBAAgB7qC,KAAKqc,IAAKqQ,IAGnCqY,EAAA9iC,UAAA6oC,aAAA,SACExY,EACAC,EACA/C,GAEA,OAAOub,gBAAgB/qC,KAAKqc,IAAKmT,EAAW8C,EAAQC,IAGtDwS,EAAA9iC,UAAA+oC,aAAA,SACEnc,EACAoc,EACAzb,EACAluB,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI4pC,EAAWrc,EAAMvpB,OACjB6lC,EAAO,IAAIhlC,MAAa+kC,GACnB7qC,EAAI,EAAGA,EAAI6qC,IAAY7qC,EAC9B8qC,EAAK9qC,GAAK4lC,EAAYpX,EAAMxuB,IAE9B,IAAIolC,EAAOS,EAAciF,GACrBnF,EAAOC,EAAYgF,GACvB,IACE,OAAOG,gBAAgBprC,KAAKqc,IAAKopB,EAAMyF,EAAUlF,EAAMxW,EAAWluB,WAElEgkC,OAAO5jB,KAAKskB,GACZV,OAAO5jB,KAAK+jB,GACZ,IAASplC,EAAI6qC,EAAW,EAAG7qC,GAAK,IAAKA,EAAGilC,OAAO5jB,KAAKypB,EAAK9qC,MAI7D0kC,EAAA9iC,UAAAopC,WAAA,SACEhrB,EACAqnB,EACA90B,GAEA,IAAIozB,EAAOC,EAAY5lB,GACnBolB,EAAOkC,EAAcD,GACzB,IACE,OAAO4D,cAActrC,KAAKqc,IAAK2pB,EAAMP,EAAMiC,GAAYA,EAASpiC,QAAU,EAAGsN,WAE7E0yB,OAAO5jB,KAAK+jB,GACZH,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAspC,iBAAA,SACElrB,EACAqnB,EACA90B,GAEA,IAAIozB,EAAOC,EAAY5lB,GACnBolB,EAAOkC,EAAcD,GACzB,IACE,OAAO8D,oBAAoBxrC,KAAKqc,IAAK2pB,EAAMP,EAAMiC,GAAYA,EAASpiC,QAAU,EAAGsN,WAEnF0yB,OAAO5jB,KAAK+jB,GACZH,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAwpC,mBAAA,SACEjwB,EACAksB,EACAgE,GAEA,IAAIjG,EAAOkC,EAAcD,GACrB1B,EAAOC,EAAYyF,GACvB,IACE,OAAOC,sBAAsB3rC,KAAKqc,IAAKb,EAAOiqB,EAAMiC,GAAYA,EAASpiC,QAAU,EAAG0gC,WAEtFV,OAAO5jB,KAAKskB,GACZV,OAAO5jB,KAAK+jB,KAIhBV,EAAA9iC,UAAA2pC,kBAAA,WACE,OAAOC,qBAAqB7rC,KAAKqc,MAKnC0oB,EAAA9iC,UAAA6pC,UAAA,SACElrC,EACAoR,EACA+5B,EACAzwB,GAEA,IAAI0qB,EAAOC,EAAYrlC,GACvB,IACE,OAAOorC,mBAAmBhsC,KAAKqc,IAAK2pB,EAAMh0B,EAAM+5B,EAAU,EAAI,EAAGzwB,WAEjEgqB,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAgqC,YAAA,SACErrC,EACAoR,EACAk6B,EACA3Y,GAEA,IAAIyS,EAAOC,EAAYrlC,GACnB6kC,EAAOS,EAAcgG,GACzB,IACE,OAAOC,qBAAqBnsC,KAAKqc,IAAK2pB,EAAMh0B,EAAMyzB,EAAMyG,EAAWA,EAAS5mC,OAAS,EAAGiuB,WAExF+R,OAAO5jB,KAAK+jB,GACZH,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAmqC,eAAA,SAAexrC,GACb,IAAIolC,EAAOC,EAAYrlC,GACvB,IACEyrC,wBAAwBrsC,KAAKqc,IAAK2pB,WAElCV,OAAO5jB,KAAKskB,KAOhBjB,EAAA9iC,UAAAqqC,qBAAA,SAAqBxG,EAAoBC,EAAiCxS,GACxEvzB,KAAKilC,qBAAuBxhC,QAAQzD,KAAKilC,sBACzC,IAAIsH,EAAWvsC,KAAKglC,oBACfuH,IAAUvsC,KAAKglC,oBAAsBuH,EAAWtG,EAAY,KACjE,IAAIR,EAAOS,EAAcH,GACzB,IACE,IAAIyG,EAAUrG,yBAAyBnmC,KAAKqc,IAAKkwB,EAAUzG,EAAQL,EAAMM,EAAaA,EAAWzgC,OAAS,GAC1G,OAAO6mC,qBAAqBnsC,KAAKqc,IAAKkwB,EAAUC,EAAS,EAAG,EAAGjZ,WAE/D+R,OAAO5jB,KAAK+jB,KAIhBV,EAAA9iC,UAAAwqC,wBAAA,WACEzsC,KAAKilC,sBAAwBxhC,OAAOzD,KAAKilC,sBACzC,IAAIsH,EAAW9oC,OAAOzD,KAAKglC,qBAC3BqH,wBAAwBrsC,KAAKqc,IAAKkwB,GAClChG,4BAA4BvmC,KAAKqc,IAAKkwB,IAGxCxH,EAAA9iC,UAAAyqC,kBAAA,SACEh/B,EACA6B,GAEA,IAAIo9B,EAAQ1G,EAAYv4B,GACpBk/B,EAAQ3G,EAAY12B,GACxB,IACE,OAAOs9B,2BAA2B7sC,KAAKqc,IAAKswB,EAAOC,WAEnDtH,OAAO5jB,KAAKkrB,GACZtH,OAAO5jB,KAAKirB,KAIhB5H,EAAA9iC,UAAA6qC,eAAA,SACEp/B,EACA6B,GAEA,IAAIo9B,EAAQ1G,EAAYv4B,GACpBk/B,EAAQ3G,EAAY12B,GACxB,IACE,OAAOw9B,wBAAwB/sC,KAAKqc,IAAKswB,EAAOC,WAEhDtH,OAAO5jB,KAAKkrB,GACZtH,OAAO5jB,KAAKirB,KAIhB5H,EAAA9iC,UAAA+qC,gBAAA,SACEt/B,EACA6B,GAEA,IAAIo9B,EAAQ1G,EAAYv4B,GACpBk/B,EAAQ3G,EAAY12B,GACxB,IACE,OAAO09B,yBAAyBjtC,KAAKqc,IAAKswB,EAAOC,WAEjDtH,OAAO5jB,KAAKkrB,GACZtH,OAAO5jB,KAAKirB,KAIhB5H,EAAA9iC,UAAAirC,gBAAA,SACEx/B,EACA6B,GAEA,IAAIo9B,EAAQ1G,EAAYv4B,GACpBk/B,EAAQ3G,EAAY12B,GACxB,IACE,OAAO49B,yBAAyBntC,KAAKqc,IAAKswB,EAAOC,WAEjDtH,OAAO5jB,KAAKkrB,GACZtH,OAAO5jB,KAAKirB,KAIhB5H,EAAA9iC,UAAAmrC,aAAA,SAAa79B,GACX,IAAIy2B,EAAOC,EAAY12B,GACvB,IACE89B,sBAAsBrtC,KAAKqc,IAAK2pB,WAEhCV,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAqrC,kBAAA,SACE5/B,EACA6/B,EACAC,EACAC,GAEA,IAAId,EAAQ1G,EAAYv4B,GACpBk/B,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOG,2BAA2B3tC,KAAKqc,IAAKswB,EAAOC,EAAOc,EAAOD,WAEjEnI,OAAO5jB,KAAKgsB,GACZpI,OAAO5jB,KAAKkrB,GACZtH,OAAO5jB,KAAKirB,KAIhB5H,EAAA9iC,UAAA2rC,eAAA,SACElgC,EACA6/B,EACAC,GAEA,IAAIb,EAAQ1G,EAAYv4B,GACpBk/B,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOK,wBAAwB7tC,KAAKqc,IAAKswB,EAAOC,EAAOc,WAEvDpI,OAAO5jB,KAAKgsB,GACZpI,OAAO5jB,KAAKkrB,GACZtH,OAAO5jB,KAAKirB,KAIhB5H,EAAA9iC,UAAA6rC,gBAAA,SACEpgC,EACA6/B,EACAC,GAEA,IAAIb,EAAQ1G,EAAYv4B,GACpBk/B,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOO,yBAAyB/tC,KAAKqc,IAAKswB,EAAOC,EAAOc,WAExDpI,OAAO5jB,KAAKgsB,GACZpI,OAAO5jB,KAAKkrB,GACZtH,OAAO5jB,KAAKirB,KAIhB5H,EAAA9iC,UAAA+rC,gBAAA,SACEtgC,EACA6/B,EACAC,EACAS,GAEA,IAAItB,EAAQ1G,EAAYv4B,GACpBk/B,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOU,yBAAyBluC,KAAKqc,IAAKswB,EAAOC,EAAOc,EAAOO,WAE/D3I,OAAO5jB,KAAKgsB,GACZpI,OAAO5jB,KAAKkrB,GACZtH,OAAO5jB,KAAKirB,KAIhB5H,EAAA9iC,UAAAksC,aAAA,SAAazgC,GACX,IAAIs4B,EAAOC,EAAYv4B,GACvB,IACE0gC,sBAAsBpuC,KAAKqc,IAAK2pB,WAEhCV,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAosC,UAAA,SACEC,EACAC,EACAC,EACAnuB,EACAhQ,QAAA,IAAAA,MAAA,MAOA,IALA,IAAI21B,EAAOC,EAAY51B,GACnBhF,EAAImjC,EAASlpC,OACbmpC,EAAO,IAAItoC,MAAakF,GACxBqjC,EAAO,IAAIvoC,MAAqBkF,GAChCsjC,EAAO,IAAIxoC,MAAakF,GACnBhL,EAAI,EAAGA,EAAIgL,IAAKhL,EAAG,CAC1B,IAAIukC,EAAS4J,EAASnuC,GAAGukC,OACrBC,EAAS2J,EAASnuC,GAAGwkC,OACzB4J,EAAKpuC,GAAKqlC,EAAad,GACvB8J,EAAKruC,GAAKggB,GAAU4Z,EAAA2U,OAAOC,OACvB7uC,KAAK4mC,UAAUkI,QAAQjK,GAASkK,SAASlK,IACzC7kC,KAAKwmC,UAAUsI,QAAQjK,IAC3B8J,EAAKtuC,GAAKukC,EAAOt/B,OAEnB,IAAI0pC,EAAQ9I,EAAcuI,GACtBQ,EAAQ/I,EAAcwI,GACtBQ,EAAQhJ,EAAcyI,GAC1B,IACEQ,mBAAmBnvC,KAAKqc,IAAKiyB,EAASC,EAASvI,EAAMgJ,EAAOC,EAAOC,EAAO7jC,WAE1Ei6B,OAAO5jB,KAAKwtB,GACZ5J,OAAO5jB,KAAKutB,GACZ3J,OAAO5jB,KAAKstB,GACZ,IAAS3uC,EAAIgL,EAAI,EAAGhL,GAAK,IAAKA,EAAGilC,OAAO5jB,KAAK+sB,EAAKpuC,IAClDilC,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAmtC,iBAAA,SAAiBC,GACf,IAAI5J,EAAOkC,EAAc0H,GACzB,IACEC,0BAA0BtvC,KAAKqc,IAAKopB,EAAM4J,EAAM/pC,gBAEhDggC,OAAO5jB,KAAK+jB,KAIhBV,EAAA9iC,UAAAstC,SAAA,SAASC,GACPC,kBAAkBzvC,KAAKqc,IAAKmzB,IAG9BzK,EAAA9iC,UAAAytC,iBAAA,WACE,OAAOC,6BAGT5K,EAAA9iC,UAAA2tC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5B9K,EAAA9iC,UAAA8tC,eAAA,WACE,OAAOC,2BAGTjL,EAAA9iC,UAAAguC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1B9K,EAAA9iC,UAAAkuC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBrL,EAAA9iC,UAAAquC,SAAA,SAASd,QAAA,IAAAA,MAAA,GACHA,EACFe,0BAA0Bf,EAAMxvC,KAAKqc,KAErCm0B,wBAAwBxwC,KAAKqc,MAIjC0oB,EAAA9iC,UAAAwuC,UAAA,SAAUC,EAAkBlB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAItE,EAAWwF,EAAOprC,OAClBupB,EAAQ,IAAI1oB,MAAa+kC,GACpB7qC,EAAI,EAAGA,EAAI6qC,IAAY7qC,EAC9BwuB,EAAMxuB,GAAK4lC,EAAYyK,EAAOrwC,IAEhC,IAAIolC,EAAOS,EAAcrX,GACzB,IACM2gB,EACFmB,2BAA2BnB,EAAMxvC,KAAKqc,IAAKopB,EAAMyF,GAEjD0F,yBAAyB5wC,KAAKqc,IAAKopB,EAAMyF,WAG3C5F,OAAO5jB,KAAK+jB,GACZ,IAASplC,EAAI6qC,EAAU7qC,GAAK,IAAKA,EAAGilC,OAAO5jB,KAAKmN,EAAMxuB,MAO1D0kC,EAAA9iC,UAAA4uC,qBAAA,SAAqBptB,GAEnB,IAAIqtB,EAAwBnB,4BACxBoB,EAAsBf,0BACtBgB,EAAoBC,wBACxBnB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIr+B,EAAOk/B,2BAA2BztB,GAClC+rB,EAAOxvC,KAAKssC,qBAAqBt6B,EAAM,KAAMyR,GAC7CoL,EAAQ7uB,KAAKmlC,sBACjB,IAAKtW,EAAO,CACV,IAAIjuB,EAAOqlC,EAAY,cACvBjmC,KAAKklC,qBAAuBtkC,EAC5BZ,KAAKmlC,sBAAwBtW,EAAQqX,GAAgBtlC,IAUvD,OARA+vC,2BAA2BnB,EAAMxvC,KAAKqc,IAAKwS,EAAO,GAClDpL,EAAO0tB,yBAAyB3B,GAChCxvC,KAAKysC,0BAGLqD,0BAA0BgB,GAC1BZ,wBAAwBa,GACxBV,sBAAsBW,GACfvtB,GAGTshB,EAAA9iC,UAAAmvC,SAAA,WACE,OAA4C,GAArCC,wBAAwBrxC,KAAKqc,MAGtC0oB,EAAA9iC,UAAAqvC,UAAA,WACEC,yBAAyBvxC,KAAKqc,MAGhC0oB,EAAA9iC,UAAAuvC,SAAA,SAASC,GACP,IAAIhL,EAAMzmC,KAAKqlC,cACXW,EAAOC,EAAYwL,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCnL,EAAKzmC,KAAKqc,IAAK2pB,GAC/C0L,EAAYG,EAAQpL,GACpB,IAAIqL,EAAcD,EAAQpL,EAAM,GAChCkL,EAAeE,EAAQpL,EAAM,GAC7B,IAAIsL,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OAqhBV,SAAoB3J,EAAYhjC,GAE9B,IADA,IAAIysC,EAAM,IAAIG,WAAW5sC,GAChBjF,EAAW,EAAGA,EAAIiF,IAAUjF,EACnC0xC,EAAI1xC,GAAK8xC,KAAS7J,EAAMjoC,GAE1B,OAAO0xC,EA1hBUK,CAAWV,EAAWI,GACnCC,EAAIlzB,UAAYwzB,EAAWV,GACpBI,UAEH/L,GAAMV,OAAO5jB,KAAKskB,GAClB0L,GAAWpM,OAAO5jB,KAAKgwB,GACvBC,GAAcrM,OAAO5jB,KAAKiwB,KAIlC5M,EAAA9iC,UAAAqwC,OAAA,WACE,MAAM,IAAI5gC,MAAM,oBAGlBqzB,EAAA9iC,UAAAswC,QAAA,WACE,MAAM,IAAI7gC,MAAM,oBAGlBqzB,EAAA9iC,UAAAuwC,QAAA,WACE/uC,OAAOzD,KAAKqc,KACZipB,OAAO5jB,KAAK1hB,KAAKqlC,eACjBC,OAAO5jB,KAAK1hB,KAAKglC,qBACjBM,OAAO5jB,KAAK1hB,KAAKklC,sBACjBI,OAAO5jB,KAAK1hB,KAAKmlC,uBACjBsN,uBAAuBzyC,KAAKqc,KAC5Brc,KAAKqc,IAAM,GAGb0oB,EAAA9iC,UAAAywC,eAAA,WACE,OAAOC,EAAShxC,OAAO3B,OAGzB+kC,EAAA9iC,UAAA2wC,gBAAA,SACEnvB,EACAovB,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBhnC,IAAIqc,WAEhB2qB,EAAW,EAAG,OAAO,EAGzB,IAAIC,EACAC,EAEA,OALJF,GAAY,EAKAG,yBAAyBxvB,IACnC,KAAKG,EAAa6C,MAChB,OAAQyqB,2BAA2BztB,IACjC,OACE,OAAOzjB,KAAKwmC,UAAU0M,0BAA0BzvB,IAElD,OACE,OAAOzjB,KAAK4mC,UACVuM,6BAA6B1vB,GAC7B2vB,8BAA8B3vB,IAGlC,OACE,OAAOzjB,KAAKgnC,UAAUqM,0BAA0B5vB,IAElD,OACE,OAAOzjB,KAAKknC,UAAUoM,0BAA0B7vB,IAElD,QACE,MAAM,IAAI/R,MAAM,0BAItB,KAAKkS,EAAaC,SAChB,OAAOikB,kBAAkB9nC,KAAKqc,IAC5Bk3B,0BAA0B9vB,GAC1BytB,2BAA2BztB,IAG/B,KAAKG,EAAaO,UAChB,IAAItR,EAAa2gC,0BAA0B/vB,GAC3C,IAAK5Q,EAAY,MACjB,OAAOq1B,mBAAmBloC,KAAKqc,IAAKxJ,EAAYq+B,2BAA2BztB,IAE7E,KAAKG,EAAawE,KAChB,KAAM2qB,EAAU/yC,KAAK4yC,gBAAgBa,oBAAoBhwB,GAAOovB,EAAeC,IAC7E,MAEF,OACEY,sBAAsBjwB,GAClBklB,oBAAoB3oC,KAAKqc,IACvBs3B,sBAAsBlwB,GACtBmwB,uBAAuBnwB,GACvBytB,2BAA2BztB,GAC3BsvB,GAEFxK,cAAcvoC,KAAKqc,IACjBs3B,sBAAsBlwB,GACtBowB,sBAAsBpwB,GAAQ,EAAI,EAClCmwB,uBAAuBnwB,GACvBqwB,sBAAsBrwB,GACtBytB,2BAA2BztB,GAC3BsvB,GAIV,KAAKnvB,EAAa0D,MAChB,KAAMyrB,EAAU/yC,KAAK4yC,gBAAgBmB,uBAAuBtwB,GAAOovB,EAAeC,IAChF,MAEF,OAAOxL,eAAetnC,KAAKqc,IAAK23B,oBAAoBvwB,GAAOsvB,GAE7D,KAAKnvB,EAAaQ,OAChB,KAAM2uB,EAAU/yC,KAAK4yC,gBAAgBqB,uBAAuBxwB,GAAOovB,EAAeC,IAChF,MAEF,KAAME,EAAUhzC,KAAK4yC,gBAAgBsB,wBAAwBzwB,GAAOovB,EAAeC,IACjF,MAEF,OAAOtL,gBAAgBxnC,KAAKqc,IAAK83B,qBAAqB1wB,GAAOsvB,EAASC,GAG1E,OAAO,GAKTjO,EAAA9iC,UAAAmyC,iBAAA,SAAiBxzC,GACf,IAAIolC,EAAOC,EAAYrlC,GACvB,IACE,OAAOyzC,oCAAoCr0C,KAAKqc,IAAK2pB,WAErDV,OAAO5jB,KAAKskB,KAIhBjB,EAAA9iC,UAAAqyC,iBAAA,SAAiB94B,GACf,OAAO62B,EAAWkC,oCAAoCv0C,KAAKqc,IAAKb,KAGlEupB,EAAA9iC,UAAA8c,iBAAA,SACEywB,EACA/rB,EACA+wB,EACAC,EACAC,GAEAC,kCAAkCnF,EAAM/rB,EAAM+wB,EAAWC,EAAYC,IAn3BvD3P,EAAA6P,kBAA2B,MAG3B7P,EAAA8P,kBAA2B,MAk3B7C9P,EA53BA,GAAarlC,EAAAqlC,SAg4BbrlC,EAAAikB,gBAAA,SAAgCF,GAC9B,OAAOwvB,yBAAyBxvB,IAGlC/jB,EAAAooB,kBAAA,SAAkCrE,GAChC,OAAOytB,2BAA2BztB,IAGpC/jB,EAAAgnB,iBAAA,SAAiCjD,GAC/B,OAAOyvB,0BAA0BzvB,IAGnC/jB,EAAAqoB,oBAAA,SAAoCtE,GAClC,OAAO0vB,6BAA6B1vB,IAGtC/jB,EAAAo1C,qBAAA,SAAqCrxB,GACnC,OAAO2vB,8BAA8B3vB,IAGvC/jB,EAAAsoB,iBAAA,SAAiCvE,GAC/B,OAAO4vB,0BAA0B5vB,IAGnC/jB,EAAAuoB,iBAAA,SAAiCxE,GAC/B,OAAO6vB,0BAA0B7vB,IAGnC/jB,EAAAokB,iBAAA,SAAiCL,GAC/B,OAAO8vB,0BAA0B9vB,IAGnC/jB,EAAAq1C,iBAAA,SAAiCtxB,GAC/B,OAAOuxB,0BAA0BvxB,IAGnC/jB,EAAAwkB,iBAAA,SAAiCT,GAC/B,OAAOwxB,0BAA0BxxB,IAGnC/jB,EAAAukB,WAAA,SAA2BR,GACzB,OAAOyxB,uBAAuBzxB,IAGhC/jB,EAAA2kB,YAAA,SAA4BZ,GAC1B,OAAO0wB,qBAAqB1wB,IAG9B/jB,EAAA8mB,cAAA,SAA8B/C,GAC5B,OAAOwwB,uBAAuBxwB,IAGhC/jB,EAAAinB,eAAA,SAA+BlD,GAC7B,OAAOywB,wBAAwBzwB,IAGjC/jB,EAAA6nB,WAAA,SAA2B9D,GACzB,OAAOuwB,oBAAoBvwB,IAG7B/jB,EAAAy1C,cAAA,SAA8B1xB,GAC5B,OAAOswB,uBAAuBtwB,IAGhC/jB,EAAA4oB,aAAA,SAA6B7E,GAC3B,OAAOkwB,sBAAsBlwB,IAG/B/jB,EAAA01C,cAAA,SAA8B3xB,GAC5B,OAAOmwB,uBAAuBnwB,IAGhC/jB,EAAA21C,WAAA,SAA2B5xB,GACzB,OAAOgwB,oBAAoBhwB,IAG7B/jB,EAAA6oB,aAAA,SAA6B9E,GAC3B,OAAOowB,sBAAsBpwB,IAG/B/jB,EAAA41C,cAAA,SAA8B7xB,GAC5B,OAAO8xB,uBAAuB9xB,IAGhC/jB,EAAA81C,eAAA,SAA+B/xB,GAC7B,OAAOgyB,wBAAwBhyB,IAGjC/jB,EAAAg2C,YAAA,SAA4BjyB,GAC1B,OAAOkyB,qBAAqBlyB,IAG9B/jB,EAAAk2C,cAAA,SAA8BnyB,GAC5B,OAAOoyB,uBAAuBpyB,IAGhC/jB,EAAA+oB,aAAA,SAA6BhF,GAC3B,OAAO4uB,EAAWyD,sBAAsBryB,KAG1C/jB,EAAAgpB,mBAAA,SAAmCjF,GACjC,OAAOsyB,6BAA6BtyB,IAGtC/jB,EAAAkpB,cAAA,SAA8BnF,EAAqBjI,GACjD,OAAOw6B,uBAAuBvyB,EAAMjI,IAGtC9b,EAAAu2C,eAAA,SAA+BxyB,GAC7B,OAAOyyB,wBAAwBzyB,IAGjC/jB,EAAAopB,UAAA,SAA0BrF,GACxB,OAAO0yB,qBAAqB1yB,IAG9B/jB,EAAAqpB,WAAA,SAA2BtF,GACzB,OAAO2yB,sBAAsB3yB,IAG/B/jB,EAAA22C,YAAA,SAA4B5yB,GAC1B,OAAO4uB,EAAWiE,qBAAqB7yB,KAGzC/jB,EAAA62C,YAAA,SAA4B9yB,GAC1B,OAAO+yB,qBAAqB/yB,IAG9B/jB,EAAA+2C,aAAA,SAA6BhzB,GAC3B,OAAO4uB,EAAWqE,sBAAsBjzB,KAG1C/jB,EAAAi3C,kBAAA,SAAkClzB,GAChC,OAAOmzB,2BAA2BnzB,IAGpC/jB,EAAAupB,cAAA,SAA8BxF,GAC5B,OAAOozB,yBAAyBpzB,IAGlC/jB,EAAAwpB,cAAA,SAA8BzF,GAC5B,OAAOqzB,0BAA0BrzB,IAGnC/jB,EAAAq3C,mBAAA,SAAmCtzB,GACjC,OAAOuzB,4BAA4BvzB,IAGrC/jB,EAAAu3C,aAAA,SAA6BxzB,GAC3B,OAAOyzB,sBAAsBzzB,IAG/B/jB,EAAAy3C,eAAA,SAA+B1zB,GAC7B,OAAO2zB,wBAAwB3zB,IAGjC/jB,EAAA0pB,cAAA,SAA8B3F,GAC5B,OAAO4uB,EAAWgF,uBAAuB5zB,KAG3C/jB,EAAA43C,UAAA,SAA0B7zB,GACxB,OAAO8zB,mBAAmB9zB,IAG5B/jB,EAAA83C,oBAAA,SAAoC/zB,GAClC,OAAOg0B,4BAA4Bh0B,IAGrC/jB,EAAAg4C,eAAA,SAA+Bj0B,EAAqBjI,GAClD,OAAOm8B,wBAAwBl0B,EAAMjI,IAGvC9b,EAAAk4C,YAAA,SAA4Bn0B,GAC1B,OAAO4uB,EAAWwF,4BAA4Bp0B,KAKhD/jB,EAAAo4C,gBAAA,SAAgCtI,GAC9B,OAAO2B,yBAAyB3B,IAGlC9vC,EAAAq4C,gBAAA,SAAgCvI,GAC9B,OAAO6C,EAAW2F,yBAAyBxI,KAG7C9vC,EAAAu4C,sBAAA,SAAsCzI,GACpC,OAAO0I,8BAA8B1I,IAGvC9vC,EAAAy4C,qBAAA,SAAqC3I,EAAmBh0B,GACtD,OAAO48B,0BAA0B5I,EAAMh0B,IAGzC9b,EAAA24C,sBAAA,SAAsC7I,GACpC,OAAO8I,2BAA2B9I,IAGpC,IAAAmD,EAAA,WAYE,SAAAA,KA0BF,OAjCSA,EAAAhxC,OAAP,SAAchC,GACZ,IAAI44C,EAAW,IAAI5F,EAGnB,OAFA4F,EAAS54C,OAASA,EAClB44C,EAASl8B,IAAMm8B,kBACRD,GAKT5F,EAAA1wC,UAAAw2C,SAAA,SAASv0C,GACP,OAAOw0C,kBAAkB14C,KAAKqc,IAAKnY,IAGrCyuC,EAAA1wC,UAAA02C,UAAA,SAAUC,EAAwBC,EAAsBrpB,EAA8BtrB,QAA9B,IAAAsrB,MAAA,QAA8B,IAAAtrB,MAAA,GACpF40C,mBAAmBF,EAAMC,EAAIrpB,EAAWtrB,IAG1CyuC,EAAA1wC,UAAA82C,mBAAA,SAAmB70C,EAAqBsrB,GACtC,OAAOwpB,4BAA4Bh5C,KAAKqc,IAAKnY,EAAMsrB,IAGrDmjB,EAAA1wC,UAAAg3C,mBAAA,SAAmBL,EAAwBC,EAAsBK,EAAgBh1C,QAAA,IAAAA,MAAA,GAC/E,IAAIuhC,EAAOS,EAAcgT,GACzB,IACEC,4BAA4BP,EAAMC,EAAIpT,EAAMyT,EAAQ5zC,OAAQpB,WAE5DohC,OAAO5jB,KAAK+jB,KAIhBkN,EAAA1wC,UAAAm3C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0Bv5C,KAAKqc,IAAKg9B,EAAOC,EAAat5C,KAAKL,OAAO0c,MAE/Es2B,EAtCA,GAkFA,SAAAjN,EAAsB8T,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIl0C,OAChBgjC,EAAMhD,OAAOC,SAASkU,GACtBC,EAAMpR,EACDjoC,EAAI,EAAGA,EAAIo5C,IAAap5C,EAC/Bs5C,MAAUD,IAAOF,EAAIn5C,IAEvB,OAAOioC,EAGT,SAAApC,EAAuB0T,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAItR,EAAMhD,OAAOC,SAASqU,EAAKt0C,QAAU,GACrCo0C,EAAMpR,EACDjoC,EAAI,EAAGgL,EAAIuuC,EAAKt0C,OAAQjF,EAAIgL,IAAKhL,EAAG,CAC3C,IAAIw5C,EAAMD,EAAKv5C,GAEfs5C,MAAUD,EAAyB,IAAdG,GACrBF,MAAUD,EAAM,EAAKG,GAAS,EAAK,KACnCF,MAAUD,EAAM,EAAKG,GAAQ,GAAM,KACnCF,MAAUD,EAAM,EAAKG,IAAQ,IAC7BH,GAAO,EAET,OAAOpR,EAGT,SAAAX,EAAuBmS,GACrB,OAAO5T,EAAc4T,GA2BvB,SAAA7T,EAAqB8T,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAIzR,EAAMhD,OAAOC,SA1BnB,SAA0BwU,GAExB,IADA,IAAI10C,EAAM,EACDhF,EAAI,EAAGgL,EAAI0uC,EAAIz0C,OAAQjF,EAAIgL,IAAKhL,EAAG,CAC1C,IAAI25C,EAAID,EAAIr0C,WAAWrF,GACnB25C,GAAK,OAAUA,GAAK,OAAU35C,EAAI,EAAIgL,IACxC2uC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBD,EAAIr0C,aAAarF,IAEpD25C,GAAK,MACL30C,EAEFA,GADS20C,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAO30C,EAKmB40C,CAAiBF,GAAO,GAE9CL,EAAMpR,EACDjoC,EAAI,EAAGgL,EAAI0uC,EAAIz0C,OAAQjF,EAAIgL,IAAKhL,EAAG,CAC1C,IAAI25C,EAAID,EAAIr0C,WAAWrF,GACnB25C,GAAK,OAAUA,GAAK,OAAU35C,EAAI,EAAIgL,IACxC2uC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBD,EAAIr0C,aAAarF,IAEpD25C,GAAK,IACPL,MAAUD,IAAOM,GACRA,GAAK,MACdL,MAAUD,IAAQ,IAASM,IAAM,GACjCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,OACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,SACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,UACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,KAE3BL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAI/B,OADAL,MAAUD,EAAK,GACRpR,EAGT,SAAAuJ,EAAiBvJ,GACf,OACG6J,KAAS7J,GACT6J,KAAS7J,EAAM,IAAO,EACtB6J,KAAS7J,EAAM,IAAM,GACrB6J,KAAS7J,EAAM,IAAM,GAY1B,SAAA+J,EAA2B/J,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI4R,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIp0C,MAIP+zC,EAAK/H,KAAS7J,MACR,IAAL4R,GAINC,EAAuB,GAAlBhI,KAAS7J,KACK,MAAT,IAAL4R,IAILE,EAAuB,GAAlBjI,KAAS7J,KACK,MAAT,IAAL4R,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBlI,KAAS7J,KACK,MAAT,IAAL4R,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBnI,KAAS7J,KAEZ4R,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBnI,KAAS7J,OAKpBiS,EAAI10C,KAAKq0C,IApBPK,EAAI10C,MAAY,GAALq0C,IAAY,EAAKC,IAL5BI,EAAI10C,KAAKq0C,GAmCb,OAAOM,OAAOC,eAAeF,GAhPlB76C,EAAAizC,WAqMbjzC,EAAA2yC,aA+CA,IAAAL,EAAA,WAKA,OALA,gBAAatyC,EAAAsyC,eAQbtyC,EAAAg7C,yBAAA,SAAAA,EAAyCj3B,GAEvC,OAAQytB,2BAA2BztB,IACjC,OACA,OACA,OACA,OAAqB,OAAO,EAE9B,OAAQwvB,yBAAyBxvB,IAC/B,KAAKG,EAAayF,YAClB,KAAKzF,EAAa+2B,OAAQ,OAAO,EACjC,KAAK/2B,EAAag3B,MAAO,OAA2C,GAApChE,2BAA2BnzB,GAC3D,KAAKG,EAAa4E,MAChB,IAAKstB,sBAAsBryB,GAAO,CAChC,IAAIo3B,EAAc9E,6BAA6BtyB,GAC/C,OAAOo3B,EAAc,GAAKH,EAAyB1E,uBAAuBvyB,EAAMo3B,EAAc,KAIpG,OAAO,kFC9jDT,IAAAC,EAAA36C,EAAA,IAcA,SAAkB46C,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAxCF,CAAkBr7C,EAAAq7C,WAAAr7C,EAAAq7C,cA4ClB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBArBF,CAAkBt7C,EAAAs7C,YAAAt7C,EAAAs7C,eAyBlB,IAAArvC,EAAA,WAoBE,SAAAA,EAAYoC,EAAgB2M,EAAkBsM,GAHtChnB,KAAAi7C,mBAAkC,KAIxCj7C,KAAK+N,KAAOA,EACZ/N,KAAK0a,MAAQA,EACb1a,KAAKgnB,KAAOA,EACZhnB,KAAKwpB,SAAgB0xB,KAAel0B,EAAO,GAC3ChnB,KAAKm7C,eAAiB,KACtBn7C,KAAK2S,mBAAqB,KAC1B3S,KAAKo7C,gBAAkBp7C,KAmW3B,OA/VEe,OAAAC,eAAI2K,EAAA1J,UAAA,eAAJ,WACE,OAAQjC,KAAK+N,MACX,OAAkB,OAAOpC,EAAKC,GAC9B,OAAmB,OAAOD,EAAKE,IAC/B,QACA,OAAmB,OAAOF,EAAKG,IAC/B,QACA,OAAmB,OAAOH,EAAKI,IAC/B,OAAqB,OAAoB,IAAb/L,KAAKgnB,KAAarb,EAAK0vC,QAAU1vC,EAAK2vC,QAClE,OAAkB,OAAO3vC,EAAKM,GAC9B,OAAmB,OAAON,EAAKO,IAC/B,OAAmB,OAAOP,EAAKQ,IAC/B,OAAmB,OAAOR,EAAKS,IAC/B,OAAqB,OAAoB,IAAbpM,KAAKgnB,KAAarb,EAAK4vC,QAAU5vC,EAAK6vC,QAClE,QACA,QAAS,OAAO7vC,EAAKG,sCAKzBH,EAAA1J,UAAAw5C,UAAA,SAAUhhC,GACR,GAAIA,EAAQ7P,MAAO,CACjB,IAAIuwC,EAAiBn7C,KAAKm7C,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAehnC,aAAa2mC,EAAApxC,eAAeiL,WAEhF,OAAO,GAIThJ,EAAA1J,UAAAy5C,yBAAA,SAAyBC,GACvB,OAAOA,EAAW30B,KAAOhnB,KAAKgnB,MAIhCrb,EAAA1J,UAAA4kB,wBAAA,SAAwB80B,GACtB,IAAI30B,EAAOhnB,KAAK8S,GAAE,GAAuB9S,KAAKgnB,KAAOhnB,KAAKgnB,KAAO,EACjE,OAAO,IAAQ20B,EAAW30B,KAAOA,GAInCrb,EAAA1J,UAAA6Q,GAAA,SAAG4H,GAA0B,OAAQ1a,KAAK0a,MAAQA,IAAUA,GAE5D/O,EAAA1J,UAAAkQ,MAAA,SAAMuI,GAA0B,OAA+B,IAAvB1a,KAAK0a,MAAQA,IAGrD/O,EAAA1J,UAAA+d,QAAA,SAAQ47B,GACNn4C,OAAgB,GAATzD,KAAK+N,OAA2B/N,KAAKm7C,gBAC5C,IAAIpJ,EAAM,IAAIpmC,EAAK3L,KAAK+N,MAAmB,IAAb/N,KAAK0a,MAAwB,IAAwB1a,KAAKgnB,MAExF,OADA+qB,EAAIoJ,eAAiBS,EACd7J,GAITpmC,EAAA1J,UAAAod,WAAA,SAAW5M,GACThP,OAAgB,GAATzD,KAAK+N,OAAyB/N,KAAK2S,oBAC1C,IAAIo/B,EAAM,IAAIpmC,EAAK3L,KAAK+N,MAAmB,IAAb/N,KAAK0a,MAAwB,IAAwB1a,KAAKgnB,MAExF,OADA+qB,EAAIp/B,mBAAqBF,EAClBs/B,GAITpmC,EAAA1J,UAAA45C,WAAA,WASE,OARAp4C,OAAOzD,KAAK8S,GAAE,MACT9S,KAAKi7C,qBACRx3C,QAAQzD,KAAK8S,GAAE,MACf9S,KAAKi7C,mBAAqB,IAAItvC,EAAK3L,KAAK+N,KAAgB,IAAV/N,KAAK0a,MAA4B1a,KAAKgnB,MACpFhnB,KAAKi7C,mBAAmBG,gBAAkBp7C,KAC1CA,KAAKi7C,mBAAmBE,eAAiBn7C,KAAKm7C,eAC9Cn7C,KAAKi7C,mBAAmBtoC,mBAAqB3S,KAAK2S,oBAE7C3S,KAAKi7C,oBAIdtvC,EAAA1J,UAAAme,eAAA,SAAeC,EAAcy7B,GAC3B,IAAIC,EACAC,EACAj7B,EACAk7B,EACJ,QAL2B,IAAAH,OAAA,GAKvB97C,KAAK8S,GAAE,MACT,GAAIuN,EAAOvN,GAAE,QACN9S,KAAK8S,GAAE,MAAwBuN,EAAOvN,GAAE,MAC3C,GAAIipC,EAAe/7C,KAAKm7C,gBACtB,GAAIa,EAAc37B,EAAO86B,eACvB,OAAOY,EAAa37B,eAAe47B,QAEhC,IAAIj7B,EAAkB/gB,KAAK2S,sBAC5BspC,EAAiB57B,EAAO1N,oBAC1B,OAAOoO,EAAgBX,eAAe67B,QAKzC,IAAK57B,EAAOvN,GAAE,KACnB,GAAI9S,KAAK8S,GAAE,GACT,GAAIuN,EAAOvN,GAAE,IACX,IAAKgpC,GAAwB97C,KAAK8S,GAAE,IAAsBuN,EAAOvN,GAAE,GACjE,OAAO9S,KAAKgnB,MAAQ3G,EAAO2G,SAExB,IAAe,IAAX3G,EAAOtS,KAChB,OAAO/N,KAAKgnB,MAAQ,GACf,GAAe,IAAX3G,EAAOtS,KAChB,OAAO/N,KAAKgnB,MAAQ,QAEjB,GAAIhnB,KAAK8S,GAAE,IACZuN,EAAOvN,GAAE,GACX,OAAO9S,KAAKgnB,MAAQ3G,EAAO2G,KAIjC,OAAO,GAIFrb,EAAAuwC,iBAAP,SAAwBj5B,EAAYC,EAAai5B,GAC/C,OAAIj5B,EAAM9C,eAAe6C,EAAMk5B,GAA+Bl5B,EACrDA,EAAK7C,eAAe8C,EAAOi5B,GAA+Bj5B,EAC5D,MAITvX,EAAA1J,UAAA4C,SAAA,SAASu3C,GACP,QADO,IAAAA,OAAA,IACFA,GAAYp8C,KAAK8S,GAAE,KAAuB,CAC7C,IAAIqoC,EAAiBn7C,KAAKm7C,eAC1B,GAAIA,EACF,OAAOn7C,KAAK8S,GAAE,KACVqoC,EAAet2C,WAAa,UAC5Bs2C,EAAet2C,WAErB,IAAI8N,EAAqB3S,KAAK2S,mBAC9B,GAAIA,EACF,OAAO3S,KAAK8S,GAAE,KACV,IAAMH,EAAmB9N,UAAS,GAAQ,WAC1C8N,EAAmB9N,UAAS,GAElCpB,QAAO,GAET,OAAQzD,KAAK+N,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAStK,QAAO,GAChB,QAAoB,MAAO,SAO/BkI,EAAA1J,UAAAmc,aAAA,WACE,OAAQpe,KAAK+N,MACX,QAAS,SACT,OACA,OAAmB,SACnB,OACA,OAAqB,OAAoB,IAAb/N,KAAKgnB,KAAY,EAAiB,EAC9D,QAAmB,SACnB,QAAmB,SACnB,QAAqB,WAKzBrb,EAAA1J,UAAAo6C,aAAA,SAAa18C,GACX,OAAQK,KAAK+N,MACX,QAAoBtK,QAAO,GAC3B,QAAS,OAAO9D,EAAO6mC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbxmC,KAAKgnB,KAAY,OAAOrnB,EAAO6mC,UAAU,GAClE,OACA,OAAmB,OAAO7mC,EAAOinC,UAAU,GAC3C,QAAmB,OAAOjnC,EAAOqnC,UAAU,GAC3C,QAAmB,OAAOrnC,EAAOunC,UAAU,KAK/Cv7B,EAAA1J,UAAAq6C,YAAA,SAAY38C,GACV,OAAQK,KAAK+N,MACX,QAAoBtK,QAAO,GAC3B,QAAS,OAAO9D,EAAO6mC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbxmC,KAAKgnB,KAAY,OAAOrnB,EAAO6mC,UAAU,GAClE,OACA,OAAmB,OAAO7mC,EAAOinC,UAAU,GAC3C,QAAmB,OAAOjnC,EAAOqnC,UAAU,GAC3C,QAAmB,OAAOrnC,EAAOunC,UAAU,KAK/Cv7B,EAAA1J,UAAAs6C,eAAA,SAAe58C,GACb,OAAQK,KAAK+N,MACX,QAAoBtK,QAAO,GAC3B,QAAS,OAAO9D,EAAO6mC,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAbxmC,KAAKgnB,KAAY,OAAOrnB,EAAO6mC,WAAW,GACnE,OACA,OAAmB,OAAO7mC,EAAOinC,WAAW,GAAI,GAChD,QAAmB,OAAOjnC,EAAOqnC,WAAW,GAC5C,QAAmB,OAAOrnC,EAAOunC,WAAW,KAKhDv7B,EAAA1J,UAAAmd,kBAAA,WACE,OAAQpf,KAAK+N,MACX,QAAS,MAAO,IAChB,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAb/N,KAAKgnB,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,MAOfrb,EAAAC,GAAY,IAAID,EAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,IAAIF,EAAI,EAClC,IAGkB,IAIJA,EAAAG,IAAY,IAAIH,EAAI,EAClC,IAEkB,IAIJA,EAAAI,IAAY,IAAIJ,EAAI,EAClC,IAGkB,IAIJA,EAAA2vC,QAAgB,IAAI3vC,EAAI,EACtC,IAGkB,IAIJA,EAAA0vC,QAAgB,IAAI1vC,EAAI,EACtC,IAIkB,IAIJA,EAAAM,GAAW,IAAIN,EAAI,EACjC,IAGmB,GAILA,EAAAO,IAAY,IAAIP,EAAI,EAClC,IAGkB,IAIJA,EAAAQ,IAAY,IAAIR,EAAI,EAClC,IAEkB,IAIJA,EAAAS,IAAY,IAAIT,EAAI,EAClC,IAGkB,IAIJA,EAAA6vC,QAAgB,IAAI7vC,EAAI,EACtC,IAGkB,IAIJA,EAAA4vC,QAAgB,IAAI5vC,EAAI,EACtC,IAIkB,IAIJA,EAAAW,KAAa,IAAIX,EAAI,GACnC,IAGmB,GAILA,EAAAY,IAAY,IAAIZ,EAAI,GAClC,IAEkB,IAIJA,EAAAa,IAAY,IAAIb,EAAI,GAClC,IAGkB,IAIJA,EAAAc,KAAa,IAAId,EAAI,KAAgC,GACvEA,EA9XA,GAAajM,EAAAiM,OAiYbjM,EAAA88C,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMn3C,OACjBysC,EAAM,IAAI5rC,MAAkBu2C,GACvBr8C,EAAI,EAAGA,EAAIq8C,IAAYr8C,EAAG0xC,EAAI1xC,GAAKo8C,EAAMp8C,GAAG+d,eACrD,OAAO2zB,GAITryC,EAAAi9C,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAMn3C,OACrB,IAAKo3C,EAAU,MAAO,GAEtB,IADA,IAAI/2C,EAAK,IAAIQ,MAAcu2C,GAClBr8C,EAAI,EAAGA,EAAIq8C,IAAYr8C,EAAGsF,EAAGtF,GAAKo8C,EAAMp8C,GAAGwE,WACpD,OAAOc,EAAGG,KAAK,MAIjB,IAAA82C,EAAA,WAoBE,SAAAA,EACElqC,EACAE,EACAwK,QAFA,IAAA1K,MAAA,WACA,IAAAE,MAAA,WACA,IAAAwK,MAAA,MARFpd,KAAA68C,qBAA8C,KAU5C78C,KAAK0S,eAAiBA,MACtB1S,KAAK88C,eAAiB,KACtB98C,KAAK+8C,mBAAqB,EAC1B/8C,KAAK4S,WAAaA,GAA0BjH,EAAKc,KACjDzM,KAAKod,SAAWA,EAChBpd,KAAKg9C,SAAU,EACfh9C,KAAKgS,KAAOrG,EAAKQ,IAAIkT,WAAWrf,MA8FpC,OA1FE48C,EAAA36C,UAAA4b,iBAAA,SAAiBrC,GACf,IAAIshC,EAAiB98C,KAAK88C,eAC1B,OAAOA,GAAkBA,EAAex3C,OAASkW,EAC7CshC,EAAethC,GACfyhC,EAAwBzhC,IAI9BohC,EAAA36C,UAAAme,eAAA,SAAeC,GAIb,IAAI68B,EAAel9C,KAAKod,SACpB+/B,EAAiB98B,EAAOjD,SAC5B,GAAI8/B,GACF,IAAMC,IAAkBD,EAAa98B,eAAe+8B,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAIn9C,KAAKg9C,SAAW38B,EAAO28B,QAAS,OAAO,EAG3C,IAAII,EAAqBp9C,KAAK0S,eAC1B2qC,EAAuBh9B,EAAO3N,eAC9B4qC,EAAgBF,EAAmB93C,OACvC,GAAIg4C,GAAiBD,EAAqB/3C,OAAQ,OAAO,EACzD,IAAK,IAAIjF,EAAI,EAAGA,EAAIi9C,IAAiBj9C,EAAG,CACtC,IAAIk9C,EAAoBH,EAAmB/8C,GACvCm9C,EAAsBH,EAAqBh9C,GAC/C,IAAKk9C,EAAkBn9B,eAAeo9B,GAAsB,OAAO,EAIrE,IAAIC,EAAiBz9C,KAAK4S,WACtB8qC,EAAmBr9B,EAAOzN,WAC9B,OAAO6qC,GAAkBC,GAAoBD,EAAer9B,eAAes9B,IAItEd,EAAAe,oBAAP,SAA2BjrC,EAA+BE,EAAkBwK,QAAA,IAAAA,MAAA,MAC1E,IAAIzX,KAEJ,GADIyX,GAAUzX,EAAGE,KAAKuX,EAASgC,qBAC3B1M,EACF,IAAK,IAAIrS,EAAI,EAAGgL,EAAIqH,EAAepN,OAAQjF,EAAIgL,IAAKhL,EAAGsF,EAAGE,KAAK6M,EAAerS,GAAG+e,qBAGnF,OADAzZ,EAAGE,KAAK+M,EAAWwM,qBACZzZ,EAAGG,KAAK,KAIjB82C,EAAA36C,UAAAmd,kBAAA,WACE,OAAOw9B,EAAUe,oBAAoB39C,KAAK0S,eAAgB1S,KAAK4S,WAAY5S,KAAKod,WAIlFw/B,EAAA36C,UAAA4C,SAAA,SAAS+4C,QAAA,IAAAA,OAAA,GACP,IAAIj4C,EAAK,IAAIQ,MACbR,EAAGE,KAAK,KACR,IAAI2V,EAAQ,EACR4B,EAAWpd,KAAKod,SAChBA,GACEwgC,IACFj4C,EAAGE,KAAK,UACRF,EAAGE,KAAKuX,EAASvY,YACjB2W,EAAQ,GAGZ,IAAI4P,EAAaprB,KAAK0S,eAClB4qC,EAAgBlyB,EAAW9lB,OAC/B,GAAIg4C,EAKF,IAJA,IAAIzuB,EAAQ7uB,KAAK88C,eACb5R,EAAWrc,EAAQA,EAAMvpB,OAAS,EAClCu4C,EAAgB79C,KAAK+8C,mBACrBe,EAAY99C,KAAKg9C,QAAUM,EAAgB,GAAK,EAC3Cj9C,EAAI,EAAGA,EAAIi9C,IAAiBj9C,IAAKmb,EACpCA,GAAO7V,EAAGE,KAAK,MACfxF,GAAKy9C,GAAWn4C,EAAGE,KAAK,OACxBxF,EAAI6qC,EAAUvlC,EAAGE,KAAgBgpB,EAAOxuB,IACvCsF,EAAGE,KAAKo3C,EAAwB58C,IACjCA,GAAKw9C,GAAiBx9C,GAAKy9C,EAAWn4C,EAAGE,KAAK,OAC7CF,EAAGE,KAAK,MACbF,EAAGE,KAAKulB,EAAW/qB,GAAGwE,YAK1B,OAFAc,EAAGE,KAAK,SACRF,EAAGE,KAAK7F,KAAK4S,WAAW/N,YACjBc,EAAGG,KAAK,KAEnB82C,EA7HA,GAAal9C,EAAAk9C,YAkIb,IAAImB,EAA+C,KAGnD,SAAAd,EAAwCzhC,GACjCuiC,IAA6BA,MAClC,IAAK,IAAI19C,EAAI09C,EAA4Bz4C,OAAQjF,GAAKmb,IAASnb,EAC7D09C,EAA4Bl4C,KAAK,OAASxF,EAAEwE,SAAS,KAEvD,OAAOk5C,EAA4BviC,EAAQ,GAL7C9b,EAAAu9C,yCC/mBA,IAAAe,EAGAA,EAAA,WACA,OAAAh+C,KADA,GAIA,IAEAg+C,KAAAniC,SAAA,cAAAA,KAAA,EAAAoiC,MAAA,QACC,MAAAC,GAED,iBAAAC,SAAAH,EAAAG,QAOAx+C,EAAAD,QAAAs+C,wZCVA,IAuBYr0B,EAwIAy0B,EA/JZ13C,EAAAvG,EAAA,GAMAyG,EAAAzG,EAAA,GAKA+C,EAAA/C,EAAA,GA0JA,SAAAk+C,EAAiCj5C,GAE/B,OADA3B,OAAO2B,EAAKE,QACJF,EAAKM,WAAW,IACtB,QACE,OAAQN,GACN,IAAK,WAAY,OAAOukB,EAAMpT,SAC9B,IAAK,KAAM,OAAOoT,EAAM20B,GACxB,IAAK,QAAS,OAAO30B,EAAM40B,MAC3B,IAAK,QAAS,OAAO50B,EAAM60B,MAE7B,MAEF,QACE,OAAQp5C,GACN,IAAK,QAAS,OAAOukB,EAAMgP,MAE7B,MAEF,QACE,OAAQvzB,GACN,IAAK,OAAQ,OAAOukB,EAAM80B,KAC1B,IAAK,QAAS,OAAO90B,EAAM+0B,MAC3B,IAAK,QAAS,OAAO/0B,EAAM1M,MAC3B,IAAK,WAAY,OAAO0M,EAAMiP,SAC9B,IAAK,QAAS,OAAOjP,EAAMpP,MAC3B,IAAK,cAAe,OAAOoP,EAAM/S,YAEnC,MAEF,SACE,OAAQxR,GACN,IAAK,WAAY,OAAOukB,EAAMg1B,SAC9B,IAAK,UAAW,OAAOh1B,EAAMi1B,QAC7B,IAAK,UAAW,OAAOj1B,EAAMk1B,QAC7B,IAAK,SAAU,OAAOl1B,EAAMm1B,OAC5B,IAAK,KAAM,OAAOn1B,EAAMkP,GAE1B,MAEF,SACE,OAAQzzB,GACN,IAAK,OAAQ,OAAOukB,EAAMo1B,KAC1B,IAAK,OAAQ,OAAOp1B,EAAM/O,KAC1B,IAAK,SAAU,OAAO+O,EAAMtb,OAC5B,IAAK,UAAW,OAAOsb,EAAMq1B,QAE/B,MAEF,SACE,OAAQ55C,GACN,IAAK,QAAS,OAAOukB,EAAMI,MAC3B,IAAK,UAAW,OAAOJ,EAAMs1B,QAC7B,IAAK,MAAO,OAAOt1B,EAAMyP,IACzB,IAAK,OAAQ,OAAOzP,EAAMu1B,KAC1B,IAAK,WAAY,OAAOv1B,EAAM5N,SAEhC,MAEF,SACE,OAAQ3W,GACN,IAAK,MAAO,OAAOukB,EAAMhU,IAE3B,MAEF,SACE,OAAQvQ,GACN,IAAK,KAAM,OAAOukB,EAAM0P,GACxB,IAAK,aAAc,OAAO1P,EAAMw1B,WAChC,IAAK,SAAU,OAAOx1B,EAAMlb,OAC5B,IAAK,KAAM,OAAOkb,EAAMy1B,GACxB,IAAK,aAAc,OAAOz1B,EAAMgN,WAChC,IAAK,YAAa,OAAOhN,EAAM/I,UAC/B,IAAK,KAAM,OAAO+I,EAAM01B,GAE1B,MAEF,SACE,OAAQj6C,GACN,IAAK,QAAS,OAAOukB,EAAM21B,MAE7B,MAEF,SACE,OAAQl6C,GACN,IAAK,MAAO,OAAOukB,EAAM41B,IAE3B,MAEF,SACE,OAAQn6C,GACN,IAAK,SAAU,OAAOukB,EAAM61B,OAE9B,MAEF,SACE,OAAQp6C,GACN,IAAK,YAAa,OAAOukB,EAAMhP,UAC/B,IAAK,MAAO,OAAOgP,EAAMkN,IACzB,IAAK,OAAQ,OAAOlN,EAAME,KAE5B,MAEF,SACE,OAAQzkB,GACN,IAAK,KAAM,OAAOukB,EAAM81B,GAE1B,MAEF,SACE,OAAQr6C,GACN,IAAK,UAAW,OAAOukB,EAAM+1B,QAC7B,IAAK,UAAW,OAAO/1B,EAAMg2B,QAC7B,IAAK,YAAa,OAAOh2B,EAAMi2B,UAC/B,IAAK,SAAU,OAAOj2B,EAAMk2B,OAE9B,MAEF,SACE,OAAQz6C,GACN,IAAK,WAAY,OAAOukB,EAAMtT,SAC9B,IAAK,SAAU,OAAOsT,EAAM4P,OAE9B,MAEF,SACE,OAAQn0B,GACN,IAAK,MAAO,OAAOukB,EAAM/T,IACzB,IAAK,SAAU,OAAO+T,EAAMzT,OAC5B,IAAK,QAAS,OAAOyT,EAAMuN,MAC3B,IAAK,SAAU,OAAOvN,EAAM8P,OAE9B,MAEF,SACE,OAAQr0B,GACN,IAAK,OAAQ,OAAOukB,EAAMwN,KAC1B,IAAK,QAAS,OAAOxN,EAAM+P,MAC3B,IAAK,OAAQ,OAAO/P,EAAMG,KAC1B,IAAK,MAAO,OAAOH,EAAMgQ,IACzB,IAAK,OAAQ,OAAOhQ,EAAM4L,KAC1B,IAAK,SAAU,OAAO5L,EAAMm2B,OAE9B,MAEF,SACE,OAAQ16C,GACN,IAAK,MAAO,OAAOukB,EAAMo2B,IACzB,IAAK,OAAQ,OAAOp2B,EAAMkQ,KAE5B,MAEF,SACE,OAAQz0B,GACN,IAAK,QAAS,OAAOukB,EAAMmQ,MAC3B,IAAK,OAAQ,OAAOnQ,EAAMq2B,KAE5B,MAEF,SACE,OAAQ56C,GACN,IAAK,QAAS,OAAOukB,EAAMs2B,OAKjC,OAAOt2B,EAAMngB,QAGf,SAAA02C,EAAsCC,GACpC,OAAQA,GACN,KAAKx2B,EAAMpT,SACX,KAAKoT,EAAM20B,GACX,KAAK30B,EAAM/S,YACX,KAAK+S,EAAMi1B,QACX,KAAKj1B,EAAMm1B,OACX,KAAKn1B,EAAMu1B,KACX,KAAKv1B,EAAMyP,IACX,KAAKzP,EAAMhU,IACX,KAAKgU,EAAM01B,GACX,KAAK11B,EAAM21B,MACX,KAAK31B,EAAM61B,OACX,KAAK71B,EAAMhP,UACX,KAAKgP,EAAMtT,SACX,KAAKsT,EAAM/T,IACX,KAAK+T,EAAM4L,KAAM,OAAO,EACxB,QAAS,OAAO,IAvUpB,SAAY5L,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAAjqB,EAAAiqB,QAAAjqB,EAAAiqB,WAwIZ,SAAYy0B,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAA1+C,EAAA0+C,qBAAA1+C,EAAA0+C,wBAMZ1+C,EAAA2+C,mBAwKA3+C,EAAAwgD,wBAqBAxgD,EAAA0gD,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAKx2B,EAAMm1B,OAAQ,MAAO,SAC1B,KAAKn1B,EAAMy1B,GAAI,MAAO,KACtB,KAAKz1B,EAAMgN,WAAY,MAAO,aAC9B,KAAKhN,EAAMkN,IAAK,MAAO,MACvB,KAAKlN,EAAMm2B,OAAQ,MAAO,SAC1B,KAAKn2B,EAAMkQ,KAAM,MAAO,OACxB,KAAKlQ,EAAMs2B,MAAO,MAAO,QACzB,KAAKt2B,EAAM02B,YAAa,MAAO,MAC/B,KAAK12B,EAAM8M,MAAO,MAAO,IACzB,KAAK9M,EAAM22B,SAAU,MAAO,IAC5B,KAAK32B,EAAM42B,YAAa,MAAO,IAC/B,KAAK52B,EAAM62B,gBAAiB,MAAO,KACnC,KAAK72B,EAAM82B,mBAAoB,MAAO,KACtC,KAAK92B,EAAM+2B,cAAe,MAAO,KACjC,KAAK/2B,EAAMg3B,mBAAoB,MAAO,KACtC,KAAKh3B,EAAMi3B,qBAAsB,MAAO,MACxC,KAAKj3B,EAAMk3B,0BAA2B,MAAO,MAC7C,KAAKl3B,EAAM5gB,KAAM,MAAO,IACxB,KAAK4gB,EAAM1gB,MAAO,MAAO,IACzB,KAAK0gB,EAAMm3B,kBAAmB,MAAO,KACrC,KAAKn3B,EAAMo3B,SAAU,MAAO,IAC5B,KAAKp3B,EAAMq3B,MAAO,MAAO,IACzB,KAAKr3B,EAAMs3B,QAAS,MAAO,IAC3B,KAAKt3B,EAAMu3B,UAAW,MAAO,KAC7B,KAAKv3B,EAAMw3B,YAAa,MAAO,KAC/B,KAAKx3B,EAAMy3B,kBAAmB,MAAO,KACrC,KAAKz3B,EAAM03B,wBAAyB,MAAO,KAC3C,KAAK13B,EAAM23B,oCAAqC,MAAO,MACvD,KAAK33B,EAAM43B,UAAW,MAAO,IAC7B,KAAK53B,EAAM63B,IAAK,MAAO,IACvB,KAAK73B,EAAM83B,MAAO,MAAO,IACzB,KAAK93B,EAAM+3B,YAAa,MAAO,IAC/B,KAAK/3B,EAAMg4B,MAAO,MAAO,IACzB,KAAKh4B,EAAMi4B,oBAAqB,MAAO,KACvC,KAAKj4B,EAAMk4B,QAAS,MAAO,KAC3B,KAAKl4B,EAAMm4B,OAAQ,MAAO,IAC1B,KAAKn4B,EAAMo4B,YAAa,MAAO,KAC/B,KAAKp4B,EAAMq4B,aAAc,MAAO,KAChC,KAAKr4B,EAAMs4B,gBAAiB,MAAO,KACnC,KAAKt4B,EAAMu4B,yBAA0B,MAAO,MAC5C,KAAKv4B,EAAMw4B,aAAc,MAAO,KAChC,KAAKx4B,EAAMy4B,eAAgB,MAAO,KAClC,KAAKz4B,EAAM04B,yBAA0B,MAAO,MAC5C,KAAK14B,EAAM24B,+BAAgC,MAAO,MAClD,KAAK34B,EAAM44B,2CAA4C,MAAO,OAC9D,KAAK54B,EAAM64B,iBAAkB,MAAO,KACpC,KAAK74B,EAAM84B,WAAY,MAAO,KAC9B,KAAK94B,EAAM+4B,aAAc,MAAO,KAChC,QAEE,OADAj/C,QAAO,GACA,KAKb,IAAAsR,EAAA,WAUE,SAAAA,EAAYjQ,EAAgBS,EAAYC,GA4CxCxF,KAAAgf,aAAsB,EA3CpBhf,KAAK8E,OAASA,EACd9E,KAAKuF,MAAQA,EACbvF,KAAKwF,IAAMA,EA0Cf,OAvCSuP,EAAAjP,KAAP,SAAY68C,EAAUC,GACpB,GAAID,EAAE79C,QAAU89C,EAAE99C,OAAQ,MAAM,IAAI4M,MAAM,mBAC1C,OAAO,IAAIqD,EAAM4tC,EAAE79C,OACjB69C,EAAEp9C,MAAQq9C,EAAEr9C,MAAQo9C,EAAEp9C,MAAQq9C,EAAEr9C,MAChCo9C,EAAEn9C,IAAMo9C,EAAEp9C,IAAMm9C,EAAEn9C,IAAMo9C,EAAEp9C,MAI9BzE,OAAAC,eAAI+T,EAAA9S,UAAA,eAAJ,WACE,OAAO,IAAI8S,EAAM/U,KAAK8E,OAAQ9E,KAAKuF,MAAOvF,KAAKuF,wCAEjDxE,OAAAC,eAAI+T,EAAA9S,UAAA,aAAJ,WACE,OAAO,IAAI8S,EAAM/U,KAAK8E,OAAQ9E,KAAKwF,IAAKxF,KAAKwF,sCAG/CzE,OAAAC,eAAI+T,EAAA9S,UAAA,YAAJ,WAGE,IAFA,IAAImD,EAAOpF,KAAK8E,OAAOM,KACnBJ,EAAO,EACF+yB,EAAM/3B,KAAKuF,MAAOwyB,GAAO,IAAKA,EACb,IAApB3yB,EAAKM,WAAWqyB,IAA2B/yB,IAEjD,OAAOA,mCAGTjE,OAAAC,eAAI+T,EAAA9S,UAAA,cAAJ,WAGE,IAFA,IAAImD,EAAOpF,KAAK8E,OAAOM,KACnBH,EAAS,EACJ8yB,EAAM/3B,KAAKuF,MAAQ,EAAGwyB,GAAO,GACZ,IAApB3yB,EAAKM,WAAWqyB,KADqBA,IAEvC9yB,EAEJ,OAAOA,mCAGT8P,EAAA9S,UAAA4C,SAAA,WACE,OAAO7E,KAAK8E,OAAOM,KAAKQ,UAAU5F,KAAKuF,MAAOvF,KAAKwF,MAIvDuP,EAvDA,GAAarV,EAAAqV,QA+Db,IAAA8tC,EAAA,SAAA/4C,GAgBE,SAAA+4C,EAAY/9C,EAAgBoB,QAAA,IAAAA,MAAA,MAA5B,IAAA6D,EACED,EAAAtJ,KAAAR,KAAMkG,IAAYlG,KAdpB+J,EAAAvE,IAAW,EAEXuE,EAAAguB,IAAW,EACXhuB,EAAAo2C,OAAgB,EAChBp2C,EAAA+4C,SAAgB,EAEhB/4C,EAAAg5C,WAAoB,EACpBh5C,EAAAi5C,aAAoB,EACpBj5C,EAAAk5C,oBAA2B,EAE3Bl5C,EAAAm5C,UAAmC,KAKjCn5C,EAAKjF,OAASA,EACdiF,EAAKguB,IAAM,EACXhuB,EAAKvE,IAAMV,EAAOM,KAAKE,OACvByE,EAAK7D,YAAcA,GAA4B,IAAIC,MAEnD,IAAIf,EAAON,EAAOM,KAWlB,GAPE2E,EAAKguB,IAAMhuB,EAAKvE,KACS,OAAzBJ,EAAKM,WAAWqE,EAAKguB,QAEnBhuB,EAAKguB,IAKPhuB,EAAKguB,IAAM,EAAIhuB,EAAKvE,KACK,IAAzBJ,EAAKM,WAAWqE,EAAKguB,MACQ,IAA7B3yB,EAAKM,WAAWqE,EAAKguB,IAAM,GAG3B,IADAhuB,EAAKguB,KAAO,EAEVhuB,EAAKguB,IAAMhuB,EAAKvE,KACS,IAAzBJ,EAAKM,WAAWqE,EAAKguB,QAEnBhuB,EAAKguB,aAiiCf,OA7kC+B5sB,EAAA03C,EAAA/4C,GAkD7B+4C,EAAA5gD,UAAAgO,KAAA,SAAKkzC,GAEH,YAFG,IAAAA,MAAyC/E,EAAmBS,SAC/D7+C,KAAK+iD,WAAa,EACX/iD,KAAKmgD,MAAQngD,KAAKojD,WAAWD,IAG9BN,EAAA5gD,UAAAmhD,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC/E,EAAmBS,cAC5D,IAAAwE,MAAsBv3C,IAAIqc,WAG1B,IADA,IAAI/iB,EAAOpF,KAAK8E,OAAOM,KAChBpF,KAAK+3B,IAAM/3B,KAAKwF,KAAK,CAC1BxF,KAAK8iD,SAAW9iD,KAAK+3B,IACrB,IAAIr3B,EAAI0E,EAAKM,WAAW1F,KAAK+3B,KAC7B,OAAQr3B,GACN,QACE,OACIV,KAAK+3B,IAAM/3B,KAAKwF,KACO,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,MACpB,MAGL,QACA,OACA,QACA,QACA,UACI/3B,KAAK+3B,IACP,MAEF,QAEE,QADE/3B,KAAK+3B,IAELsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IAELsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IACApO,EAAMk3B,2BAERl3B,EAAMg3B,oBAERh3B,EAAM+3B,YAEf,QACA,QACA,QACE,OAAO/3B,EAAM25B,cAEf,QAEE,QADEtjD,KAAK+3B,IAELsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IACApO,EAAMy4B,gBAERz4B,EAAMs3B,QAEf,QAEE,KADEjhD,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAMi4B,oBAEf,GAA6B,IAAzBx8C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAM64B,iBAGjB,OAAO74B,EAAM43B,UAEf,QAEE,QADEvhD,KAAK+3B,IACApO,EAAM45B,UAEf,QAEE,QADEvjD,KAAK+3B,IACApO,EAAM65B,WAEf,QAEE,KADExjD,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAMs4B,gBAEf,GAA6B,IAAzB78C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IAELsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IACApO,EAAMu4B,0BAERv4B,EAAMm3B,kBAGjB,OAAOn3B,EAAMo3B,SAEf,QAEE,KADE/gD,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAMu3B,UAEf,GAA6B,IAAzB97C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAMo4B,YAGjB,OAAOp4B,EAAM5gB,KAEf,QAEE,QADE/I,KAAK+3B,IACApO,EAAM8M,MAEf,QAEE,KADEz2B,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAMw3B,YAEf,GAA6B,IAAzB/7C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAMq4B,aAGjB,OAAOr4B,EAAM1gB,MAEf,QAEE,KADEjJ,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAAItC,EAAAugD,eAAer+C,EAAKM,WAAW1F,KAAK+3B,MAEtC,QADE/3B,KAAK+3B,IACApO,EAAM+5B,aAEf,GACEL,EAAiB,GAAKrjD,KAAK+3B,IAAM,EAAI/3B,KAAKwF,KACjB,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,MACQ,IAA7B3yB,EAAKM,WAAW1F,KAAK+3B,IAAM,GAG3B,OADA/3B,KAAK+3B,KAAO,EACLpO,EAAM02B,YAGjB,OAAO12B,EAAMg6B,IAEf,QACE,IAAIC,EAAkB5jD,KAAK+3B,IAE3B,KADE/3B,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAAwB,CAC/C,IAAIhM,EAAcnlB,EAAAqvB,YAAY4tB,KAQ9B,IANE7jD,KAAK+3B,IAAM,EAAI/3B,KAAKwF,KACS,IAA7BJ,EAAKM,WAAW1F,KAAK+3B,IAAM,OAEzB/3B,KAAK+3B,IACPhM,EAAcnlB,EAAAqvB,YAAY6tB,UAEnB9jD,KAAK+3B,IAAM/3B,KAAKwF,KACvB,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAA2B,GAChD/3B,KAAK+3B,IACP,MAGA/3B,KAAKkjD,WACPljD,KAAKkjD,UACHn3B,EACA3mB,EAAKQ,UAAUg+C,EAAiB5jD,KAAK+3B,KACrC/3B,KAAKoE,MAAMw/C,EAAiB5jD,KAAK+3B,MAGrC,MAEF,GAA6B,IAAzB3yB,EAAKM,WAAW1F,KAAK+3B,KAA2B,CAElD,IADA,IAAIgsB,GAAS,IACJ/jD,KAAK+3B,IAAM/3B,KAAKwF,KAEvB,GACG,KAFH9E,EAAI0E,EAAKM,WAAW1F,KAAK+3B,OAGvB/3B,KAAK+3B,IAAM,EAAI/3B,KAAKwF,KACS,IAA7BJ,EAAKM,WAAW1F,KAAK+3B,IAAM,GAC3B,CACA/3B,KAAK+3B,KAAO,EACZgsB,GAAS,EACT,MAGCA,EAKM/jD,KAAKkjD,WACdljD,KAAKkjD,UACHt8C,EAAAqvB,YAAYuB,MACZpyB,EAAKQ,UAAUg+C,EAAiB5jD,KAAK+3B,KACrC/3B,KAAKoE,MAAMw/C,EAAiB5jD,KAAK+3B,MARnC/3B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfhkD,KAAKoE,MAAMpE,KAAK+3B,KAAM,MAS1B,MAEF,GAA6B,IAAzB3yB,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAMw4B,aAGjB,OAAOx4B,EAAMq3B,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOhhD,KAAKikD,cACRt6B,EAAMu6B,eACNv6B,EAAM+5B,aAEZ,QAEE,QADE1jD,KAAK+3B,IACApO,EAAMw6B,MAEf,QAEE,QADEnkD,KAAK+3B,IACApO,EAAMy6B,UAEf,QAEE,KADEpkD,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IAELsrB,EAAiB,GACjBrjD,KAAK+3B,IAAM/3B,KAAKwF,KACS,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IACApO,EAAM04B,0BAER14B,EAAMy3B,kBAEf,GAA6B,IAAzBh8C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAM62B,gBAGjB,OAAO72B,EAAM22B,SAEf,QAEE,KADEtgD,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IAELsrB,EAAiB,GACjBrjD,KAAK+3B,IAAM/3B,KAAKwF,KACS,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IACApO,EAAMi3B,sBAERj3B,EAAM+2B,cAEf,GAA6B,IAAzBt7C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAM06B,mBAGjB,OAAO16B,EAAMm4B,OAEf,QAEE,KADE9hD,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAA8B,CAErD,KADE/3B,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IAELsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IACApO,EAAM44B,4CAER54B,EAAM23B,oCAEf,GAA6B,IAAzBl8C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAM24B,+BAGjB,OAAO34B,EAAM03B,wBAEf,GAA6B,IAAzBj8C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAM82B,mBAGjB,OAAO92B,EAAM42B,YAEf,QAEE,QADEvgD,KAAK+3B,IACApO,EAAM26B,SAEf,QAEE,QADEtkD,KAAK+3B,IACApO,EAAM46B,YAEf,QAEE,QADEvkD,KAAK+3B,IACApO,EAAM66B,aAEf,QAEE,QADExkD,KAAK+3B,IAELsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IACApO,EAAM+4B,cAER/4B,EAAM83B,MAEf,SAEE,QADEzhD,KAAK+3B,IACApO,EAAM86B,UAEf,SAEE,KADEzkD,KAAK+3B,IACHsrB,EAAiB,GAAKrjD,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CAC7C,GAA6B,KAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAMk4B,QAEf,GAA6B,IAAzBz8C,EAAKM,WAAW1F,KAAK+3B,KAEvB,QADE/3B,KAAK+3B,IACApO,EAAM84B,WAGjB,OAAO94B,EAAM63B,IAEf,SAEE,QADExhD,KAAK+3B,IACApO,EAAM+6B,WAEf,SAEE,QADE1kD,KAAK+3B,IACApO,EAAMg4B,MAEf,QAEE,QADE3hD,KAAK+3B,IACApO,EAAMg7B,GAEf,QACE,GAAIzhD,EAAA0hD,kBAAkBlkD,GAAI,CACxB,GAAIwC,EAAA2hD,mBAAmBnkD,GAAI,CAEzB,IADA,IAAIokD,EAAY9kD,KAAK+3B,MAEjB/3B,KAAK+3B,IAAM/3B,KAAKwF,KAClBtC,EAAA6hD,iBAAiBrkD,EAAI0E,EAAKM,WAAW1F,KAAK+3B,OAE1C,IAAK70B,EAAA2hD,mBAAmBnkD,GAEtB,OADAV,KAAK+3B,IAAM+sB,EACJn7B,EAAMM,WAGjB,IACI+6B,EAAe3G,EADDj5C,EAAKQ,UAAUk/C,EAAW9kD,KAAK+3B,MAEjD,GACEitB,GAAgBr7B,EAAMngB,SACtB25C,IAAuB/E,EAAmB6G,SAExC9B,IAAuB/E,EAAmB8G,SAC1ChF,EAAsB8E,IAGxB,OAAOA,EAEThlD,KAAK+3B,IAAM+sB,EAEb,OAAOn7B,EAAMM,WACR,GAAI/mB,EAAAiiD,aAAazkD,GAAI,GACxBV,KAAK+3B,IACP,MAOF,OALA/3B,KAAKuG,MACHG,EAAA5C,eAAeshD,kBACfplD,KAAKoE,MAAMpE,KAAK+3B,IAAK/3B,KAAK+3B,IAAM,MAEhC/3B,KAAK+3B,IACApO,EAAMngB,SAInB,OAAOmgB,EAAM07B,WAGfxC,EAAA5gD,UAAAqjD,KAAA,SACEC,EACApC,EACAqC,QAFA,IAAAD,OAAA,QACA,IAAApC,MAAyC/E,EAAmBS,cAC5D,IAAA2G,MAAyB15C,IAAIqc,WAE7B,IAAI/iB,EAAOpF,KAAK8E,OAAOM,KACvB,GAAIpF,KAAK+iD,UAAY,EAAG,CACtB,IAAI+B,EAAY9kD,KAAK+3B,IACjB0tB,EAAczlD,KAAKmgD,MACnBuF,EAAiB1lD,KAAK8iD,SAG1B,GAFA9iD,KAAK+iD,UAAY/iD,KAAKojD,WAAWD,EAAoBqC,GACrDxlD,KAAKgjD,aAAehjD,KAAK8iD,SACrByC,EAAgB,CAClBvlD,KAAKijD,oBAAqB,EAC1B,IAAK,IAAIlrB,EAAM+sB,EAAWt/C,EAAMxF,KAAKgjD,aAAcjrB,EAAMvyB,IAAOuyB,EAC9D,GAAI70B,EAAAuC,YAAYL,EAAKM,WAAWqyB,IAAO,CACrC/3B,KAAKijD,oBAAqB,EAC1B,OAINjjD,KAAK+3B,IAAM+sB,EACX9kD,KAAKmgD,MAAQsF,EACbzlD,KAAK8iD,SAAW4C,EAElB,OAAO1lD,KAAK+iD,WAGdF,EAAA5gD,UAAA0jD,eAAA,WACE,OAAO3lD,KAAK4lD,KAAKj8B,EAAMM,WAAYm0B,EAAmB8G,SAGxDrC,EAAA5gD,UAAA4jD,mBAAA,WACE,OAAO7lD,KAAK4lD,KAAKj8B,EAAMM,WAAYm0B,EAAmB6G,SAGxDpC,EAAA5gD,UAAA2jD,KAAA,SAAKzF,EAAcgD,QAAA,IAAAA,MAAyC/E,EAAmBS,SAC7E,IAAIiG,EAAY9kD,KAAK+3B,IACjB0tB,EAAczlD,KAAKmgD,MACnBuF,EAAiB1lD,KAAK8iD,SACtB0C,EAAoB15C,IAAIqc,UAC5B,OAAQg4B,GACN,KAAKx2B,EAAM42B,YACTiF,EAAoB,EAKxB,OADAxlD,KAAKmgD,MAAQngD,KAAKojD,WAAWD,EAAoBqC,GAC7CxlD,KAAKmgD,OAASA,GAChBngD,KAAK+iD,WAAa,GACX,IAEP/iD,KAAK+3B,IAAM+sB,EACX9kD,KAAKmgD,MAAQsF,EACbzlD,KAAK8iD,SAAW4C,GACT,IAIX7C,EAAA5gD,UAAA6jD,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMhuB,IAAM/3B,KAAK+3B,IACjBguB,EAAM5F,MAAQngD,KAAKmgD,MACnB4F,EAAMjD,SAAW9iD,KAAK8iD,SACfiD,GAGTlD,EAAA5gD,UAAAikD,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAA5gD,UAAAkkD,MAAA,SAAMJ,GACJ/lD,KAAK+3B,IAAMguB,EAAMhuB,IACjB/3B,KAAKmgD,MAAQ4F,EAAM5F,MACnBngD,KAAK8iD,SAAWiD,EAAMjD,SACtB9iD,KAAK+iD,WAAa,GAGpBF,EAAA5gD,UAAAmC,MAAA,SAAMmB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQvF,KAAK8iD,SACbt9C,EAAMxF,KAAK+3B,KACFvyB,EAAM,IACfA,EAAMD,GAED,IAAIwP,EAAM/U,KAAK8E,OAAQS,EAAOC,IAGvCq9C,EAAA5gD,UAAAmkD,eAAA,WAGE,IAFA,IAAIhhD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAK+3B,MAEb/3B,KAAK+3B,IAAM/3B,KAAKwF,KAClBtC,EAAA6hD,iBAAiB3/C,EAAKM,WAAW1F,KAAK+3B,QAExC,OAAO3yB,EAAKQ,UAAUL,EAAOvF,KAAK+3B,MAGpC8qB,EAAA5gD,UAAAowC,WAAA,WAKE,IAJA,IAAIjtC,EAAOpF,KAAK8E,OAAOM,KACnBihD,EAAQjhD,EAAKM,WAAW1F,KAAK+3B,OAC7BxyB,EAAQvF,KAAK+3B,IACb+N,EAAS,KACA,CACX,GAAI9lC,KAAK+3B,KAAO/3B,KAAKwF,IAAK,CACxBsgC,GAAU1gC,EAAKQ,UAAUL,EAAOvF,KAAK+3B,KACrC/3B,KAAKuG,MACHG,EAAA5C,eAAewiD,4BACftmD,KAAKoE,MAAMmB,EAAQ,EAAGvF,KAAKwF,MAE7B,MAEF,IAAI9E,EAAI0E,EAAKM,WAAW1F,KAAK+3B,KAC7B,GAAIr3B,GAAK2lD,EAAO,CACdvgB,GAAU1gC,EAAKQ,UAAUL,EAAOvF,KAAK+3B,OACrC,MAEF,GAAK,IAADr3B,EAAJ,CAMA,GAAIwC,EAAAuC,YAAY/E,GAAI,CAClBolC,GAAU1gC,EAAKQ,UAAUL,EAAOvF,KAAK+3B,KACrC/3B,KAAKuG,MACHG,EAAA5C,eAAewiD,4BACftmD,KAAKoE,MAAMmB,EAAQ,EAAGvF,KAAK+3B,MAE7B,QAEA/3B,KAAK+3B,SAbL+N,GAAU1gC,EAAKQ,UAAUL,EAAOvF,KAAK+3B,KACrC+N,GAAU9lC,KAAKumD,qBACfhhD,EAAQvF,KAAK+3B,IAajB,OAAO+N,GAGT+c,EAAA5gD,UAAAskD,mBAAA,WACE,KAAMvmD,KAAK+3B,KAAO/3B,KAAKwF,IAKrB,OAJAxF,KAAKuG,MACHG,EAAA5C,eAAe0iD,uBACfxmD,KAAKoE,MAAMpE,KAAKwF,MAEX,GAGT,IAAIJ,EAAOpF,KAAK8E,OAAOM,KACnB1E,EAAI0E,EAAKM,WAAW1F,KAAK+3B,OAC7B,OAAQr3B,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAK+3B,IAAM/3B,KAAKwF,KACS,KAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IACA/3B,KAAKymD,6BAEPzmD,KAAK0mD,oBAEd,QAEI1mD,KAAK+3B,IAAM/3B,KAAKwF,KACS,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,QAEnB/3B,KAAK+3B,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOyiB,OAAOmM,aAAajmD,KAIxCmiD,EAAA5gD,UAAA2kD,kBAAA,WAIE,IAHA,IAAIxhD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAK+3B,IACb8uB,GAAU,IACD,CACX,GAAI7mD,KAAK+3B,KAAO/3B,KAAKwF,IAAK,CACxBxF,KAAKuG,MACHG,EAAA5C,eAAegjD,wCACf9mD,KAAKoE,MAAMmB,EAAOvF,KAAKwF,MAEzB,MAEF,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAAzB,CAKA,IAAIr3B,EAAI0E,EAAKM,WAAW1F,KAAK+3B,KAC7B,GAAK,IAADr3B,IAAwBmmD,EAAS,MACrC,GAAI3jD,EAAAuC,YAAY/E,GAAI,CAClBV,KAAKuG,MACHG,EAAA5C,eAAegjD,wCACf9mD,KAAKoE,MAAMmB,EAAOvF,KAAK+3B,MAEzB,QAEA/3B,KAAK+3B,IACP8uB,GAAU,QAdN7mD,KAAK+3B,IACP8uB,GAAU,EAed,OAAOzhD,EAAKQ,UAAUL,EAAOvF,KAAK+3B,MAGpC8qB,EAAA5gD,UAAA8kD,gBAAA,WAIE,IAHA,IAAI3hD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAK+3B,IACbrd,EAAQ,EACL1a,KAAK+3B,IAAM/3B,KAAKwF,KAAK,CAC1B,IAAI9E,EAAS0E,EAAKM,WAAW1F,KAAK+3B,KAClC,IAAK70B,EAAA6hD,iBAAiBrkD,GAAI,MAI1B,SAHEV,KAAK+3B,IAGCr3B,GACN,SACEga,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACF1a,KAAKuG,MACHG,EAAA5C,eAAekjD,iCACfhnD,KAAKoE,MAAMmB,EAAOvF,KAAK+3B,MAGpB3yB,EAAKQ,UAAUL,EAAOvF,KAAK+3B,MAGpC8qB,EAAA5gD,UAAAgiD,YAAA,WACE,IAAI7+C,EAAOpF,KAAK8E,OAAOM,KACvB,GAA6B,IAAzBA,EAAKM,WAAW1F,KAAK+3B,MAAuB/3B,KAAK+3B,IAAM,EAAI/3B,KAAKwF,IAClE,OAAQJ,EAAKM,WAAW1F,KAAK+3B,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SAAiB,OAAO,EAI5B,IADA,IAAIA,EAAM/3B,KAAK+3B,IACRA,EAAM/3B,KAAKwF,KAAK,CACrB,IAAI9E,EAAI0E,EAAKM,WAAWqyB,GACxB,GAAK,IAADr3B,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,EAET,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7Dq3B,IAEF,OAAO,GAGT8qB,EAAA5gD,UAAAglD,YAAA,WACE,IAAI7hD,EAAOpF,KAAK8E,OAAOM,KACvB,GAA6B,IAAzBA,EAAKM,WAAW1F,KAAK+3B,MAAuB/3B,KAAK+3B,IAAM,EAAI/3B,KAAKwF,IAAK,CACvE,OAAQJ,EAAKM,WAAW1F,KAAK+3B,IAAM,IACjC,QACA,SAEE,OADA/3B,KAAK+3B,KAAO,EACL/3B,KAAKknD,iBAEd,QACA,QAEE,OADAlnD,KAAK+3B,KAAO,EACL/3B,KAAKmnD,oBAEd,QACA,SAEE,OADAnnD,KAAK+3B,KAAO,EACL/3B,KAAKonD,mBAGhB,GAAIlkD,EAAAmkD,aAAajiD,EAAKM,WAAW1F,KAAK+3B,IAAM,IAAK,CAC/C,IAAIxyB,EAAQvF,KAAK+3B,MACf/3B,KAAK+3B,IACP,IAAIz2B,EAAQtB,KAAKonD,mBAKjB,OAJApnD,KAAKuG,MACHG,EAAA5C,eAAewjD,8CACftnD,KAAKoE,MAAMmB,EAAOvF,KAAK+3B,MAElBz2B,GAGX,OAAOtB,KAAKunD,sBAGd1E,EAAA5gD,UAAAilD,eAAA,WAME,IALA,IAAI9hD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAK+3B,IACbz2B,EAAQqL,QAAQ,EAAG,GACnB66C,EAAS76C,QAAQ,GAAI,GACrB86C,EAASliD,EACNvF,KAAK+3B,IAAM/3B,KAAKwF,KAAK,CAC1B,IAAIuyB,EAAM/3B,KAAK+3B,IACXr3B,EAAI0E,EAAKM,WAAWqyB,GACxB,GAAIr3B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQomD,QACNC,QAAQrmD,EAAOkmD,GACf76C,QAAQjM,EAAC,GAAgB,SAErB,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQomD,QACNC,QAAQrmD,EAAOkmD,GACf76C,QAAQ,GAAKjM,EAAC,GAAe,SAE1B,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQomD,QACNC,QAAQrmD,EAAOkmD,GACf76C,QAAQ,GAAKjM,EAAC,GAAe,QAE1B,IAAK,IAADA,EAWT,MAVI+mD,GAAU1vB,GACZ/3B,KAAKuG,MACHkhD,GAAUliD,EACNmB,EAAA5C,eAAe8jD,wCACflhD,EAAA5C,eAAe+jD,0DACnB7nD,KAAKoE,MAAM2zB,IAGf0vB,EAAS1vB,EAAM,EAIjB/3B,KAAK+3B,IAAMA,EAAM,EAanB,OAXI/3B,KAAK+3B,KAAOxyB,EACdvF,KAAKuG,MACHG,EAAA5C,eAAegkD,2BACf9nD,KAAKoE,MAAMmB,IAEJkiD,GAAUznD,KAAK+3B,KACxB/3B,KAAKuG,MACHG,EAAA5C,eAAe8jD,wCACf5nD,KAAKoE,MAAMqjD,EAAS,IAGjBnmD,GAGTuhD,EAAA5gD,UAAAslD,mBAAA,WAME,IALA,IAAIniD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAK+3B,IACbz2B,EAAQqL,QAAQ,EAAG,GACnBo7C,EAASp7C,QAAQ,GAAI,GACrB86C,EAASliD,EACNvF,KAAK+3B,IAAM/3B,KAAKwF,KAAK,CAC1B,IAAIuyB,EAAM/3B,KAAK+3B,IACXr3B,EAAI0E,EAAKM,WAAWqyB,GACxB,GAAIr3B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQomD,QACNC,QAAQrmD,EAAOymD,GACfp7C,QAAQjM,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVI+mD,GAAU1vB,GACZ/3B,KAAKuG,MACHkhD,GAAUliD,EACNmB,EAAA5C,eAAe8jD,wCACflhD,EAAA5C,eAAe+jD,0DACnB7nD,KAAKoE,MAAM2zB,IAGf0vB,EAAS1vB,EAAM,EAIjB/3B,KAAK+3B,IAAMA,EAAM,EAanB,OAXI/3B,KAAK+3B,KAAOxyB,EACdvF,KAAKuG,MACHG,EAAA5C,eAAekkD,eACfhoD,KAAKoE,MAAMmB,IAEJkiD,GAAUznD,KAAK+3B,KACxB/3B,KAAKuG,MACHG,EAAA5C,eAAe8jD,wCACf5nD,KAAKoE,MAAMqjD,EAAS,IAGjBnmD,GAGTuhD,EAAA5gD,UAAAmlD,iBAAA,WAME,IALA,IAAIhiD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAK+3B,IACbz2B,EAAQqL,QAAQ,EAAG,GACnBs7C,EAAQt7C,QAAQ,EAAG,GACnB86C,EAASliD,EACNvF,KAAK+3B,IAAM/3B,KAAKwF,KAAK,CAC1B,IAAIuyB,EAAM/3B,KAAK+3B,IACXr3B,EAAI0E,EAAKM,WAAWqyB,GACxB,GAAIr3B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQomD,QACNC,QAAQrmD,EAAO2mD,GACft7C,QAAQjM,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVI+mD,GAAU1vB,GACZ/3B,KAAKuG,MACHkhD,GAAUliD,EACNmB,EAAA5C,eAAe8jD,wCACflhD,EAAA5C,eAAe+jD,0DACnB7nD,KAAKoE,MAAM2zB,IAGf0vB,EAAS1vB,EAAM,IAIf/3B,KAAK+3B,IAaT,OAXI/3B,KAAK+3B,KAAOxyB,EACdvF,KAAKuG,MACHG,EAAA5C,eAAeokD,qBACfloD,KAAKoE,MAAMmB,IAEJkiD,GAAUznD,KAAK+3B,KACxB/3B,KAAKuG,MACHG,EAAA5C,eAAe8jD,wCACf5nD,KAAKoE,MAAMqjD,EAAS,IAGjBnmD,GAGTuhD,EAAA5gD,UAAAklD,kBAAA,WAOE,IANA,IAAI/hD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAK+3B,IACbz2B,EAAQqL,QAAQ,EAAG,GACnBw7C,EAAQx7C,QAAQ,EAAG,GACnBy7C,EAAQz7C,QAAQ,EAAG,GACnB86C,EAASliD,EACNvF,KAAK+3B,IAAM/3B,KAAKwF,KAAK,CAC1B,IAAIuyB,EAAM/3B,KAAK+3B,IACXr3B,EAAI0E,EAAKM,WAAWqyB,GACxB,GAAK,IAADr3B,EAEFY,EAAQqmD,QACNrmD,EACA6mD,QAEG,GAAK,IAADznD,EAETY,EAAQomD,QACNC,QAAQrmD,EAAO6mD,GACfC,OAEG,IAAK,IAAD1nD,EAWT,MAVI+mD,GAAU1vB,GACZ/3B,KAAKuG,MACHkhD,GAAUliD,EACNmB,EAAA5C,eAAe8jD,wCACflhD,EAAA5C,eAAe+jD,0DACnB7nD,KAAKoE,MAAM2zB,IAGf0vB,EAAS1vB,EAAM,EAIjB/3B,KAAK+3B,IAAMA,EAAM,EAanB,OAXI/3B,KAAK+3B,KAAOxyB,EACdvF,KAAKuG,MACHG,EAAA5C,eAAeukD,sBACfroD,KAAKoE,MAAMmB,IAEJkiD,GAAUznD,KAAK+3B,KACxB/3B,KAAKuG,MACHG,EAAA5C,eAAe8jD,wCACf5nD,KAAKoE,MAAMqjD,EAAS,IAGjBnmD,GAGTuhD,EAAA5gD,UAAAqmD,UAAA,WAWE,OAAOtoD,KAAKuoD,oBAGd1F,EAAA5gD,UAAAsmD,iBAAA,WAIE,IAFA,IAAIhjD,EAAQvF,KAAK+3B,IACb3yB,EAAOpF,KAAK8E,OAAOM,KAChBpF,KAAK+3B,IAAM/3B,KAAKwF,KAAOtC,EAAAugD,eAAer+C,EAAKM,WAAW1F,KAAK+3B,SAC9D/3B,KAAK+3B,IAET,GAAI/3B,KAAK+3B,IAAM/3B,KAAKwF,KAAgC,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,KAE9C,MADE/3B,KAAK+3B,IACA/3B,KAAK+3B,IAAM/3B,KAAKwF,KAAOtC,EAAAugD,eAAer+C,EAAKM,WAAW1F,KAAK+3B,SAC9D/3B,KAAK+3B,IAGX,GAAI/3B,KAAK+3B,IAAM/3B,KAAKwF,IAAK,CACvB,IAAI9E,EAAI0E,EAAKM,WAAW1F,KAAK+3B,KAC7B,GAAK,IAADr3B,GAAoB,KAADA,EAUrB,MARIV,KAAK+3B,IAAM/3B,KAAKwF,MACS,IAAzBJ,EAAKM,WAAW1F,KAAK+3B,MACI,IAAzB3yB,EAAKM,WAAW1F,KAAK+3B,OAEvB70B,EAAAugD,eAAer+C,EAAKM,WAAW1F,KAAK+3B,IAAM,OAExC/3B,KAAK+3B,IAEF/3B,KAAK+3B,IAAM/3B,KAAKwF,KAAOtC,EAAAugD,eAAer+C,EAAKM,WAAW1F,KAAK+3B,SAC9D/3B,KAAK+3B,IAIb,OAAOywB,WAAWpjD,EAAKQ,UAAUL,EAAOvF,KAAK+3B,OAG/C8qB,EAAA5gD,UAAAwmD,aAAA,WACE,MAAM,IAAI/2C,MAAM,oBAGlBmxC,EAAA5gD,UAAAykD,kBAAA,WAIE,IAHA,IAAIgC,EAAS,EACTpnD,EAAQ,EACR8D,EAAOpF,KAAK8E,OAAOM,KAChBpF,KAAK+3B,IAAM/3B,KAAKwF,KAAK,CAC1B,IAAI9E,EAAI0E,EAAKM,WAAW1F,KAAK+3B,OAC7B,GAAIr3B,GAAC,IAAmBA,GAAC,GACvBY,EAAgB,GAARA,EAAaZ,EAAC,QACjB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,EAAgB,GAARA,EAAa,GAAKZ,EAAC,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKuG,MACHG,EAAA5C,eAAegkD,2BACf9nD,KAAKoE,MAAMpE,KAAK+3B,IAAM,EAAG/3B,KAAK+3B,MAEzB,GANPz2B,EAAgB,GAARA,EAAa,GAAKZ,EAAC,GAQ7B,GAAgB,KAAVgoD,EAAa,MAErB,OAAIA,GACF1oD,KAAKuG,MACHG,EAAA5C,eAAe0iD,uBACfxmD,KAAKoE,MAAMpE,KAAK+3B,MAEX,IAEFyiB,OAAOmM,aAAarlD,IAGrBuhD,EAAA5gD,UAAAwkD,0BAAR,WACE,IAAIlhD,EAAQvF,KAAK+3B,IACbz2B,EAAQtB,KAAKknD,iBACbyB,EAAU7Z,QAAQxtC,GAClBsnD,GAAU,EAEdnlD,QAAQsrC,SAASztC,IACbqnD,EAAU,UACZ3oD,KAAKuG,MACHG,EAAA5C,eAAe+kD,4EACf7oD,KAAKoE,MAAMmB,EAAOvF,KAAK+3B,MAEzB6wB,GAAU,GAGZ,IAAIxjD,EAAOpF,KAAK8E,OAAOM,KAiBvB,OAhBIpF,KAAK+3B,KAAO/3B,KAAKwF,KACnBxF,KAAKuG,MACHG,EAAA5C,eAAe0iD,uBACfxmD,KAAKoE,MAAMmB,EAAOvF,KAAKwF,MAEzBojD,GAAU,GACwB,KAAzBxjD,EAAKM,WAAW1F,KAAK+3B,OAC5B/3B,KAAK+3B,KAEP/3B,KAAKuG,MACHG,EAAA5C,eAAeglD,qCACf9oD,KAAKoE,MAAMmB,EAAOvF,KAAK+3B,MAEzB6wB,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbnO,OAAOmM,aAAagC,GACpBnO,OAAOmM,aAC2B,QAA/BgC,EAAU,OAAS,KAAO,IAC1BA,EAAU,OAAS,KAAY,QAIxC9F,EAAA5gD,UAAA8mD,OAAA,aAEFlG,EA7kCA,CAA+Bn8C,EAAAT,mBAAlBvG,EAAAmjD,YAglCb,IAAAoD,EAAA,WAOA,OAPA,gBAAavmD,EAAAumD,QAUb,IAAID,EAA8B,s4BCxjDlC,IAyDYgD,EAzDZtiD,EAAAvG,EAAA,GAKA26C,EAAA36C,EAAA,GAmBAyG,EAAAzG,EAAA,GAoBAwG,EAAAxG,EAAA,GAMAsG,EAAAtG,EAAA,IAOA,SAAY6oD,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAAtpD,EAAAspD,aAAAtpD,EAAAspD,gBAQZ,IAAA/9C,EAAA,SAAAnB,GAWE,SAAAmB,EAAYwP,GAAZ,IAAA1Q,EACED,EAAAtJ,KAAAR,KAAMya,EAAQvU,cAAYlG,YAN5B+J,EAAAk/C,sBAA2C,KAE3Cl/C,EAAAm/C,yBAA+C,KAK7Cn/C,EAAK0Q,QAAUA,IA+jCnB,OA5kC8BtP,EAAAF,EAAAnB,GAiB5BmB,EAAAhJ,UAAAknD,YAAA,SACEt9B,EACA/P,EACAstC,GAIA,QALA,IAAAttC,MAAA,WACA,IAAAstC,MAAaJ,EAAWK,QAIpBx9B,EAAK9d,MAAQnH,EAAAoH,SAAS4nB,UAAW,CACnC,IAAInjB,EAAYzS,KAAKspD,iBAAgCz9B,EAAM/P,EAAyBstC,GACpF,OAAK32C,EACEoZ,EAAKrB,WAAa/X,EAAUT,KAAK6pC,aAAeppC,EAAUT,KAD1C,KAKzBvO,OAAOooB,EAAK9d,MAAQnH,EAAAoH,SAASunB,MAC7B,IAAIg0B,EAAqB19B,EACrBrX,EAAa+0C,EAAS3oD,KAAKwE,KAC3ByN,EAAa2B,EACbhF,EAAY+5C,EAASnlD,MAAMU,OAAOmU,aAAexS,EAAAnE,eAAiBkS,EAIhEvK,EAAiBjK,KAAKya,QAAQxQ,eAC9BoF,OAAO,EACX,IACGA,EAAUpF,EAAe/I,IAAIsO,MAC7BH,EAAUpF,EAAe/I,IAAI2R,IAE9B,OAAQxD,EAAQtB,MACd,KAAK+sC,EAAArxC,YAAYmR,KACf,OAA+B,OAA3B2uC,EAAS5pC,eAA0B4pC,EAAS5pC,cAAcra,QACxD8jD,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAe0lD,sBACf39B,EAAKznB,MAAOiL,EAAQ3B,cAGjB,MAEF/G,EAAAgF,KAAKG,IAEd,KAAKgvC,EAAArxC,YAAYyH,gBACf,IAAIU,EAAW5R,KAAKypD,8BACFp6C,EAChBk6C,EAAS5pC,cACT7D,EACA+P,GAEF,OAAKja,EACEia,EAAKrB,WAAa5Y,EAASI,KAAK6pC,aAAejqC,EAASI,KADzC,KAS5B,IAAIP,EAAQzR,KAAKya,QAAQrQ,YAAYlJ,IAAIsT,GACzC,GAAI/C,EAAO,OAAOzR,KAAKmpD,YAAY13C,EAAMO,KAAM8J,EAAyBstC,GAKxE,IAAIM,EAAoBH,EAAS5pC,cACjC,GAAI+pC,EAAmB,CAGrB,IAFA,IAAIC,EAAmBD,EAAkBpkD,OACrCygC,EAAa,IAAI5/B,MAAYwjD,GACxBtpD,EAAI,EAAGA,EAAIspD,IAAoBtpD,EAAG,CACzC,IAAIupD,EAAY5pD,KAAKmpD,YACnBO,EAAkBrpD,GAClByb,EACAstC,GAEF,IAAKQ,EAAW,OAAO,KACvB7jB,EAAW1lC,GAAKupD,EAElB,GAAID,EAAkB,CACpB,IAAIE,EAAcljD,EAAAg2C,cAAc5W,GAC5B8jB,EAAYvkD,SACdkK,GAAa,IAAMq6C,EAAc,IACjCh3C,GAAc,IAAMg3C,EAAc,UAE/B,GAAI/tC,EAAyB,CAClC,IAAIguC,EAAkBhuC,EAAwB5a,IAAI2R,GAClD,GAAIi3C,EAAiB,OAAOA,GAOhC,IAAI3/C,EAAcnK,KAAKya,QAAQtQ,YAC3B6H,OAAI,EACR,OACGA,EAAO7H,EAAYjJ,IAAIsO,MACvBwC,EAAO7H,EAAYjJ,IAAI2R,IAEjBb,GAIPo3C,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf44C,EAAS3oD,KAAKwD,MAAOyO,GAGlB,OAIT5H,EAAAhJ,UAAAqnD,iBAAA,SACEz9B,EACA/P,EACAstC,QADA,IAAAttC,MAAA,WACA,IAAAstC,MAAyBJ,EAAWK,QAEpC,IAAIh+B,EAAmBQ,EAAKR,iBACxBjO,EAAwB,KAC5B,GAAIiO,KACFjO,EAAWpd,KAAKmpD,YAAY99B,EAAkBvP,EAAyBstC,IACxD,OAAO,KAQxB,IANA,IAAIW,EAAqBl+B,EAAKT,WAC1BkyB,EAAgByM,EAAmBzkD,OACnCoN,EAAiB,IAAIvM,MAAYm3C,GACjCR,EAAiB,IAAI32C,MAAcm3C,GACnCP,EAAqB,EACrBC,GAAU,EACL38C,EAAI,EAAGA,EAAIi9C,IAAiBj9C,EAAG,CACtC,IAAI2pD,EAAoBD,EAAmB1pD,GAC3C,OAAQ2pD,EAAkB9+B,eACxB,KAAKtkB,EAAA6uB,cAAcopB,QACjB9B,EAAqB18C,EAAI,EACzB,MAEF,KAAKuG,EAAA6uB,cAAcw0B,KACjBxmD,OAAOpD,GAAKi9C,GACZN,GAAU,EAId,IAAIr/B,EAAgB3d,KAAKmpD,YACvB1lD,OAAOumD,EAAkBh4C,MACzB8J,EACAstC,GAEF,IAAKzrC,EAAe,OAAO,KAC3BjL,EAAerS,GAAKsd,EACpBm/B,EAAez8C,GAAK2pD,EAAkBppD,KAAKwE,KAE7C,IACIwN,EADAs3C,EAAiBr+B,EAAKjZ,WAE1B,GAAIs3C,GAEF,KADAt3C,EAAa5S,KAAKmpD,YAAYe,EAAgBpuC,EAAyBstC,IACtD,OAAO,UAExBx2C,EAAajM,EAAAgF,KAAKc,KAEpB,IAAIgG,EAAY,IAAI9L,EAAAi2C,UAAUlqC,EAAgBE,EAAYwK,GAI1D,OAHA3K,EAAUqqC,eAAiBA,EAC3BrqC,EAAUsqC,mBAAqBA,EAC/BtqC,EAAUuqC,QAAUA,EACbvqC,GAITxH,EAAAhJ,UAAAkoD,qBAAA,SACE9vC,EACAqvC,EACA5tC,EACAsuC,EACAhB,QAFA,IAAAttC,MAAA,WACA,IAAAsuC,MAAA,WACA,IAAAhB,MAAyBJ,EAAWK,QAEpC,IAAIgB,EAAiBhwC,EAAe/U,OAChCglD,EAAgBZ,EAAoBA,EAAkBpkD,OAAS,EACnE,GAAI+kD,GAAkBC,EAgBpB,OAfIA,EACFtqD,KAAKuG,MACHG,EAAA5C,eAAeymD,oCACf3jD,EAAAmO,MAAMjP,KACS4jD,EAAmB,GAAGtlD,MACtBslD,EAAmBY,EAAgB,GAAGlmD,OAErDimD,EAAexlD,SAAS,IAAKylD,EAAczlD,SAAS,KAE7CulD,GACTpqD,KAAKuG,MACHG,EAAA5C,eAAeymD,oCACfH,EAAsBhmD,MAAMomD,MAAOH,EAAexlD,SAAS,IAAK,KAG7D,KAGT,IADA,IAAI8a,EAAgB,IAAIxZ,MAAYkkD,GAC3BhqD,EAAI,EAAGA,EAAIgqD,IAAkBhqD,EAAG,CACvC,IAAI2R,EAAOhS,KAAKmpD,YACDO,EAAmBrpD,GAChCyb,EACAstC,GAEF,IAAKp3C,EAAM,OAAO,KAElB2N,EAActf,GAAK2R,EAErB,OAAO2N,GAIT1U,EAAAhJ,UAAAgP,kBAAA,SACEoE,EACAo1C,EACArB,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC,IACIh6C,EADAzO,EAAOyU,EAAWjQ,KAGtB,GAAIqlD,EAAS,CAEX,OAAQA,EAAQ18C,MACd,KAAK+sC,EAAArxC,YAAYsS,SAEf,GADA1M,EAAqBo7C,EAAS3sC,KAAKmE,eAAerhB,GAIhD,OAFAZ,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzB75C,EAETo7C,EAAqBA,EAASxoD,UAAU2N,OACxC,MAEF,KAAKkrC,EAAArxC,YAAYwT,MACfwtC,EAAkBA,EAASxoD,UAAU2N,OAMzC,KAAO66C,GAAS,CACd,IAAIj4C,EAAUi4C,EAAQj4C,QACtB,GAAIA,IACEnD,EAAUmD,EAAQtR,IAAIN,IAGxB,OAFAZ,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzB75C,EAGXo7C,EAAUA,EAAQ76C,QAKtB,IAAI3F,EAAiBjK,KAAKya,QAAQxQ,eAClC,OAAIoF,EAAUpF,EAAe/I,IAAImU,EAAWjR,MAAMU,OAAOmU,aAAexS,EAAAnE,eAAiB1B,KACvFZ,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzB75C,IAILA,EAAUpF,EAAe/I,IAAIN,KAC/BZ,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzB75C,IAGL+5C,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf0E,EAAWjR,MAAOxD,GAGf,OAITqK,EAAAhJ,UAAAyoD,sBAAA,SACEC,EACAC,EACAxB,QAAA,IAAAA,MAAyBJ,EAAWK,QAGpC,IAAIwB,EAAmBF,EAAej+B,WAClCrM,EAASrgB,KAAK8qD,kBAAkBD,EAAkBD,EAAoBxB,GAC1E,IAAK/oC,EAAQ,OAAO,KAGpB,IAAI0qC,EAAeJ,EAAe3oD,SAASoD,KAG3C,OAAQib,EAAOtS,MACb,KAAK+sC,EAAArxC,YAAY2K,OACjB,KAAK0mC,EAAArxC,YAAYgS,MACjB,KAAKq/B,EAAArxC,YAAY+V,MACf,IAAIxN,EAA6BqO,EAAQrO,KAGzC,GAFAvO,OAAOuO,GAAQrL,EAAAgF,KAAKc,QAChB0uC,EAAiBnpC,EAAKmpC,gBAMxB,OAJAn7C,KAAKuG,MACHG,EAAA5C,eAAeknD,oCACfL,EAAe3oD,SAASoC,MAAO2mD,EAAoC1qC,EAAQrO,KAAKnN,YAE3E,KAETwb,EAAS86B,EACT,MAEF,KAAKL,EAAArxC,YAAYyO,SACf,IAOIijC,EAPAt6C,EAASb,KAAKuS,gBAChB9O,OAAkB4c,EAAQlI,iBAC1B,KACA,KACAixC,GAEF,IAAKvoD,EAAQ,OAAO,KAEpB,KADIs6C,EAAiBt6C,EAAO4R,UAAUG,WAAWuoC,gBAM/C,OAJAn7C,KAAKuG,MACHG,EAAA5C,eAAeknD,oCACfL,EAAe3oD,SAASoC,MAAO2mD,EAAclqD,EAAO4R,UAAUG,WAAW/N,YAEpE,KAETwb,EAAS86B,EACT,MAEF,KAAKL,EAAArxC,YAAYwT,MACf,IAAI0Q,EAAoB3tB,KAAKkpD,yBAC7B,GAAIv7B,EAAmB,CACrB,IAAIs9B,EAAqB5qC,EAAQE,eAAeu6B,EAAAt0C,aAAagB,aAC7D,IAAKyjD,EAKH,OAJAjrD,KAAKuG,MACHG,EAAA5C,eAAeonD,qCACfv9B,EAAkBvpB,MAAeic,EAAQ3S,cAEpC,KAET,IAAIkF,EAAaq4C,EAAWx4C,UAAUG,WACtC,KAAMyN,EAASzN,EAAWuoC,gBAKxB,OAJAn7C,KAAKuG,MACHG,EAAA5C,eAAeknD,oCACfL,EAAe3oD,SAASoC,MAAO2mD,EAAcn4C,EAAW/N,YAEnD,MAQf,OAAQwb,EAAOtS,MACb,KAAK+sC,EAAArxC,YAAYyH,gBACjB,KAAK4pC,EAAArxC,YAAYwT,MACf,OAAG,CACD,IACIxM,OAAM,EACV,IAFI+B,EAAU6N,EAAO7N,WAEL/B,EAAS+B,EAAQtR,IAAI6pD,IAGnC,OAFA/qD,KAAKipD,sBAAwB4B,EAC7B7qD,KAAKkpD,yBAA2B,KACzBz4C,EAGT,GAAI4P,EAAOtS,MAAQ+sC,EAAArxC,YAAYyH,gBAAiB,CAC9C,IAAqBmP,EAAQlP,cAG3B,MAFAkP,EAA0CA,EAAQlP,kBAK/C,IAAIkP,EAAOtS,MAAQ+sC,EAAArxC,YAAYwT,MAOpC,MANA,IAAYoD,EAAQT,KAGlB,MAFAS,EAAwBA,EAAQT,MAQtC,MAEF,QACE,IAAIpN,EACJ,GADIA,EAAU6N,EAAO7N,QAGnB,GADI/B,EAAS+B,EAAQtR,IAAI6pD,GAIvB,OAFA/qD,KAAKipD,sBAAwB4B,EAC7B7qD,KAAKkpD,yBAA2B,KACzBz4C,EAUf,OAJAzQ,KAAKuG,MACHG,EAAA5C,eAAeknD,oCACfL,EAAe3oD,SAASoC,MAAO2mD,EAAc1qC,EAAO3S,cAE/C,MAGTzC,EAAAhJ,UAAAkpD,qBAAA,SACEC,EACAR,EACAxB,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC,IAAIwB,EAAmBO,EAAc1+B,WACjCrM,EAASrgB,KAAK8qD,kBAAkBD,EAAkBD,EAAoBxB,GAC1E,IAAK/oC,EAAQ,OAAO,KACpB,OAAQA,EAAOtS,MACb,KAAK+sC,EAAArxC,YAAY2K,OACjB,KAAK0mC,EAAArxC,YAAYgS,MACjB,KAAKq/B,EAAArxC,YAAY+V,MAEf,GAAIa,EAD6BA,EAAQrO,KACvBmpC,eAGhB,OAFAn7C,KAAKipD,sBAAwB4B,EAC7B7qD,KAAKkpD,yBAA2BkC,EAAcz9B,kBACvCtN,EAET,MAEF,KAAKy6B,EAAArxC,YAAYwT,MACf,IAAIguC,EAAqB5qC,EAAQE,eAAeu6B,EAAAt0C,aAAagB,aAC7D,IAAKyjD,EAOH,OANI7B,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAeonD,qCACfE,EAAchnD,MAAeic,EAAQ3S,cAGlC,KAGT,GAAI2S,EADa4qC,EAAWx4C,UAAUG,WACduoC,eAGtB,OAFAn7C,KAAKipD,sBAAwB4B,EAC7B7qD,KAAKkpD,yBAA2BkC,EAAcz9B,kBACvCtN,EAWb,OANI+oC,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf61C,EAAiBzmD,OAGd,MAGT6G,EAAAhJ,UAAA6oD,kBAAA,SACEp+B,EACAk+B,EACAxB,GAEA,SAFA,IAAAA,MAAyBJ,EAAWK,QAE7B38B,EAAW3e,MAAQnH,EAAAoH,SAAS+oB,eACjCrK,EAAuCA,EAAYA,WAErD,OAAQA,EAAW3e,MACjB,KAAKnH,EAAAoH,SAASuoB,UACZ,IAAIvkB,EAAOhS,KAAKmpD,YACQz8B,EAAYpD,OAClCshC,EAAmB9sC,KAAKhC,wBACxBstC,GAEF,GAAIp3C,EAEF,GADI4pC,EAAY5pC,EAAKmpC,eAInB,OAFAn7C,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzBtN,EAGX,OAAO,KAET,KAAKh1C,EAAAoH,SAASwoB,OACZ,MAAM,IAAI9kB,MAAM,mBAElB,KAAK9K,EAAAoH,SAASmpB,KACZ,GAAIyzB,EAAmB9sC,KAAKhL,GAAE,MAE5B,GADIu4C,EAAgBT,EAAmB9sC,KAAKmE,eAAe,QAIzD,OAFAjiB,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzBmC,EAIX,OADIz7C,EAASg7C,EAAmBh7C,SAE9B5P,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzBt5C,IAELw5C,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAewnD,+CACf5+B,EAAWtoB,OAGR,MAET,KAAKwC,EAAAoH,SAASkpB,MAEV,IAAIm0B,EAOFz7C,EARJ,GAAIg7C,EAAmB9sC,KAAKhL,GAAE,MAE5B,GADIu4C,EAAgBT,EAAmB9sC,KAAKmE,eAAe,SAIzD,OAFAjiB,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzBmC,EAIX,OADIz7C,EAASg7C,EAAmBh7C,SAClBA,EAAO7B,MAAQ+sC,EAAArxC,YAAYwT,QAAUrN,EAAiBA,EAAQgQ,OAC1E5f,KAAKipD,sBAAwB,KAC7BjpD,KAAKkpD,yBAA2B,KACzBt5C,IAELw5C,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAeynD,iDACf7+B,EAAWtoB,OAGR,MAET,KAAKwC,EAAAoH,SAASic,WACZ,OAAOjqB,KAAKiR,kBAAwCyb,EAAYk+B,EAAoBxB,GAEtF,KAAKxiD,EAAAoH,SAASoJ,QACZ,OAA4BsV,EAAYrV,aACtC,KAAKzQ,EAAA0Q,YAAYC,OAGf,OAFAvX,KAAKipD,sBAAwBv8B,EAC7B1sB,KAAKkpD,yBAA2B,KACzBlpD,KAAKya,QAAQjQ,eAIxB,MAEF,KAAK5D,EAAAoH,SAASoc,eACZ,OAAOpqB,KAAK0qD,sBACgBh+B,EAC1Bk+B,EACAxB,GAGJ,KAAKxiD,EAAAoH,SAASmc,cACZ,OAAOnqB,KAAKmrD,qBACez+B,EACzBk+B,EACAxB,GAGJ,KAAKxiD,EAAAoH,SAASkc,KACZ,IAAI2gC,EAAoCn+B,EAAYA,WAChDrM,EAASrgB,KAAK8qD,kBAAkBD,EAAkBD,EAAoBxB,GAC1E,IAAK/oC,EAAQ,OAAO,KACpB,GAAIA,EAAOtS,MAAQ+sC,EAAArxC,YAAYwI,mBAAoB,CACjD,IAAIL,EAAW5R,KAAKwrD,iCACCnrC,EACFqM,EAAY/M,cAC7BirC,EAAmB9sC,KAAKhC,wBACxB4Q,EACA08B,GAEF,IAAKx3C,EAAU,OAAO,KACtB,IACIgqC,EADAhpC,EAAahB,EAASa,UAAUG,WAEpC,GADIgpC,EAAYhpC,EAAWuoC,eAIzB,OAAOS,EAEP,IAAInpC,EAAYG,EAAWD,mBAC3B,GAAIF,EAAW,CACb,IAAIg5C,EAAiBh5C,EAAUoqC,qBAO/B,OANK4O,IACHA,EAAiB,IAAI3Q,EAAA57B,eAAelf,KAAKya,QAAShI,GAClDA,EAAUoqC,qBAAuB4O,GAI5BA,EASX,OANIrC,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAe4nD,uGACfb,EAAiBzmD,MAAOic,EAAO3S,cAG5B,MAWb,OANI07C,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAGR,MAIT6G,EAAAhJ,UAAAsQ,gBAAA,SACEtQ,EACA0d,EACA7D,EACAstC,gBADA,IAAAttC,MAAA,WACA,IAAAstC,MAAyBJ,EAAWK,QAEpC,IAAIQ,EAAclqC,EAAgBhZ,EAAAg2C,cAAch9B,GAAiB,GAC7D/N,EAAW3P,EAAU0Z,UAAUza,IAAI2oD,GACvC,GAAIj4C,EAAU,OAAOA,EAErB,IAAIxC,EAAcnN,EAAUmN,YACxBu8C,EAAa1pD,EAAU6Q,GAAGrM,EAAApE,YAAY6a,UACtCnH,EAAiB9T,EAAU8T,eAG3BsH,EAAyBvB,EAE7B,GADAA,EAA0B,IAAIlS,IAC1ByT,MACF,IAA2C,IAAAC,EAAAvN,EAAAsN,GAAsBE,EAAAD,EAAArN,QAAAsN,EAAArN,KAAAqN,EAAAD,EAAArN,OAAE,CAA1D,IAAAuN,EAAApN,EAAAmN,EAAAjc,MAAA,GAACmc,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GACvB1B,EAAwBrO,IACtBgQ,EACAC,qGAMN,IAAI9B,EAAqB3Z,EAAU2Z,mBACnC,GAAIA,EAAoB,CACtBnY,OAAOxB,EAAU6Q,GAAGrM,EAAApE,YAAY6a,WAChC,IACI0uC,EADmBnoD,OAAOsS,GAAgB3G,YACHiL,eACvCwxC,EAAyBD,EAAoBtmD,OACjD7B,OAAOooD,GAA0BjwC,EAAmBtW,QACpD,IAAK,IAAIjF,EAAI,EAAGA,EAAIwrD,IAA0BxrD,EAC5Cyb,EAAwBrO,IACtBm+C,EAAoBvrD,GAAGO,KAAKwE,KAC5BwW,EAAmBvb,SAIvBoD,QAAQmY,GAIV,IAEIkwC,EAFAC,EAAgB38C,EAAYqD,UAC5Bu5C,EAAyB58C,EAAYiL,eAEzC,GAAIsF,IAAkBmsC,EAA2BnsC,EAAcra,QAAS,CACtE7B,OAAOuoD,GAA0BF,GAA4BE,EAAuB1mD,QACpF,IAASjF,EAAI,EAAGA,EAAIyrD,IAA4BzrD,EAC9Cyb,EAAwBrO,IACAu+C,EAAwB3rD,GAAGO,KAAKwE,KACtDua,EAActf,SAIlBoD,QAAQuoD,GAA2D,GAAjCA,EAAuB1mD,QAI3D,IAAI2mD,EAA8B,KAC9B7uC,EAAwB,KAC5B,GAAIuuC,EAAY,CAOd,KANAM,EAAgBjsD,KAAK6R,aACnBpO,OAAOsS,GACP6F,EACAE,EACAstC,IAEkB,OAAO,KAC3BhsC,EAAW6uC,EAAcj6C,KACzB8J,EAAwBrO,IAAI,OAAQ2P,GAItC,IAiBIxK,EAjBAs5C,EAAsBH,EAAc3gC,WACpC+gC,EAA0BD,EAAoB5mD,OAC9CoN,EAAiB,IAAIvM,MAAYgmD,GACjCrP,EAAiB,IAAI32C,MAAcgmD,GACnCpP,EAAqB,EACzB,IAAS18C,EAAI,EAAGA,EAAI8rD,IAA2B9rD,EAAG,CAChD,IAAI+rD,EAAuBF,EAAoB7rD,GAC3C+rD,EAAqBlhC,eAAiBtkB,EAAA6uB,cAAcopB,UACtD9B,EAAqB18C,EAAI,GAE3B,IAAIkpD,EAAW9lD,OAAO2oD,EAAqBp6C,MACvC2L,EAAgB3d,KAAKmpD,YAAYI,EAAUztC,EAAyBstC,GACxE,IAAKzrC,EAAe,OAAO,KAC3BjL,EAAerS,GAAKsd,EACpBm/B,EAAez8C,GAAK+rD,EAAqBxrD,KAAKwE,KAIhD,GAAInD,EAAU6Q,GAAGrM,EAAApE,YAAYuT,KAC3BhD,EAAajM,EAAAgF,KAAKc,UACb,GAAIxK,EAAU6Q,GAAGrM,EAAApE,YAAYuU,aAClChE,EAAanP,OAAOwoD,GAAej6C,SAC9B,CACDu3C,EAAW9lD,OAAOsoD,EAAcn5C,YAApC,IACIZ,EAAOhS,KAAKmpD,YAAYI,EAAUztC,EAAyBstC,GAC/D,IAAKp3C,EAAM,OAAO,KAClBY,EAAaZ,EAGf,IAAIS,EAAY,IAAI9L,EAAAi2C,UAAUlqC,EAAgBE,EAAYwK,GAC1D3K,EAAUqqC,eAAiBA,EAC3BrqC,EAAUsqC,mBAAqBA,EAE/B,IAAIrvC,EAAezL,EAAUyL,aAa7B,OAZIm8C,EAAYvkD,SAAQoI,GAAgB,IAAMm8C,EAAc,KAC5Dj4C,EAAW,IAAIkpC,EAAAj/B,SACb5Z,EACAyL,EACA+E,EACAw5C,GAEIl2C,EACJ+F,GAEF7Z,EAAU0Z,UAAUlO,IAAIo8C,EAAaj4C,GACrC5R,KAAKya,QAAQvQ,gBAAgBuD,IAAIC,EAAckE,GACxCA,GAIT3G,EAAAhJ,UAAAoqD,yBAAA,SACEpqD,EACA0d,EACAypC,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC5lD,OAAOxB,EAAU6Q,GAAGrM,EAAApE,YAAY6a,WAChC,IAAInH,EAAiBtS,OAAOxB,EAAU8T,gBAEtC,IAAM4J,IAAiBA,EAAcra,OAAS,OAAOrD,EAErD,IAAIuS,EAAavS,EAAUuS,WACvB83C,EAAa3lD,EAAAg2C,cAAch9B,GAC3B4sC,EAAmB,IAAIzR,EAAAjkC,kBACzB7W,KAAKya,QACLjG,EACAuB,EAAerI,aAAe,IAAM4+C,EAAa,IAAM7lD,EAAA/D,mBAAqB8R,EAC5EvS,EAAUmN,YACV2G,EACA9T,EAAU0U,gBAKZ,OAHA41C,EAAiB7xC,MAAQzY,EAAUyY,MACnC6xC,EAAiB50C,aAAe1V,EAAU0V,aAC1C40C,EAAiB3wC,mBAAqB+D,EAC/B4sC,GAITthD,EAAAhJ,UAAAupD,iCAAA,SACEvpD,EACAynD,EACA5tC,EACA0wC,EACApD,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC,IAAIoD,EAAuC,KAC3C,OAAIxqD,EAAU6Q,GAAGrM,EAAApE,YAAY+P,WAC3B3O,OAA4B,MAArBimD,GAAyD,GAA5BA,EAAkBpkD,QACtDmnD,EAAwBzsD,KAAKmqD,qBAC3B1mD,OAAOxB,EAAUmN,YAAYiL,gBAC7BqvC,EACA5tC,EACA0wC,EACApD,IAIGppD,KAAKuS,gBACVtQ,EACAwqD,EACA3wC,EACAstC,GANmC,MAWvCn+C,EAAAhJ,UAAA4P,aAAA,SACE5P,EACA0d,EACA7D,EACAstC,4BADA,IAAAttC,MAAA,WACA,IAAAstC,MAAyBJ,EAAWK,QAEpC,IAAIQ,EAAclqC,EAAgBhZ,EAAAg2C,cAAch9B,GAAiB,GAG7D/N,EAAW3P,EAAU0Z,UAAUza,IAAI2oD,GACvC,GAAIj4C,EAAU,OAAOA,EAGrB,IAAIyL,EAAyBvB,EAE7B,GADAA,EAA0B,IAAIlS,IAC1ByT,MACF,IAA2C,IAAA4C,EAAAlQ,EAAAsN,GAAsB6C,EAAAD,EAAAhQ,QAAAiQ,EAAAhQ,KAAAgQ,EAAAD,EAAAhQ,OAAE,CAA1D,IAAAy8C,EAAAt8C,EAAA8P,EAAA5e,MAAA,GAACmc,EAAAivC,EAAA,GAAehvC,EAAAgvC,EAAA,GACvB5wC,EAAwBrO,IAAIgQ,EAAeC,qGAM/C,IAAItO,EAAcnN,EAAUmN,YAC5B,GAAIuQ,EAAe,CACjB,IAAItF,EAAiBjL,EAAYiL,eAC7BsyC,EAAwBtyC,EAAe/U,OACvCsnD,EAAsBjtC,EAAcra,OACxC7B,OAAOmpD,GAAuBD,GAC9B,IAAK,IAAItsD,EAAI,EAAGA,EAAIusD,IAAuBvsD,EACzCyb,EAAwBrO,IAAI4M,EAAeha,GAAGO,KAAKwE,KAAMua,EAActf,SAGzEoD,OAA4C,GAArC2L,EAAYiL,eAAe/U,QAIpC,IAAIunD,EAA0B,KAC9B,GAAIz9C,EAAY2B,YAAa,CAC3B,IAAI+7C,EAAgB9sD,KAAKmpD,YACvB/5C,EAAY2B,YACZ+K,EACAstC,GAEF,IAAK0D,EAAe,OAAO,KAC3B,KAAMD,EAAYC,EAAc3R,gBAO9B,OANIiO,GAAcJ,EAAWK,QAC3BrpD,KAAKya,QAAQlU,MACXG,EAAA5C,eAAesN,sCACfhC,EAAY2B,YAAY3M,OAGrB,KAET,GAAIyoD,EAAU14C,aAAa2mC,EAAApxC,eAAegL,QAOxC,OANI00C,GAAcJ,EAAWK,QAC3BrpD,KAAKya,QAAQlU,MACXG,EAAA5C,eAAeipD,yCACf39C,EAAY2B,YAAY3M,MAAOyoD,EAAUn/C,cAGtC,KAET,GAAIm/C,EAAU14C,aAAa2mC,EAAApxC,eAAeiL,YAAc1S,EAAUkS,aAAa2mC,EAAApxC,eAAeiL,WAO5F,OANIy0C,GAAcJ,EAAWK,QAC3BrpD,KAAKya,QAAQlU,MACXG,EAAA5C,eAAekpD,+DACfpmD,EAAAmO,MAAMjP,KAAKsJ,EAAYxO,KAAKwD,MAAOgL,EAAY2B,YAAY3M,QAGxD,KAKX,IAAIoQ,EAAavS,EAAUuS,WACvB9G,EAAezL,EAAUyL,aACzBm8C,EAAYvkD,SACdkP,GAAc,IAAMq1C,EAAc,IAClCn8C,GAAgB,IAAMm8C,EAAc,MAEtCj4C,EAAW,IAAIkpC,EAAAp7B,MAAMzd,EAAWuS,EAAY9G,EAAciS,EAAektC,IAChE/wC,wBAA0BA,EACnC7Z,EAAU0Z,UAAUlO,IAAIo8C,EAAaj4C,GACrC5R,KAAKya,QAAQvQ,gBAAgBuD,IAAIC,EAAckE,GAG/C,IAAI6N,EAAoB,EACxB,GAAIotC,EAAW,CACb,GAAIA,EAAUr6C,QAAS,CAChBZ,EAASY,UAASZ,EAASY,QAAU,IAAI5I,SAC9C,IAA4B,IAAAqjD,EAAAl9C,EAAA88C,EAAUr6C,QAAQoG,UAAQs0C,EAAAD,EAAAh9C,QAAAi9C,EAAAh9C,KAAAg9C,EAAAD,EAAAh9C,OAAE,CAAnD,IAAIk9C,EAAeD,EAAA5rD,MACtBsQ,EAASY,QAAQ/E,IAAI0/C,EAAgB34C,WAAY24C,sGAGrD1tC,EAAeotC,EAAUhtC,oBAI3B,GAAI5d,EAAU6U,qBAAsB,CAClC,IAAIs2C,EAAqBptD,KAAKqsD,yBAC5BpqD,EAAU6U,qBACV6I,EACAypC,GAEF,IAAKgE,EAAoB,OAAO,KAChCx7C,EAASkO,oBAAsB9f,KAAKuS,gBAAgB66C,EAAoB,KAAM,KAAMhE,GAItF,GAAInnD,EAAUuU,oBACZ,IAAmB,IAAA62C,EAAAt9C,EAAA9N,EAAUuU,gBAAgBoC,UAAQ00C,EAAAD,EAAAp9C,QAAAq9C,EAAAp9C,KAAAo9C,EAAAD,EAAAp9C,OAAE,CAAlD,IAAIQ,EAAM68C,EAAAhsD,MACb,OAAQmP,EAAO1C,MAGb,KAAK+sC,EAAArxC,YAAY6V,gBACV1N,EAASY,UAASZ,EAASY,QAAU,IAAI5I,KAC9C,IAAI2jD,EAAoC98C,EAAQrB,YAC5Co+C,EAAyB,KAE7B,GAAKD,EAAiBv7C,KAiBpBw7C,EAAYxtD,KAAKmpD,YACfoE,EAAiBv7C,KACjBJ,EAASkK,wBACTstC,OApBwB,CAC1B,GAAkB,OAAdyD,GAA4C,OAAtBA,EAAUr6C,QAAkB,CACpD,IAAIi7C,EAAYZ,EAAUr6C,QAAQtR,IAAqBuP,EAAQ+D,YAC3Di5C,IAAcA,EAAU36C,GAAGrM,EAAApE,YAAYs9C,WACzCl8C,OAAOgqD,EAAU1/C,MAAQ+sC,EAAArxC,YAAY+V,OACrCguC,EAAoBC,EAAWz7C,MAG9Bw7C,GACCpE,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACfH,EAAiB3sD,KAAKwD,MAAMomD,OAWpC,IAAKgD,EAAW,MAChB,IAAIG,EAAgB,IAAI7S,EAAAv7B,MACN9O,EAChB/C,EAAejH,EAAA/D,mBAAsC+N,EAAQ+D,WAC7Dg5C,EACAD,EACA37C,GAEF,OAAQ47C,EAAUhkC,UAChB,KAAK,EAAG,MACR,KAAK,EAAwB,EAAf/J,KAAoBA,EAAc,MAChD,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,QAAShc,QAAO,GAElBkqD,EAAcluC,aAAeA,EAC7BA,GAAgB+tC,EAAUhkC,SAC1B5X,EAASY,QAAQ/E,IAAIgD,EAAO+D,WAAYm5C,GACxC,MAIF,KAAK7S,EAAArxC,YAAYwI,mBACVL,EAASY,UAASZ,EAASY,QAAU,IAAI5I,KAC9C,IAAI2iD,EAAmBvsD,KAAKqsD,yBACP57C,EACnBkP,EACAypC,GAEF,IAAKmD,EAAkB,OAAO,KAC9BA,EAAiB7+C,aAAeA,EAAejH,EAAA/D,mBAAqB6pD,EAAiB/3C,WACrF5C,EAASY,QAAQ/E,IAAIgD,EAAO+D,WAAY+3C,GACxC,MAIF,KAAKzR,EAAArxC,YAAYyO,SACVtG,EAASY,UAASZ,EAASY,QAAU,IAAI5I,KAC9C,IAAIuO,EAAkB1U,OAAkBgN,EAAQ0H,iBAC5CC,EAA6B3H,EAAQ2H,gBACrCw1C,EAAmB,IAAI9S,EAAAziC,SACzBrY,KAAKya,QACLhK,EAAO+D,WACP9G,EAAejH,EAAA/D,mBAAqB+N,EAAO+D,WAC3CvS,GAEE4rD,EAAyB7tD,KAAKqsD,yBAChCl0C,EACAwH,EACAypC,GAEF,IAAKyE,EAAwB,OAAO,KAIpC,GAHAA,EACGngD,aAAeA,EAAejH,EAAA/D,mBAAqBmrD,EAAuBr5C,WAC7Eo5C,EAAiBz1C,gBAAkB01C,EAC/Bz1C,EAAiB,CACnB,IAAI01C,GAAyB9tD,KAAKqsD,yBAChCj0C,EACAuH,EACAypC,GAEF,IAAK0E,GAAwB,OAAO,KACpCA,GACGpgD,aAAeA,EAAejH,EAAA/D,mBAAqBorD,GAAuBt5C,WAC7Eo5C,EAAiBx1C,gBAAkB01C,GAErCl8C,EAASY,QAAQ/E,IAAIgD,EAAO+D,WAAYo5C,GACxC,MAEF,QAASnqD,QAAO,sGAMtBmO,EAASiO,oBAAsBJ,MAG/B,IAAsC,IAAAsuC,GAAAh+C,EAAA9N,EAAUwV,oBAAkBu2C,GAAAD,GAAA99C,QAAA+9C,GAAA99C,KAAA89C,GAAAD,GAAA99C,OAAE,CAA3D,IAAAg+C,GAAA79C,EAAA49C,GAAA1sD,MAAA,GAACyM,GAAAkgD,GAAA,GAAMC,GAAAD,GAAA,GACdxqD,OAAOsK,IAAQ+sC,EAAAt0C,aAAagD,SAC5B,IAAI2kD,QAAgB,EACpB,GAAID,GAAkBp7C,GAAGrM,EAAApE,YAAY6a,UAAW,CAC9C,IAAIkxC,GAAkBpuD,KAAKqsD,yBACzB6B,GACAvuC,EACAypC,GAEF,IAAKgF,GAAiB,SACtBD,GAAmBnuD,KAAKuS,gBAAgB67C,GAAiB,KAAM,KAAMhF,QAErE+E,GAAmBnuD,KAAKuS,gBAAgB27C,GAAmB,KAAM,KAAM9E,GAEzE,GAAK+E,GAAL,CACA,IAAI32C,GAAY5F,EAAS4F,UACpBA,KAAW5F,EAAS4F,UAAYA,GAAY,IAAI5N,KACrD4N,GAAU/J,IAAIM,GAAMogD,2GAEtB,OAAOv8C,GAIT3G,EAAAhJ,UAAAwnD,8BAAA,SACExnD,EACAynD,EACA5tC,EACA0wC,EACApD,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC,IAAIoD,EAAuC,KAG3C,GAAIxqD,EAAU6Q,GAAGrM,EAAApE,YAAY+P,SAAU,CACrC,IAAIi8C,EAAqBpsD,EAAUmN,YAAYiL,eAC3CsyC,EAAwB0B,EAAmB/oD,OAC/C7B,OAAOkpD,EAAwB,GAC/B,IAAIC,EAA4C,OAAtBlD,EAA6BA,EAAkBpkD,OAAS,EAClF,GAAIqnD,GAAyBC,EAO3B,OANIxD,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAeymD,oCACfiC,EAAWpoD,MAAOuoD,EAAsB9nD,SAAS,IAAK+nD,EAAoB/nD,SAAS,KAGhF,KAST,KAPA4nD,EAAwBzsD,KAAKmqD,qBAC3BkE,EACA3E,EACA5tC,EACA0wC,EACApD,IAE0B,OAAO,UAInC,GAA0B,OAAtBM,GAA8BA,EAAkBpkD,OAOlD,OANI8jD,GAAcJ,EAAWK,QAC3BrpD,KAAKuG,MACHG,EAAA5C,eAAe0lD,sBACfgD,EAAWpoD,MAAOnC,EAAUyL,cAGzB,KAKX,OAAO1N,KAAK6R,aACV5P,EACAwqD,EACA3wC,EACAstC,IAGNn+C,EA5kCA,CAA8BvE,EAAAT,mBAAjBvG,EAAAuL,0FC9Db,SAAYnH,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,yMACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HAlHF,CAAYpE,EAAAoE,iBAAApE,EAAAoE,oBAsHZpE,EAAAqE,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,qGACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,QAAS,MAAO,s4BC7OpB,IAgKY0qC,EAhKZ0f,EAAAnuD,EAAA,IAOAuG,EAAAvG,EAAA,GAKA0G,EAAA1G,EAAA,GAyBAsG,EAAAtG,EAAA,GAUA26C,EAAA36C,EAAA,GA4BAupB,EAAAvpB,EAAA,GAKAyG,EAAAzG,EAAA,GA+DAwG,EAAAxG,EAAA,GASA+C,EAAA/C,EAAA,IAQA,SAAYyuC,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAAlvC,EAAAkvC,SAAAlvC,EAAAkvC,YAQZ,IAAA2f,EAAA,oBAAAA,IAGEvuD,KAAAqgB,OAAiBuuB,EAAO4f,OAExBxuD,KAAA6M,eAAsB,EAEtB7M,KAAA8M,UAAiB,EAEjB9M,KAAAyuD,cAAqB,EAErBzuD,KAAA0uD,aAAoB,EAEpB1uD,KAAA6e,WAAkB,EAElB7e,KAAA+M,WAAkB,EAElB/M,KAAAqR,cAA2C,KAE3CrR,KAAA2uD,SAAQ,EAGR3uD,KAAAgN,kBAAyB,EAEzBhN,KAAAiN,gBAAuB,EA0BzB,OAvBElM,OAAAC,eAAIutD,EAAAtsD,UAAA,gBAAJ,WACE,OAAOjC,KAAKqgB,QAAUuuB,EAAOC,wCAI/B9tC,OAAAC,eAAIutD,EAAAtsD,UAAA,iBAAJ,WACE,OAAOjC,KAAKqgB,QAAUuuB,EAAOC,OAASloC,EAAAgF,KAAK4vC,QAAU50C,EAAAgF,KAAK6vC,yCAI5Dz6C,OAAAC,eAAIutD,EAAAtsD,UAAA,iBAAJ,WACE,OAAOjC,KAAKqgB,QAAUuuB,EAAOC,OAASloC,EAAAgF,KAAK0vC,QAAU10C,EAAAgF,KAAK2vC,yCAI5Dv6C,OAAAC,eAAIutD,EAAAtsD,UAAA,sBAAJ,WACE,OAAOjC,KAAKqgB,QAAUuuB,EAAOC,OAAQ,EAAiB,mCAIxD0f,EAAAtsD,UAAAiL,WAAA,SAAW0hD,GACT,OAAoC,IAA5B5uD,KAAK2uD,SAAWC,IAE5BL,EAlDA,GAAa7uD,EAAA6uD,UAqDb,SAAkBM,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCANF,CAAkBnvD,EAAAmvD,UAAAnvD,EAAAmvD,aAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkBpvD,EAAAovD,iBAAApvD,EAAAovD,oBAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,eAJF,CAAkBrvD,EAAAqvD,WAAArvD,EAAAqvD,cAQlB,IAotOIC,EACAC,EArtOJC,EAAA,SAAAplD,GA6CE,SAAAolD,EAAYz0C,EAAkB/O,QAAA,IAAAA,MAAA,MAA9B,IAAA3B,EACED,EAAAtJ,KAAAR,KAAMya,EAAQvU,cAAYlG,YAjC5B+J,EAAAolD,qBAAwC,KAExCplD,EAAAqlD,0BAEArlD,EAAAslD,YAA2B,KAE3BtlD,EAAAulD,YAAoB3oD,EAAAgF,KAAKc,KAQzB1C,EAAAwlD,kBAEAxlD,EAAAylD,eAA4C,IAAI5lD,IAEhDG,EAAA0lD,iBAEA1lD,EAAA2lD,QAAqB,EAErB3lD,EAAA4lD,QAAuB,EAEvB5lD,EAAA6lD,mBAA0B,EA80ElB7lD,EAAA8lD,eAAkC,KAClC9lD,EAAA+lD,eAAkC,KAClC/lD,EAAAgmD,eAAkC,KAClChmD,EAAAimD,eAAkC,KAv0ExCjmD,EAAK0Q,QAAUA,EACf1Q,EAAKiB,SAAWyP,EAAQzP,SACnBU,IAASA,EAAU,IAAI6iD,GAC5BxkD,EAAK2B,QAAUA,EACf3B,EAAK0V,aAAe9S,QAGlBsjD,IAAIvkD,EAAQqB,WAAY,IAE1BhD,EAAKpK,OAASkH,EAAAk+B,OAAOpjC,WAumOzB,OA/pO8BwJ,EAAA+jD,EAAAplD,GAwCrBolD,EAAAgB,QAAP,SAAez1C,EAAkB/O,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIwjD,EAASz0C,EAAS/O,GAASwkD,WAmBxChB,EAAAjtD,UAAAiuD,QAAA,mBACMxkD,EAAU1L,KAAK0L,QACf/L,EAASK,KAAKL,OACd8a,EAAUza,KAAKya,QAGnBA,EAAQhP,WAAWC,GAGnB,IAAIykD,EAAwB,IAAIrV,EAAAj/B,SAASpB,EAAQvI,cAAe,QAAS,IAAIvL,EAAAi2C,aAAcj2C,EAAAgF,KAAKc,OAChGzM,KAAKmwD,sBAAwBA,EAC7B,IAAIC,EAAoB,IAAIjqD,MAC5BnG,KAAKowD,kBAAoBA,EACzBpwD,KAAK+gB,gBAAkBovC,EAIvB,IADA,IAAIjlD,EAAUuP,EAAQvP,QACb7K,EAAI,EAAGgL,EAAIH,EAAQ5F,OAAQjF,EAAIgL,IAAKhL,EACvC6K,EAAQ7K,GAAG8U,SAASnV,KAAKqwD,cAAcnlD,EAAQ7K,IAIrD,GAAI+vD,EAAkB9qD,QAAmC,OAAzBmV,EAAQhQ,aAAuB,CAC7D,IAAIgI,EAAY09C,EAAsB19C,UAClC69C,EAAU3wD,EAAOssC,YACnBkkB,EAAsBziD,aACtB1N,KAAKuwD,mBACH99C,EAAUC,eACVD,EAAUG,WACVH,EAAU2K,UAEZzW,EAAA61C,mBAAmB2T,EAAsBj0C,kBACzCvc,EAAOoqC,YAAY,KAAMqmB,IAE3BD,EAAsBvxC,SAASjf,EAAQ2wD,GAClC71C,EAAQhQ,cAAc9K,EAAO4vC,SAAS+gB,GAI7C,IAAI7wC,EAAezf,KAAKyf,aACxBA,EAAe+wC,UAAU/wC,EAAc/T,EAAQW,UAAUmd,UACzDxpB,KAAKyf,aAAeA,EAChB/T,EAAQkB,SACVjN,EAAOmsC,UACL,YAAW,GAEX,EACAnsC,EAAOinC,UAAUkI,QAAQrvB,GAAesvB,SAAStvB,KAGnD9f,EAAOmsC,UACL,YAAW,GAEX,EACAnsC,EAAO6mC,UAAUsI,QAAQrvB,KAK7B,IAAIgxC,EAAWzwD,KAAKuvD,eAAejqD,OAC/BwpC,QAAQ4hB,UAAUF,UAAU/wC,EAAc,OAAU9S,QAAQ,GAAI,KAChE,EACJhN,EAAO0uC,UACLoiB,EACAzwD,KAAK0L,QAAQkB,SACT/F,EAAAk+B,OAAO8P,kBACPhuC,EAAAk+B,OAAO6P,kBACX50C,KAAKuvD,eACL7jD,EAAQ2U,OACR,UAIE3U,EAAQ+iD,cAAc9uD,EAAOmuC,gBAAgB,IAAK,MAAO,UAG7D,IAAI2hB,EAAgBzvD,KAAKyvD,cAErBkB,GAAwB,EADJlB,EAAcnqD,SAGpC3F,EAAOyvC,iBAAiBqgB,GACxB9vD,EAAOmtC,eAAe,IAAK,SAC3B6jB,GAAwB,GAItBjlD,EAAQgjD,cACV/uD,EAAOiuC,eAAe,IAAK,MAAO,SAC7B+iB,GAAuBhxD,EAAOmtC,eAAe,IAAK,cAIzD,IAAiC,IAAAtvB,EAAAzN,EAAA0K,EAAQnQ,oBAAkB6F,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAApD,IAAAuB,EAAApB,EAAAD,EAAA7O,MAAA,GAACV,EAAA4Q,EAAA,GAAMo/C,EAAAp/C,EAAA,GACdxR,KAAK6wD,iBAAiBjwD,EAAMgwD,EAAavhD,2GAM3C,OAFIrP,KAAK4vD,mBAAmBtB,EAAAwC,oBAAoB9wD,MAEzCL,GAIDuvD,EAAAjtD,UAAA4uD,iBAAR,SAAyBjwD,EAAcyO,EAAkB8J,4BAAA,IAAAA,MAAA,IAGvD,IAAI3G,EAAUnD,EAAQmD,QACtB,GAAIA,EAAS,CACX,IAAIu+C,EAAY53C,EAASvY,GAAQyO,EAAQtB,MAAQ+sC,EAAArxC,YAAYwT,MACzDxW,EAAA/D,mBACA+D,EAAA9D,kBAEJ,GAAI0M,EAAQtB,MAAQ+sC,EAAArxC,YAAYkR,cAC9B,IAAmB,IAAA+xC,EAAA38C,EAAAyC,EAAQoG,UAAQq0C,EAAAP,EAAAz8C,QAAAg9C,EAAA/8C,KAAA+8C,EAAAP,EAAAz8C,OAAE,EAA5BQ,EAAMw8C,EAAA3rD,OACDwR,GAAGrM,EAAApE,YAAYgM,SAC3BrO,KAAK6wD,iBAAiBpgD,EAAO+D,WAAY/D,EAAQsgD,8GAGnD,IAAmB,IAAA7D,EAAAn9C,EAAAyC,EAAQoG,UAAQy0C,EAAAH,EAAAj9C,QAAAo9C,EAAAn9C,KAAAm9C,EAAAH,EAAAj9C,OAAE,CAAhC,IAAIQ,KAAM48C,EAAA/rD,OACFwR,GAAGrM,EAAApE,YAAYs9C,UAC1B3/C,KAAK6wD,iBAAiBpgD,EAAO+D,WAAY/D,EAAQsgD,sGAKvD,OAAQ1hD,EAAQtB,MAGd,KAAK+sC,EAAArxC,YAAY2K,OAEf,GADc/E,EAAQyD,GAAGrM,EAAApE,YAAYkY,QAAUlL,EAAQyD,GAAGrM,EAAApE,YAAY6T,OAASzP,EAAApE,YAAYgU,WAC1ErW,KAAK0L,QAAQwB,WAAU,GAStClN,KAAKL,OAAOutC,gBAAgB79B,EAAQ3B,aAAcyL,EAASvY,QARvDwO,EAAuBC,EAASD,cAElCpP,KAAKuG,MACHG,EAAA5C,eAAektD,+BACf5hD,EAAYxO,KAAKwD,OAMvB,MAEF,KAAK02C,EAAArxC,YAAYoR,UAEb,IAAIzL,EADN,GAAK3L,OAAO4L,EAAQO,QAAQkD,GAAGrM,EAAApE,YAAYkY,QAAWva,KAAK0L,QAAQwB,WAAU,GAS3ElN,KAAKL,OAAOutC,gBAAgB79B,EAAQ3B,aAAcyL,EAASvY,QARvDwO,EAA0BC,EAASD,cAErCpP,KAAKuG,MACHG,EAAA5C,eAAektD,+BACf5hD,EAAYxO,KAAKwD,OAMvB,MAIF,KAAK02C,EAAArxC,YAAYsS,SACf,IACItJ,GADAb,EAAqBvC,GACAoD,UACrBA,EAAUsqC,mBAAqBtqC,EAAUC,eAAepN,SAE1DsM,EAAW5R,KAAKixD,iBAAiBr/C,GACjC5R,KAAKkxD,iBAEHt/C,EAASkB,GAAGrM,EAAApE,YAAY8uD,WAAWnxD,KAAKL,OAAO+sC,kBAAkB96B,EAASlE,aAAcyL,EAASvY,GACrG,MAIF,KAAKk6C,EAAArxC,YAAYyO,SACf,IAAIrX,EAAS4C,OAAkB4L,EAAS8I,iBACxCnY,KAAK6wD,iBAAiBpqD,EAAAjE,cAAgB5B,EAAMC,EAAQsY,GACpD,IAAIi4C,EAAoB/hD,EAAS+I,gBAC7Bg5C,GAAQpxD,KAAK6wD,iBAAiBpqD,EAAAhE,cAAgB7B,EAAMwwD,EAAQj4C,GAChE,MAIF,KAAK2hC,EAAArxC,YAAY+V,MACf,IAAI7f,EAASK,KAAKL,OACdqS,EAAe3C,EAAS2C,KACxBq/C,EAAar/C,EAAKoM,eAClBymB,EAAiBx1B,EAASoQ,aAC1BpT,EAAYrM,KAAK0L,QAAQW,UACzBilD,EAAiBtxD,KAAK0L,QAAQ4lD,eAG9BC,EAAap4C,EAAS1S,EAAAjE,cAAgB5B,EAgB1C,GAfAjB,EAAOssC,YACLslB,EACAvxD,KAAKuwD,mBAAmB,KAAMv+C,EAAM3F,GACpC,KACA1M,EAAOwoC,WACLn2B,EAAKwX,SACLxX,EAAKc,GAAE,GACPnT,EAAOkoC,eAAe,EAAGypB,GACzBD,EACAxsB,IAGJllC,EAAO+sC,kBAAkB6kB,EAAYA,IAGhCliD,EAAQyD,GAAGrM,EAAApE,YAAYgU,UAAW,CACrC,IAAIm7C,EAAar4C,EAAS1S,EAAAhE,cAAgB7B,EAC1CjB,EAAOssC,YACLulB,EACAxxD,KAAKuwD,oBAAqBv+C,GAAQrL,EAAAgF,KAAKc,KAAMJ,GAC7C,KACA1M,EAAO6oC,YACLx2B,EAAKwX,SACL7pB,EAAOkoC,eAAe,EAAGypB,GACzB3xD,EAAOkoC,eAAe,EAAGwpB,GACzBA,EACAxsB,IAGJllC,EAAO+sC,kBAAkB8kB,EAAYA,GAEvC,MAIF,KAAK1W,EAAArxC,YAAYwI,uBACf,IAAqB,IAAAq7C,EAAAv9C,EAAoBV,EAASsM,UAAU/C,UAAQm1C,EAAAT,EAAAr9C,QAAA89C,EAAA79C,KAAA69C,EAAAT,EAAAr9C,OAAE,CAAjE,IACCwI,EAAe7X,EACnB,IAFOgR,EAAQm8C,EAAAzsD,OAEFwR,GAAGrM,EAAApE,YAAY+P,SAE1BqG,IADIg5C,EAAW7/C,EAASlE,cACC9H,UAAU6rD,EAASz5B,YAAY,MAE1Dh4B,KAAK6wD,iBAAiBp4C,EAAc7G,EAAUuH,qGAEhD,MAEF,KAAK2hC,EAAArxC,YAAYyH,oBACf,IAAqB,IAAA88C,EAAAj+C,EAAiBV,EAASsM,UAAU/C,UAAQq1C,EAAAD,EAAA/9C,QAAAg+C,EAAA/9C,KAAA+9C,EAAAD,EAAA/9C,OAAE,CAA9D,IAAI2B,EAGD6/C,EAFFh5C,EAAe7X,EACnB,IAFOgR,EAAQq8C,EAAA3sD,OAEFwR,GAAGrM,EAAApE,YAAY+P,SAE1BqG,IADIg5C,EAAW7/C,EAASlE,cACC9H,UAAU6rD,EAASz5B,YAAY,MAE1D,IAAI05B,EAAO9/C,EAASkO,oBAChB4xC,GAAM1xD,KAAK6wD,iBAAiBp4C,EAAehS,EAAA/D,mBAAqBgvD,EAAKl9C,WAAYk9C,EAAMv4C,GAC3FnZ,KAAK6wD,iBAAiBp4C,EAAc7G,EAAUuH,qGAEhD,MAIF,KAAK2hC,EAAArxC,YAAYmR,KACjB,KAAKkgC,EAAArxC,YAAYwT,MACjB,KAAK69B,EAAArxC,YAAYkR,UAAW,MAE5B,QAASlX,QAAO,KAOpByrD,EAAAjtD,UAAA0vD,oBAAA,SAAoBpmD,EAAwCihD,GAC1D,IAAI1nD,EAAS9E,KAAKya,QAAQnP,mBAAmBC,GACzCzG,EAAQ9E,KAAKqwD,cAAcvrD,GAE7B9E,KAAKuG,MACHG,EAAA5C,eAAe8tD,iBACfpF,EAAWpoD,MAAOmH,IAMxB2jD,EAAAjtD,UAAAouD,cAAA,SAAcvrD,GACZ,IAAIA,EAAOgO,GAAGrM,EAAApE,YAAY8uD,UAA1B,CACArsD,EAAO2I,IAAIhH,EAAApE,YAAY8uD,UAQvB,IALA,IAAItkD,EAAgB7M,KAAK0L,QAAQmB,cAC7BsI,EAAUrQ,EAAOqQ,QACjBg7C,EAAwBnwD,KAAKmwD,sBAC7BC,EAAoBpwD,KAAKowD,kBACzBxiD,EAAa9I,EAAO8I,WACfvN,EAAI,EAAGgL,EAAIuC,EAAWtI,OAAQjF,EAAIgL,IAAKhL,EAAG,CACjD,IAAIyN,EAAYF,EAAWvN,GAC3B,OAAQyN,EAAUC,MAChB,KAAKnH,EAAAoH,SAASC,kBAETpB,GAAkBsI,GAAWrH,EAAUgF,GAAGrM,EAAApE,YAAYgM,WACnCP,EAAW+jD,WAE/B7xD,KAAK8xD,wBAA0ChkD,KAAe,MAEhE,MAEF,KAAKlH,EAAAoH,SAASW,qBAAsB,MACpC,KAAK/H,EAAAoH,SAASG,iBACRtB,GAAkBsI,GAAWrH,EAAUgF,GAAGrM,EAAApE,YAAYgM,UACxDrO,KAAK+xD,uBAAwCjkD,GAE/C,MAEF,KAAKlH,EAAAoH,SAASO,qBAET1B,GAAkBsI,GAAWrH,EAAUgF,GAAGrM,EAAApE,YAAYgM,WAChCP,EAAW+jD,WAElC7xD,KAAKgyD,2BAAgDlkD,MAEvD,MAEF,KAAKlH,EAAAoH,SAASS,OACZzO,KAAK2xD,oBACe7jD,EAAW/I,eACX+I,EAAW+B,MAE/B,MAEF,KAAKjJ,EAAAoH,SAASa,sBACRhC,GAAkBsI,GAAWrH,EAAUgF,GAAGrM,EAAApE,YAAYgM,UACxDrO,KAAKiyD,4BAAkDnkD,GAEzD,MAEF,KAAKlH,EAAAoH,SAASiB,SACZ,IAAIijD,EAAelyD,KAAKmyD,yBAA4CrkD,GAChEokD,GAAc9B,EAAkBvqD,KAAKqsD,GACzC,MAEF,KAAKtrD,EAAAoH,SAASK,OACuC,MAA7BP,EAAW/I,gBAC/B/E,KAAK2xD,oBACuB7jD,EAAW/I,eACM+I,EAAW+B,OAGtDhD,GAAiBsI,IACnBnV,KAAKoyD,uBAAwCtkD,GAE/C,MAEF,QACE,IAAIukD,EAAmBryD,KAAK+gB,gBAC5B/gB,KAAK+gB,gBAAkBovC,EACvBC,EAAkBvqD,KAAK7F,KAAKsyD,iBAAiBxkD,IAC7C9N,KAAK+gB,gBAAkBsxC,MAS/BnD,EAAAjtD,UAAAswD,yBAAA,SAAyBnjD,GAEvB,IAAIC,EAAU5L,OAAOzD,KAAKya,QAAQxQ,eAAe/I,IAAIkO,EAAYmF,wBAEjE,OADA9Q,OAAO4L,EAAQtB,MAAQ+sC,EAAArxC,YAAY2K,QAC9BpU,KAAKwyD,cAAsBnjD,GACjBA,EADkC,MAInD6/C,EAAAjtD,UAAAuwD,cAAA,SAAcC,GACZ,GAAIA,EAAO3/C,GAAGrM,EAAApE,YAAY8uD,UAAW,OAAO,EAC5CsB,EAAOhlD,IAAIhH,EAAApE,YAAY8uD,UAEvB,IAAIxxD,EAASK,KAAKL,OACdyP,EAAcqjD,EAAOrjD,YACrBsjD,EAA0B,EAE9B,GAAID,EAAOzgD,MAAQrL,EAAAgF,KAAKc,KACtB,GAAI2C,EAGF,GAAIA,EAAY4C,KAAM,CACpB,IAAI2gD,EAAe3yD,KAAKgL,SAASm+C,YAAY/5C,EAAY4C,MACzD,IAAK2gD,EAAc,OAAO,EAC1B,GAAIA,GAAgBhsD,EAAAgF,KAAKc,KAKvB,OAJAzM,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACft+C,EAAY4C,KAAK5N,QAEZ,EAETquD,EAAOzgD,KAAO2gD,MAGT,KAAIvjD,EAAYkM,YAqBrB,OAJAtb,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACft+C,EAAYxO,KAAKwD,MAAMomD,QAElB,EAfP,GALAkI,EAAW1yD,KAAK4yD,4BACdxjD,EAAYkM,YACZ3U,EAAAgF,KAAKc,KAAI,GAGPzM,KAAKsvD,aAAe3oD,EAAAgF,KAAKc,KAK3B,OAJAzM,KAAKuG,MACHG,EAAA5C,eAAe+uD,mCACfzjD,EAAYkM,YAAYlX,MAAOpE,KAAKsvD,YAAYzqD,WAAY,WAEvD,EAET4tD,EAAOzgD,KAAOhS,KAAKsvD,iBAWrB7rD,QAAO,GAKX,GAAIgvD,EAAO3/C,GAAGrM,EAAApE,YAAYgQ,UAAYogD,EAAOt+C,aAAa2mC,EAAApxC,eAAemK,SAAU,OAAO,EAE1F,IAAIw9C,EAAaoB,EAAOzgD,KAAKoM,eACzB00C,EAAqBL,EAAO3/C,GAAGrM,EAAApE,YAAYkY,QAAUk4C,EAAO3/C,GAAGrM,EAAApE,YAAY6T,OAASzP,EAAApE,YAAYgU,UAGpG,GAAIo8C,EAAO3/C,GAAGrM,EAAApE,YAAYgQ,SAGxB,OAAIygD,GAAsB9yD,KAAK0L,QAAQwB,WAAU,IAC/CulD,EAAOhlD,IAAIhH,EAAApE,YAAY0wD,eACnB3jD,EACF4jD,EAAiBP,EAAQrjD,EAAaqjD,EAAO7iD,SAE7Co/C,EAA8B,MAC9BC,EAA+BwD,EAAOj+C,YAExC7U,EAAOquC,gBACLykB,EAAO/kD,aACPshD,EACAC,EACAoC,GAEFoB,EAAOhlD,IAAIhH,EAAApE,YAAY8uD,WAChB,IAIPnxD,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfvR,OAAO2L,GAAahL,QAGjB,GAKT,IAAI6uD,GAAoB,EAGxB,GAAoB,OAAhB7jD,GAAoD,OAA5BA,EAAYkM,aA0BtC,GAzBKo3C,IACHA,EAAW1yD,KAAKkzD,kBACd9jD,EAAYkM,YACZm3C,EAAOzgD,KAAI,MAMXnL,EAAA8c,gBAAgB+uC,IAAa7rD,EAAA+c,aAAa6C,QACxCqsC,GACFJ,EAAW/yD,EAAOkxC,qBAAqB6hB,GACnC7rD,EAAA8c,gBAAgB+uC,IAAa7rD,EAAA+c,aAAa6C,QAC5CzmB,KAAKsG,QACHI,EAAA5C,eAAeqvD,4DACf/jD,EAAYhL,OAEd6uD,GAAoB,IAGtBA,GAAoB,GAKpBR,EAAOt+C,aAAa2mC,EAAApxC,eAAe0M,UAChC68C,EAAmB,CAGtB,OAFAxvD,OAAOoD,EAAA8c,gBAAgB+uC,IAAa7rD,EAAA+c,aAAa6C,OAClC5f,EAAAihB,kBAAkB4qC,IAE/B,OACED,EAAOx3C,kBAAiB,EACxBw3C,EAAOv3C,qBAAuBvO,QAAQ9F,EAAA6f,iBAAiBgsC,GAAW,GAClE,MAEF,OACED,EAAOx3C,kBAAiB,EACxBw3C,EAAOv3C,qBAAuBvO,QAC5B9F,EAAAkhB,oBAAoB2qC,GACpB7rD,EAAAiuC,qBAAqB4d,IAEvB,MAEF,OACED,EAAOx3C,kBAAiB,EACxBw3C,EAAOr3C,mBAAqBvU,EAAAmhB,iBAAiB0qC,GAC7C,MAEF,OACED,EAAOx3C,kBAAiB,EACxBw3C,EAAOr3C,mBAAqBvU,EAAAohB,iBAAiByqC,GAC7C,MAEF,QAEE,OADAjvD,QAAO,IACA,EAGXgvD,EAAOhlD,IAAIhH,EAAApE,YAAY8Y,eAM3Bu3C,EAAWD,EAAOzgD,KAAKqqC,aAAa18C,GAGtC,IAAI+N,EAAe+kD,EAAO/kD,aAS1B,OAPIulD,GACFtzD,EAAOmsC,UAAUp+B,EAAc2jD,GAAY,EAAMoB,EAAOzgD,KAAKqqC,aAAa18C,IAC1EK,KAAKowD,kBAAkBvqD,KAAKlG,EAAOkqC,gBAAgBn8B,EAAcglD,KAGjE/yD,EAAOmsC,UAAUp+B,EAAc2jD,GAAayB,EAAoBJ,IAE3D,GAKTxD,EAAAjtD,UAAA8vD,uBAAA,SAAuB3iD,GACrB,IAAIC,EAAU5L,OAAOzD,KAAKya,QAAQxQ,eAAe/I,IAAIkO,EAAYmF,wBAEjE,OADA9Q,OAAO4L,EAAQtB,MAAQ+sC,EAAArxC,YAAYmR,MAC9B5a,KAAKozD,YAAkB/jD,GACfA,EADgC,MAI/C6/C,EAAAjtD,UAAAmxD,YAAA,SAAY/jD,WACV,GAAIA,EAAQyD,GAAGrM,EAAApE,YAAY8uD,UAAW,OAAO,EAC7C9hD,EAAQ5B,IAAIhH,EAAApE,YAAY8uD,UAExB,IAAIxxD,EAASK,KAAKL,OAClBK,KAAKqvD,YAAchgD,EACnB,IAAIgkD,EAAkC,KAClCC,GAAqB,EAEzB,GAAIjkD,EAAQmD,YACV,IAAmB,IAAAgL,EAAAzN,EAAAV,EAAQmD,QAAQoG,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAAxC,IAAIQ,EAAMN,EAAA7O,MACb,GAAImP,EAAO1C,MAAQ+sC,EAAArxC,YAAYoR,UAA/B,CACA,IAAI04C,GAAc,EACd1Z,EAAiBppC,EACjB+iD,EAAmB3Z,EAAIzqC,YAC3ByqC,EAAIpsC,IAAIhH,EAAApE,YAAY8uD,UACpB,IAAIuB,OAAQ,EACRc,EAAiBlyD,OACnBoxD,EAAW1yD,KAAKkzD,kBACFM,EAAiBlyD,MAC7BqF,EAAAgF,KAAKG,IAAG,KAINjF,EAAA8c,gBAAgB+uC,IAAa7rD,EAAA+c,aAAa6C,QACxCpX,EAAQyD,GAAGrM,EAAApE,YAAYkY,QACzBm4C,EAAW/yD,EAAOkxC,qBAAqB6hB,GACnC7rD,EAAA8c,gBAAgB+uC,IAAa7rD,EAAA+c,aAAa6C,QAC5CzmB,KAAKuG,MACHG,EAAA5C,eAAe2vD,0EACfD,EAAiBlyD,MAAM8C,OAEzBmvD,GAAc,IAGhBA,GAAc,IAGQ,MAAjBF,EACTX,EAAW/yD,EAAO6mC,UAAU,IAExB8sB,GACFtzD,KAAKuG,MACHG,EAAA5C,eAAe4vD,kCACfF,EAAiBpvD,OAGrBsuD,EAAW/yD,EAAO4nC,aAAa1gC,EAAAyd,SAASqvC,OACtCh0D,EAAOsoC,gBAAgBorB,EAAc3lD,aAAY,GACjD/N,EAAO6mC,UAAU,IAEnBksB,EAAW/yD,EAAOkxC,qBAAqB6hB,GACnC7rD,EAAA8c,gBAAgB+uC,IAAa7rD,EAAA+c,aAAa6C,QACxCpX,EAAQyD,GAAGrM,EAAApE,YAAYkY,QACzBva,KAAKuG,MACHG,EAAA5C,eAAe2vD,0EACfD,EAAiBpvD,OAGrBmvD,GAAc,IAGdA,GACF5zD,EAAOmsC,UAAU+N,EAAInsC,aAAY,GAAkB,EAAM/N,EAAO6mC,UAAU,IAC1ExmC,KAAKowD,kBAAkBvqD,KAAKlG,EAAOkqC,gBAAgBgQ,EAAInsC,aAAcglD,IACrEY,GAAqB,IAErB3zD,EAAOmsC,UAAU+N,EAAInsC,aAAY,GAAmB2B,EAAQyD,GAAGrM,EAAApE,YAAYkY,OAAQm4C,GACnFY,GAAqB,GAEvBD,EAA2BxZ,qGAI/B,OADA75C,KAAKqvD,YAAc,MACZ,GAMTH,EAAAjtD,UAAA+vD,2BAAA,SACE5iD,EACAuQ,EACA7D,QAAA,IAAAA,MAAA,MAEA,IAAIzM,EAAU5L,OAAOzD,KAAKya,QAAQxQ,eAAe/I,IAAIkO,EAAYmF,wBAEjE,OADA9Q,OAAO4L,EAAQtB,MAAQ+sC,EAAArxC,YAAYwI,oBAC5BjS,KAAK4zD,kCACSvkD,EACnBsQ,EACA7D,EACA,KACoBzM,EAASD,YAAYxO,OAK7CsuD,EAAAjtD,UAAA2xD,kCAAA,SACE3xD,EACA0d,EACA7D,EACAU,EACAgwC,GAEA,IAAI56C,EAAW5R,KAAKgL,SAASwgD,iCAC3BvpD,EACA0d,EACA7D,EACA0wC,GAEF,OAAK56C,GACLA,EAAS4K,WAAaA,EACjBxc,KAAK6zD,gBAAgBjiD,GACnBA,EADqC,MAFtB,MAOxBs9C,EAAAjtD,UAAAsuD,mBAAA,SACE79C,EACAE,EACAwK,QAAA,IAAAA,MAAA,MAEA,IACI2oB,EADAuX,EAAgB5qC,EAAiBA,EAAepN,OAAS,EAEzDkW,EAAQ,EAQZ,GAPI4B,IACF2oB,EAAa,IAAI5/B,MAAM,EAAIm3C,IAChB,GAAKlgC,EAASgB,eACzB5C,EAAQ,GAERuqB,EAAa,IAAI5/B,MAAMm3C,GAErB5qC,EACF,IAAK,IAAIrS,EAAI,EAAGA,EAAIi9C,IAAiBj9C,IAAKmb,EACxCuqB,EAAWvqB,GAAS9I,EAAerS,GAAG+d,eAG1C,IAAI01C,EAAalhD,EAAWwL,eACxBze,EAASK,KAAKL,OACd6sC,EAAU7sC,EAAOymC,2BAA2B0tB,EAAY/tB,GAC5D,IAAKyG,EAAS,CACZ,IAAI5rC,EAAO+F,EAAAi2C,UAAUe,oBAAoBjrC,EAAgBE,EAAYwK,GACrEovB,EAAU7sC,EAAOkmC,gBAAgBjlC,EAAMkzD,EAAY/tB,GAErD,OAAOyG,GAIT0iB,EAAAjtD,UAAA4xD,gBAAA,SAAgBjiD,GACd,GAAIA,EAASkB,GAAGrM,EAAApE,YAAY8uD,UAAW,OAAO,EAC9C1tD,SAASmO,EAASkB,GAAGrM,EAAApE,YAAYgQ,UAAYT,EAASuC,aAAa2mC,EAAApxC,eAAemK,WAClFjC,EAASnE,IAAIhH,EAAApE,YAAY8uD,UAGzB,IAkBI90C,EAlBAjN,EAAcwC,EAAS3P,UAAUmN,YACjCmkB,EAAOnkB,EAAYmkB,KACnBA,EACE3hB,EAASkB,GAAGrM,EAAApE,YAAYgQ,UAC1BrS,KAAKuG,MACHG,EAAA5C,eAAeiwD,yDACf3kD,EAAYxO,KAAKwD,OAIhBwN,EAASkB,GAAGrM,EAAApE,YAAYgQ,UAC3BrS,KAAKuG,MACHG,EAAA5C,eAAekwD,gFACf5kD,EAAYxO,KAAKwD,OAMvB,IAAIqO,EAAYb,EAASa,UACrB+5B,EAAUxsC,KAAKuwD,mBAAmB99C,EAAUC,eAAgBD,EAAUG,WAAYH,EAAU2K,UAC5Fzd,EAASK,KAAKL,OAClB,GAAI4zB,EAAM,CACR,IAAI0gC,EAAgBriD,EAASkB,GAAGrM,EAAApE,YAAYuU,aACxChE,EAAahB,EAASa,UAAUG,WAGhCy/C,EAAmBryD,KAAK+gB,gBAC5B/gB,KAAK+gB,gBAAkBnP,EACvB,IAAIkM,EAAOlM,EAASkM,KAChB4N,OAAI,EACR,GAAI6H,EAAKxlB,MAAQnH,EAAAoH,SAASkrB,WACxBz1B,QAAQmO,EAASO,MAAM1L,EAAApE,YAAYuU,YAAcnQ,EAAApE,YAAYsT,IAAMlP,EAAApE,YAAYuT,IAAMnP,EAAApE,YAAYiQ,OACjG7O,OAAOmO,EAASkB,GAAGrM,EAAApE,YAAY6rB,QAC/BxC,EAAO1rB,KAAKkzD,kBACY3/B,EAAM7G,WAC5B9Z,EAAU,KAIZkL,EAAKrQ,IAAG,GACHqQ,EAAK0F,YAAYkI,EAAM9Y,IAAakL,EAAKrQ,IAAG,GACjDqQ,EAAKc,eACA,CACLnb,OAAO8vB,EAAKxlB,MAAQnH,EAAAoH,SAASwpB,OAC7B,IAAI08B,EAAQl0D,KAAKm0D,kBAAmC5gC,EAAM3lB,YAiB1D,GAhBIgE,EAASkB,GAAGrM,EAAApE,YAAYiQ,QAC1B3S,EAAOmsC,UAAU,WAAU,GAAkB,EAAMnsC,EAAO6mC,UAAU,IACpE0tB,EAAME,QACJz0D,EAAO6qC,SACL7qC,EAAOynC,YACLvgC,EAAA2gB,QAAQC,OACR9nB,EAAOsoC,gBAAgB,WAAU,IAEnCtoC,EAAOoqC,YAAY,MACjBpqC,EAAO0rC,WAAW,QAAS,KAAI,GAC/B1rC,EAAOkqC,gBAAgB,WAAYlqC,EAAO6mC,UAAU,SAK5D1oB,EAAKc,WACDq1C,EAAe,CACjB,IAAI3C,EAAiBtxD,KAAK0L,QAAQ4lD,eAIlC,GAHA7tD,OAAOmO,EAASkB,GAAGrM,EAAApE,YAAY6a,YAG1BY,EAAKhL,GAAE,GAGV,GAAIgL,EAAKhL,GAAE,IACTohD,EAAMruD,KAAKlG,EAAOkoC,eAAe,EAAGypB,QAG/B,CACL,IAAI1hD,EAASnM,OAAOmO,EAAShC,QAC7BnM,OAAOmM,EAAO7B,MAAQ+sC,EAAArxC,YAAYwT,OAClCi3C,EAAMruD,KAAKlG,EAAOooC,eAAe,EAC/B/nC,KAAKq0D,wBAA+BzkD,EAAQR,EAAYxO,cAMrDgS,GAAcjM,EAAAgF,KAAKc,MAASqR,EAAKhL,GAAE,IAC5C9S,KAAKuG,MACHG,EAAA5C,eAAewwD,+DACfllD,EAAYqD,UAAUG,WAAWxO,OAGrCsnB,EAAQwoC,EAAM5uD,OAEM,GAAhB4uD,EAAM5uD,OACJ4uD,EAAM,GACNv0D,EAAOoqC,YAAY,KAAMmqB,EAAOthD,EAAWwL,gBAH7Cze,EAAO+qC,YAgBb,GAXA1qC,KAAK+gB,gBAAkBsxC,EAGvBh2C,EAAM1c,EAAOssC,YACXr6B,EAASlE,aACT8+B,EACA7lC,EAAA61C,mBAAmB5qC,EAASsK,kBAC5BwP,GAIE9Z,EAASuC,aAAa2mC,EAAApxC,eAAegQ,UAAW,CAClD,IAAIjG,EAAYhQ,OAAOmD,EAAA0P,cAAc1P,EAAAS,cAAcqS,SAAUtK,EAAYkE,aACzEtT,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfvB,EAAUrP,aAKdwN,EAASnE,IAAIhH,EAAApE,YAAY0wD,eACzBC,EAAiBphD,EAAUxC,EAAawC,EAAS3P,UAAU2N,QAG3DyM,EAAM1c,EAAO2tC,kBACX17B,EAASlE,aACTshD,EACAC,EACAziB,GAKJ,OADA56B,EAASgN,SAASjf,EAAQ0c,IACnB,GAKT6yC,EAAAjtD,UAAAgwD,4BAAA,SAA4B7iD,GAG1B,IAFA,IAAIoD,EAAUpD,EAAYoD,QACtB3F,EAAgB7M,KAAK0L,QAAQmB,cACxBxM,EAAI,EAAGgL,EAAImH,EAAQlN,OAAQjF,EAAIgL,IAAKhL,EAAG,CAC9C,IAAIoQ,EAAS+B,EAAQnS,GACrB,OAAQoQ,EAAO1C,MACb,KAAKnH,EAAAoH,SAASC,kBAETpB,IAAiB4D,EAAOqC,GAAGrM,EAAApE,YAAYgM,SACpBoC,EAAQohD,WAE5B7xD,KAAK8xD,wBAA0CrhD,MAEjD,MAEF,KAAK7J,EAAAoH,SAASW,sBAET9B,IAAiB4D,EAAOqC,GAAGrM,EAAApE,YAAYgM,SAChBoC,EAAQohD,WAEhC7xD,KAAKu0D,4BAAkD9jD,MAEzD,MAEF,KAAK7J,EAAAoH,SAASG,iBACRtB,GAAiB4D,EAAOqC,GAAGrM,EAAApE,YAAYgM,UACzCrO,KAAK+xD,uBAAwCthD,GAE/C,MAEF,KAAK7J,EAAAoH,SAASO,qBAET1B,IAAiB4D,EAAOqC,GAAGrM,EAAApE,YAAYgM,SACjBoC,EAAQohD,WAE/B7xD,KAAKgyD,2BAAgDvhD,MAEvD,MAEF,KAAK7J,EAAAoH,SAASa,sBACRhC,GAAiB4D,EAAOqC,GAAGrM,EAAApE,YAAYgM,UACzCrO,KAAKiyD,4BAAkDxhD,GAEzD,MAEF,KAAK7J,EAAAoH,SAASiB,SACZ,GAAIpC,GAAiB4D,EAAOqC,GAAGrM,EAAApE,YAAYgM,QAAS,CAClD,IAAI6jD,EAAelyD,KAAKmyD,yBAA4C1hD,GAAQ,GACxEyhD,GAAclyD,KAAKowD,kBAAkBvqD,KAAKqsD,GAEhD,MAEF,QAASzuD,QAAO,MAKtByrD,EAAAjtD,UAAAuyD,iBAAA,SAAiB9yD,WACf,GAAKA,EAAG8Q,QAAR,CAEA,IAAI3F,EAAgB7M,KAAK0L,QAAQmB,kBACjC,IAAoB,IAAA2Q,EAAAzN,EAAArO,EAAG8Q,QAAQoG,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAApC,IAAIZ,EAAOc,EAAA7O,MACd,OAAQ+N,EAAQtB,MACd,KAAK+sC,EAAArxC,YAAYyH,iBAGXrE,IACiBwC,EAASyD,GAAGrM,EAAApE,YAAYgM,SACpBgB,EAASyD,GAAGrM,EAAApE,YAAY+P,UAE/CpS,KAAKy0D,+BAA+CplD,MAEtD,MAEF,KAAKyrC,EAAArxC,YAAYmR,KACf5a,KAAKozD,YAAkB/jD,GACvB,MAEF,KAAKyrC,EAAArxC,YAAYwI,mBACf,IAEIpF,GAAqCwC,EAASyD,GAAGrM,EAAApE,YAAYgM,WACrCgB,EAASyD,GAAGrM,EAAApE,YAAY+P,SAClD,CACA,GAAI/C,EAAQ8E,aAAa2mC,EAAApxC,eAAemK,SAAU,MAClD7T,KAAK4zD,kCACgBvkD,KAEnB,KACA,KACoBA,EAASD,YAAYxO,MAG7C,MAEF,KAAKk6C,EAAArxC,YAAY2K,OACfpU,KAAKwyD,cAAsBnjD,GAC3B,MAEF,KAAKyrC,EAAArxC,YAAYkR,UACf3a,KAAKw0D,iBAA4BnlD,yGASzC6/C,EAAAjtD,UAAAmwD,uBAAA,SAAuBtkD,GACrB,IAAIzD,EAAmBrK,KAAKya,QAAQpQ,iBAChCmI,EAAU1E,EAAU0E,QACxB,GAAKA,EACL,IAAK,IAAInS,EAAI,EAAGgL,EAAImH,EAAQlN,OAAQjF,EAAIgL,IAAKhL,EAAG,CAC9C,IAAIoQ,EAAS+B,EAAQnS,GACjBgP,EAAUhF,EAAiBnJ,IAC7B4M,EAAU1J,MAAMU,OAAOmU,aAAexS,EAAAnE,eAAiBmO,EAAOlB,aAAanK,MAE7E,GAAKiK,EACL,OAAQA,EAAQtB,MACd,KAAK+sC,EAAArxC,YAAYyH,gBACO7B,EAASyD,GAAGrM,EAAApE,YAAY+P,UAC5CpS,KAAKy0D,+BAA+CplD,MAEtD,MAEF,KAAKyrC,EAAArxC,YAAYmR,KACf5a,KAAKozD,YAAkB/jD,GACvB,MAEF,KAAKyrC,EAAArxC,YAAYwI,oBAEQ5C,EAASyD,GAAGrM,EAAApE,YAAY+P,UAC7CtE,EAAU1J,MAAMU,OAAOqQ,SAEvBnV,KAAK4zD,kCACgBvkD,KAEnB,KACA,KACoBA,EAASD,YAAYxO,MAG7C,MAEF,KAAKk6C,EAAArxC,YAAY2K,OACfpU,KAAKwyD,cAAsBnjD,GAC3B,MAEF,KAAKyrC,EAAArxC,YAAYkR,UACf3a,KAAKw0D,iBAA4BnlD,MASzC6/C,EAAAjtD,UAAA6vD,wBAAA,SACE1iD,EACAuQ,EACA7D,QAAA,IAAAA,MAAA,MAEA,IAAIzM,EAAU5L,OAAOzD,KAAKya,QAAQxQ,eAAe/I,IAAIkO,EAAYmF,wBACjE9Q,OAAO4L,EAAQtB,MAAQ+sC,EAAArxC,YAAYyH,iBACnClR,KAAKy0D,+BACaplD,EAChBsQ,EACA7D,EACA1M,IAIJ8/C,EAAAjtD,UAAAwyD,+BAAA,SACExyD,EACA0d,EACA7D,EACAsuC,QADA,IAAAtuC,MAAA,WACA,IAAAsuC,MAAA,MAEA,IAAIx4C,EAAW5R,KAAKgL,SAASy+C,8BAC3BxnD,EACA0d,EACA7D,EACAsuC,GAAyBnoD,EAAUmN,aAEhCwC,GACL5R,KAAK00D,aAAa9iD,IAGpBs9C,EAAAjtD,UAAAyyD,aAAA,SAAa9iD,eACX,GAAIA,EAASkB,GAAGrM,EAAApE,YAAY8uD,UAAW,OAAO,EAC9Cv/C,EAASnE,IAAIhH,EAAApE,YAAY8uD,UAEzB,IAAIwD,EAAgB/iD,EAAS3P,UAAUuQ,QACvC,GAAImiD,MACF,IAAoB,IAAAxkD,EAAAJ,EAAA4kD,EAAc/7C,UAAQpH,EAAArB,EAAAF,QAAAuB,EAAAtB,KAAAsB,EAAArB,EAAAF,OAAE,CAC1C,QADOZ,EAAOmC,EAAAlQ,OACEyM,MACd,KAAK+sC,EAAArxC,YAAY2K,OACfpU,KAAKwyD,cAAsBnjD,GAC3B,MAEF,KAAKyrC,EAAArxC,YAAYwI,mBAEQ5C,EAASyD,GAAGrM,EAAApE,YAAY+P,UAE7CpS,KAAK4zD,kCACgBvkD,KACf,KAAM,KACUA,EAASD,YAAYxO,MAG7C,MAEF,KAAKk6C,EAAArxC,YAAYyO,UACXrX,EAAoBwO,EAAS8I,kBAE/BnY,KAAK4zD,kCACH/yD,KACI,KAAM,KACVA,EAAOuO,YAAYxO,OAGnBwwD,EAAoB/hD,EAAS+I,kBAE/BpY,KAAK4zD,kCACHxC,KACI,KAAM,KACVA,EAAOhiD,YAAYxO,yGAQ/B,IAAIg0D,EAAehjD,EAASkO,oBACxB80C,GAAc50D,KAAK6zD,gBAAgBe,GACvC,IAAIp+C,EAAkB5E,EAASY,QAC/B,GAAIgE,MACF,IAAoB,IAAAk2C,EAAA38C,EAAAyG,EAAgBoC,UAAQq0C,EAAAP,EAAAz8C,QAAAg9C,EAAA/8C,KAAA+8C,EAAAP,EAAAz8C,OAAE,CAAzC,IAAIZ,EACP,QADOA,EAAO49C,EAAA3rD,OACEyM,MACd,KAAK+sC,EAAArxC,YAAYwI,mBAEQ5C,EAASyD,GAAGrM,EAAApE,YAAY+P,UAE7CpS,KAAK4zD,kCACgBvkD,KAEnBuC,EAASkK,wBACT,KACoBzM,EAASD,YAAYxO,MAG7C,MAEF,KAAKk6C,EAAArxC,YAAY+V,MACfnQ,EAAQ5B,IAAIhH,EAAApE,YAAY8uD,UACxB,MAEF,KAAKrW,EAAArxC,YAAYyO,SACf,IAAIrX,EAQAuwD,GARAvwD,EAAoBwO,EAAS8I,kBAE/BnY,KAAK4zD,kCACH/yD,KACI+Q,EAASkK,wBAAyB,KACtCjb,EAAOuO,YAAYxO,OAGnBwwD,EAAoB/hD,EAAS+I,kBAE/BpY,KAAK4zD,kCACHxC,KACIx/C,EAASkK,wBAAyB,KACtCs1C,EAAOhiD,YAAYxO,yGAQ/B,OAAO,GAGTsuD,EAAAjtD,UAAAsyD,4BAAA,SACEnlD,EACAuQ,EACA7D,EACAsuC,QADA,IAAAtuC,MAAA,WACA,IAAAsuC,MAAA,MAGApqD,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf5F,EAAYhL,QAOhB8qD,EAAAjtD,UAAA4yD,iBAAA,SAAiBjwB,EAAoBkwB,QAAA,IAAAA,MAAA,GACnC,IAAIr1C,EAAe+wC,UAAUxwD,KAAKyf,aAAcq1C,GAC5ChwB,EAAUj+B,EAAA89B,cAAchjC,OAAOijC,EAAQnlB,GAG3C,OAFAzf,KAAKuvD,eAAe1pD,KAAKi/B,GACzB9kC,KAAKyf,aAAeioC,QAAQjoC,EAAc9S,QAAQi4B,EAAOt/B,OAAQ,IAC1Dw/B,GAMToqB,EAAAjtD,UAAA8yD,yBAAA,SAAyBvlB,GAEvB,GADA/rC,OAAO+rC,EAAK18B,GAAGrM,EAAApE,YAAY8uD,WACvB3hB,EAAKlzB,oBAAsB,EAC7B,OAAOkzB,EAAKlzB,mBAEd,IAAImzC,EAAgBzvD,KAAKyvD,cACrBj0C,EAAQi0C,EAAcnqD,OAO1B,OANKkqC,EAAK18B,GAAGrM,EAAApE,YAAY2yD,aAAexlB,EAAK/8B,UAAUsqC,mBAAqBvN,EAAK/8B,UAAUC,eAAepN,SAExGkqC,EAAOxvC,KAAKixD,iBAAiBzhB,IAE/BigB,EAAc5pD,KAAK2pC,EAAKnzB,KACxBmzB,EAAKlzB,mBAAqBd,EACnBA,GAKT0zC,EAAAjtD,UAAAqwD,iBAAA,SAAiBxkD,GACf,IACI4d,EADA/rB,EAASK,KAAKL,OAElB,OAAQmO,EAAUC,MAChB,KAAKnH,EAAAoH,SAASwpB,MACZ9L,EAAO1rB,KAAKi1D,sBAAsCnnD,GAClD,MAEF,KAAKlH,EAAAoH,SAAS2qB,MACZjN,EAAO1rB,KAAKk1D,sBAAsCpnD,GAClD,MAEF,KAAKlH,EAAAoH,SAAS4qB,SACZlN,EAAO1rB,KAAKm1D,yBAA4CrnD,GACxD,MAEF,KAAKlH,EAAAoH,SAAS6qB,GACZnN,EAAO1rB,KAAKo1D,mBAAgCtnD,GAC5C,MAEF,KAAKlH,EAAAoH,SAAS8qB,MACZpN,EAAO1rB,KAAKq1D,sBAAsCvnD,GAClD,MAEF,KAAKlH,EAAAoH,SAASkrB,WACZxN,EAAO1rB,KAAKs1D,2BAAgDxnD,GAC5D,MAEF,KAAKlH,EAAAoH,SAASorB,IACZ1N,EAAO1rB,KAAKu1D,oBAAkCznD,GAC9C,MAEF,KAAKlH,EAAAoH,SAASqrB,GACZ3N,EAAO1rB,KAAKw1D,mBAAgC1nD,GAC5C,MAEF,KAAKlH,EAAAoH,SAASurB,OACZ7N,EAAO1rB,KAAKy1D,uBAAwC3nD,GACpD,MAEF,KAAKlH,EAAAoH,SAASyrB,OACZ/N,EAAO1rB,KAAK01D,uBAAwC5nD,GACpD,MAEF,KAAKlH,EAAAoH,SAAS0rB,MACZhO,EAAO1rB,KAAK21D,sBAAsC7nD,GAClD,MAEF,KAAKlH,EAAAoH,SAAS2rB,IACZjO,EAAO1rB,KAAK41D,oBAAkC9nD,GAC9C,MAEF,KAAKlH,EAAAoH,SAASiB,UACZyc,EAAO1rB,KAAKmyD,yBAA4CrkD,MAC7C4d,EAAO/rB,EAAO+qC,aACzB,MAEF,KAAK9jC,EAAAoH,SAAS6rB,KACZnO,EAAO1rB,KAAK61D,qBAAoC/nD,GAChD,MAEF,KAAKlH,EAAAoH,SAAS8rB,MACZpO,EAAO1rB,KAAK81D,sBAAsChoD,GAClD,MAEF,KAAKlH,EAAAoH,SAASe,gBAGZ,GAAI/O,KAAK+gB,iBAAmB/gB,KAAKmwD,sBAC/B,OAAOxwD,EAAO+qC,YAIlB,QACEjnC,QAAO,GACPioB,EAAO/rB,EAAOisC,oBAIlB,OADI5rC,KAAK0L,QAAQmT,WAAW7e,KAAK+1D,iBAAiBrqC,EAAM5d,EAAU1J,OAC3DsnB,GAGTwjC,EAAAjtD,UAAAkyD,kBAAA,SAAkBvmD,GAChB,IAAIooD,EAAgBpoD,EAAWtI,OAC3B4uD,EAAQ,IAAI/tD,MAAqB6vD,GACrC9B,EAAM5uD,OAAS,EAEf,IADA,IAAIwY,EAAO9d,KAAK+gB,gBAAgBjD,KACvBzd,EAAI,EAAGA,EAAI21D,IAAiB31D,EAAG,CACtC,IAAIqrB,EAAO1rB,KAAKsyD,iBAAiB1kD,EAAWvN,IAC5C,OAAQwG,EAAA8c,gBAAgB+H,IACtB,KAAK7kB,EAAA+c,aAAa4E,MAChB,IAAK3hB,EAAA4hB,aAAaiD,GAAO,CACvB,IAAK,IAAI7d,EAAI,EAAGxC,EAAIxE,EAAA6hB,mBAAmBgD,GAAO7d,EAAIxC,IAAKwC,EAAGqmD,EAAMruD,KAAKgB,EAAA+hB,cAAc8C,EAAM7d,IACzF,MAIJ,QAASqmD,EAAMruD,KAAK6lB,GACpB,KAAK7kB,EAAA+c,aAAaqyC,KAEpB,GAAIn4C,EAAK3L,MAAK,IAA6B,CACrCtL,EAAA6zC,yBAAyBhvB,IAAOwoC,EAAMruD,KAAK7F,KAAKL,OAAOisC,qBAC3D,OAGJ,OAAOsoB,GAGThF,EAAAjtD,UAAAgzD,sBAAA,SAAsBnnD,GACpB,IAAIF,EAAaE,EAAUF,WACvBoT,EAAahhB,KAAK+gB,gBAAgBjD,KAClCA,EAAOkD,EAAWO,OACtBvhB,KAAK+gB,gBAAgBjD,KAAOA,EAE5B,IAAIo2C,EAAQl0D,KAAKm0D,kBAAkBvmD,GAC/B8d,EAAuB,GAAhBwoC,EAAM5uD,OACbtF,KAAKL,OAAO+qC,YACI,GAAhBwpB,EAAM5uD,OACJ4uD,EAAM,GACNl0D,KAAKL,OAAOoqC,YAAY,KAAMmqB,EAAMrtD,EAAAihB,kBAAkBosC,EAAMA,EAAM5uD,OAAS,KAIjF,OAFAtF,KAAK+gB,gBAAgBjD,KAAOA,EAAK4D,OACjCV,EAAW6B,QAAQ/E,GACZ4N,GAGTwjC,EAAAjtD,UAAAizD,sBAAA,SAAsBpnD,GACpB,IAAInO,EAASK,KAAKL,OAClB,GAAImO,EAAU6iB,MAKZ,OAJA3wB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACflH,EAAU6iB,MAAMvsB,OAEXzE,EAAOisC,oBAEhB,IAAI9tB,EAAO9d,KAAK+gB,gBAAgBjD,KAC5BoD,EAAapD,EAAKoD,WACtB,OAAkB,MAAdA,GACFlhB,KAAKuG,MACHG,EAAA5C,eAAeoyD,qFACfpoD,EAAU1J,OAELzE,EAAOisC,sBAEhB9tB,EAAKrQ,IAAG,GACD9N,EAAOuqC,YAAYhpB,KAG5BguC,EAAAjtD,UAAAkzD,yBAAA,SAAyBrnD,GACvB,IAAInO,EAASK,KAAKL,OACdgxB,EAAQ7iB,EAAU6iB,MACtB,GAAIA,EAKF,OAJA3wB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf2b,EAAMvsB,OAEDzE,EAAOisC,oBAGhB,IAAI9tB,EAAO9d,KAAK+gB,gBAAgBjD,KAC5BmD,EAAgBnD,EAAKmD,cACzB,OAAqB,MAAjBA,GACFjhB,KAAKuG,MACHG,EAAA5C,eAAeqyD,8EACfroD,EAAU1J,OAELzE,EAAOisC,sBAEhB9tB,EAAKrQ,IAAG,IACD9N,EAAOuqC,YAAYjpB,KAG5BiuC,EAAAjtD,UAAAmzD,mBAAA,SAAmBtnD,GACjB,IAAIiT,EAAkB/gB,KAAK+gB,gBACvBphB,EAASK,KAAKL,OAEdgxB,EAAQ5P,EAAgBtC,oBACxBuC,EAAaD,EAAgBjD,KAC7BA,EAAOkD,EAAWO,OACtBR,EAAgBjD,KAAOA,EACvB,IAAIoD,EAAa,SAAWyP,EAC5B7S,EAAKoD,WAAaA,EAClB,IAAID,EAAgB,YAAc0P,EAClC7S,EAAKmD,cAAgBA,EAErB,IAAIsS,EAAOvzB,KAAKsyD,iBAAiBxkD,EAAUA,WACvCsoD,EAAWp2D,KAAKq2D,cAClBr2D,KAAKkzD,kBAAkBplD,EAAU0hB,UAAW7oB,EAAAgF,KAAKG,IAAG,KACpD9L,KAAKsvD,aAKPvuC,EAAgBjD,KAAOA,EAAK4D,OAC5BX,EAAgBpC,oBAChB,IAAI23C,EAAax4C,EAAK3L,MAAK,IAC3B2L,EAAKwD,MACH,KAKFN,EAAW6B,QAAQ/E,GAEnB,IAAIy4C,GACF52D,EAAO2qC,WAAWrpB,EAChBq1C,EACI/iC,EACA5zB,EAAOoqC,YAAY,MACjBxW,EACA5zB,EAAOuqC,YAAYjpB,EAAem1C,IACnC,KAIT,OADIE,GAAYC,EAAM1wD,KAAKlG,EAAOisC,qBAC3BjsC,EAAOoqC,YAAY7oB,EAAYq1C,IAGxCrH,EAAAjtD,UAAAozD,sBAAA,SAAsBvnD,GACpB,OAAO9N,KAAKL,OAAO+qC,aAGrBwkB,EAAAjtD,UAAAqzD,2BAAA,SAA2BxnD,GACzB,IAAI2V,EAAOzjB,KAAKkzD,kBAAkBplD,EAAU4e,WAAY/lB,EAAAgF,KAAKc,KAAI,KAKjE,OAJIzM,KAAKsvD,aAAe3oD,EAAAgF,KAAKc,OAC3BgX,EAAOzjB,KAAKL,OAAOyqC,WAAW3mB,GAC9BzjB,KAAKsvD,YAAc3oD,EAAAgF,KAAKc,MAEnBgX,GAGTyrC,EAAAjtD,UAAAszD,oBAAA,SAAoBznD,GAGlB,IAAIiT,EAAkB/gB,KAAK+gB,gBACvB4P,EAAQ5P,EAAgBtC,oBACxBuC,EAAaD,EAAgBjD,KAC7BA,EAAOkD,EAAWO,OACtBR,EAAgBjD,KAAOA,EACvB,IAAIoD,EAAapD,EAAKoD,WAAa,SAAWyP,EAC9C7S,EAAKoD,WAAaA,EAClB,IAAID,EAAgB,YAAc0P,EAClC7S,EAAKmD,cAAgBA,EACrB,IAAIu1C,EAAc,UAAY7lC,EAG1BhxB,EAASK,KAAKL,OACd+yD,EAAW5kD,EAAUwN,YACrBtb,KAAKsyD,iBAA4BxkD,EAAUwN,aAC3C,EACA86C,EAA0B,EAC1BK,GAAa,EACjB,GAAI3oD,EAAU0hB,UAAW,CACvB4mC,EAAWp2D,KAAKq2D,cACdr2D,KAAK4yD,4BAAwC9kD,EAAU0hB,UAAW7oB,EAAAgF,KAAKW,KAAI,GAC3EtM,KAAKsvD,aAGP,IAAIoH,EAAU/2D,EAAOkxC,qBAAqBulB,GACtCvvD,EAAA8c,gBAAgB+yC,IAAY7vD,EAAA+c,aAAa6C,QAC3ChjB,OAAiC,GAA1BoD,EAAAihB,kBAAkB4uC,IACQ,GAA7B7vD,EAAA6f,iBAAiBgwC,KAAeD,GAAa,IAKnDL,EAAWp2D,KAAKq2D,cACdr2D,KAAK4yD,4BAAwC9kD,EAAU0hB,UAAW7oB,EAAAgF,KAAKW,KAAI,GAC3EtM,KAAKsvD,kBAIP8G,EAAWz2D,EAAO6mC,UAAU,GAC5BiwB,GAAa,EAEf,IAAIE,EAAW7oD,EAAUslB,YACrBpzB,KAAKkzD,kBAA8BplD,EAAUslB,YAAazsB,EAAAgF,KAAKc,KAAI,KACnE,EACAmqD,EAAgB9oD,EAAUA,UAC1B+oD,EAAWD,EAAc7oD,MAAQnH,EAAAoH,SAASwpB,OAA8D,GAApCo/B,EAAehpD,WAAWtI,OAC9FtF,KAAKsyD,iBAAkCsE,EAAehpD,WAAW,IACjE5N,KAAKsyD,iBAAiBsE,GAG1B71C,EAAgBjD,KAAOA,EAAK4D,OAC5BX,EAAgBpC,oBAChB,IAAIm4C,EAAeh5C,EAAK3L,MAAM,KAC9B2L,EAAKwD,MACH,KAKEm1C,EAAYz1C,EAAW6B,QAAQ/E,GAC9BkD,EAAW+B,mBAAmBjF,GAEnC,IAAIi5C,EAAa,IAAI5wD,MACjBusD,GAAUqE,EAAWlxD,KAAK6sD,GAE9B,IAAIsE,EAAc,IAAI7wD,MAuBtB,OAtBI2wD,EACFE,EAAYnxD,KACVlG,EAAOoqC,YAAY9oB,GACjBthB,EAAOuqC,YAAYhpB,EAAYvhB,EAAOynC,YAAYvgC,EAAA2gB,QAAQC,OAAQ2uC,IAClES,GACD,KAGHG,EAAYnxD,KACVlG,EAAOuqC,YAAYhpB,EAAYvhB,EAAOynC,YAAYvgC,EAAA2gB,QAAQC,OAAQ2uC,KAEpEY,EAAYnxD,KAAKgxD,IAEfF,GAAUK,EAAYnxD,KAAK8wD,GAC/BK,EAAYnxD,KACVlG,EAAOuqC,YAAYssB,IAGrBO,EAAWlxD,KACTlG,EAAO2qC,WAAWksB,EAAa72D,EAAOoqC,YAAY,KAAMitB,EAAW,KAG9Dr3D,EAAOoqC,YAAY7oB,EAAY61C,IAGxC7H,EAAAjtD,UAAAuzD,mBAAA,SAAmB1nD,GACjB,IAAInO,EAASK,KAAKL,OACdohB,EAAkB/gB,KAAK+gB,gBACvBuR,EAASxkB,EAAUwkB,OACnBC,EAAUzkB,EAAUykB,QAGpB6jC,EAAWp2D,KAAKq2D,cAClBr2D,KAAK4yD,4BAA4B9kD,EAAU0hB,UAAW7oB,EAAAgF,KAAKW,KAAI,GAC/DtM,KAAKsvD,aAGP,IACGtvD,KAAK0L,QAAQmB,eACd7M,KAAK+gB,gBAAgB5O,MAAM1L,EAAApE,YAAY+P,QAAU3L,EAAApE,YAAY40D,iBAC7D,CAEA,IAAIC,EAAkBv3D,EAAOkxC,qBAAqBulB,GAClD,GACEvvD,EAAA8c,gBAAgBuzC,IAAoBrwD,EAAA+c,aAAa6C,OACf,GAAlC5f,EAAAihB,kBAAkBovC,GAElB,OAAOrwD,EAAA6f,iBAAiBwwC,GACpBl3D,KAAKsyD,iBAAiBhgC,GACtBC,EACEvyB,KAAKsyD,iBAAiB//B,GACtB5yB,EAAO+qC,YAIb0rB,EAAWp2D,KAAKq2D,cACdr2D,KAAK4yD,4BAA4B9kD,EAAU0hB,UAAW7oB,EAAAgF,KAAKW,KAAI,GAC/DtM,KAAKsvD,aAMX,IAAItuC,EAAaD,EAAgBjD,KAC7Bq5C,EAAan2C,EAAWO,OAC5BR,EAAgBjD,KAAOq5C,EACvB,IAAIC,EAAap3D,KAAKsyD,iBAAiBhgC,GACvCvR,EAAgBjD,KAAOq5C,EAAWz1C,OAElC,IAAI21C,EAA6B,EACjC,GAAI9kC,EAAS,CACX,IAAI+kC,EAAct2C,EAAWO,OAC7BR,EAAgBjD,KAAOw5C,EACvBD,EAAcr3D,KAAKsyD,iBAAiB//B,GACpCxR,EAAgBjD,KAAOw5C,EAAY51C,OACnCV,EAAWgC,cAAcm0C,EAAYG,QAErCt2C,EAAW+B,mBAAmBo0C,GAEhC,OAAOx3D,EAAO6qC,SAAS4rB,EAAUgB,EAAYC,IAG/CnI,EAAAjtD,UAAAwzD,uBAAA,SAAuB3nD,GACrB,IAAInO,EAASK,KAAKL,OACdohB,EAAkB/gB,KAAK+gB,gBACvB0C,EAAsB,EACtB3F,EAAOiD,EAAgBjD,KAK3B,GAFAA,EAAKrQ,IAAG,GAEJK,EAAUxM,MAAO,CACnB,IAAIsR,EAAakL,EAAKlL,WACtB,GAAIA,GAAcjM,EAAAgF,KAAKc,KAOrB,OANAzM,KAAK4yD,4BAA4B9kD,EAAUxM,MAAOsR,EAAU,GAC5D5S,KAAKuG,MACHG,EAAA5C,eAAe+uD,mCACf/kD,EAAUxM,MAAM8C,MAAOpE,KAAKsvD,YAAYzqD,WAAY+N,EAAW/N,YAEjE7E,KAAKsvD,YAAc3oD,EAAAgF,KAAKc,KACjB9M,EAAOisC,oBAEhBnoB,EAAOzjB,KAAKkzD,kBACVplD,EAAUxM,MACVsR,EAAU,EAEVmO,EAAgBjO,GAAGrM,EAAApE,YAAY4S,eAC5B,EACA,GAIA6I,EAAK0F,YAAYC,EAAM7Q,IAAakL,EAAKrQ,IAAG,GAInD,OAAI7G,EAAA2wB,gBAAgBzpB,GAAmB2V,GAAc9jB,EAAO+qC,YAGrD5sB,EAAKhL,GAAE,MACVnT,EAAOuqC,YAAYzmC,OAAOqa,EAAKqD,aAAc,EAAGsC,GAChD9jB,EAAOirC,aAAannB,IAG1ByrC,EAAAjtD,UAAAyzD,uBAAA,SAAuB5nD,GACrB,IAAInO,EAASK,KAAKL,OACdohB,EAAkB/gB,KAAK+gB,gBAEvBiT,EAAQlmB,EAAUkmB,MAClBujC,EAAWvjC,EAAM1uB,OACrB,IAAKiyD,EACH,OAAOv3D,KAAKkzD,kBAAkBplD,EAAU0hB,UAAW7oB,EAAAgF,KAAKc,KAAI,KAI9D,IAAIg+C,EAAU1pC,EAAgBtC,oBAC1BuC,EAAaD,EAAgBjD,KAG7B05C,EAAYz2C,EAAgB9C,aAAatX,EAAAgF,KAAKQ,KAAK,GACnDsrD,EAAiBD,EAAUh8C,MAG3Bk8C,EAAS,IAAIvxD,MAAqB,EAAIoxD,GAC1CG,EAAO,GAAK/3D,EAAOgqC,eACjB8tB,EACAz3D,KAAKkzD,kBAAkBplD,EAAU0hB,UAAW7oB,EAAAgF,KAAKQ,IAAG,MAMtD,IAFA,IAAIwrD,EAAa,EACbC,GAAgB,EACXv3D,EAAI,EAAGA,EAAIk3D,IAAYl3D,EAAG,CACjC,IACIswB,EADQqD,EAAM3zB,GACAswB,MACdA,EACF+mC,EAAOC,KAAgBh4D,EAAOuqC,YAAY,OAAS7pC,EAAEwE,SAAS,IAAM,IAAM4lD,EACxE9qD,EAAO4nC,aAAa1gC,EAAAyd,SAASC,MAC3B5kB,EAAOkoC,eAAe4vB,EAAc,GACpCz3D,KAAKkzD,kBAAkBviC,EAAOhqB,EAAAgF,KAAKQ,IAAG,OAI1CyrD,EAAev3D,EAInB0gB,EAAgBxC,cAAci5C,GAG9BE,EAAOC,GAAch4D,EAAOuqC,aAAa0tB,GAAgB,EACnD,OAASA,EAAa/yD,SAAS,IAC/B,SACA,IAAM4lD,GAGZ,IAAIoN,EAAel4D,EAAOoqC,YAAY,SAAW0gB,EAASiN,EAAM,GAC5DI,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAAS53D,EAAI,EAAGA,EAAIk3D,IAAYl3D,EAAG,CACjC,IACIuN,EADQomB,EAAM3zB,GACKuN,WACnBooD,EAAgBpoD,EAAWtI,OAG3BwY,EAAOkD,EAAWO,OACtBR,EAAgBjD,KAAOA,EACvB,IAAIoD,EAAa,SAAWupC,EAC5B3sC,EAAKoD,WAAaA,EAElB,IAAIg3C,EAAS73D,GAAKk3D,EAAW,EACzBY,EAAYD,EAASh3C,EAAa,QAAU7gB,EAAI,GAAGwE,SAAS,IAAM,IAAM4lD,EACxEyJ,EAAQ,IAAI/tD,MAAqB,EAAI6vD,GACzC9B,EAAM,GAAK2D,EAGX,IAFA,IAAIO,EAAQ,EACR9B,GAAa,EACRzoD,EAAI,EAAGA,EAAImoD,IAAiBnoD,EAAG,CACtC,IAAI6d,EAAO1rB,KAAKsyD,iBAAiB1kD,EAAWC,IAC5C,GAAIhH,EAAA8c,gBAAgB+H,IAAS7kB,EAAA+c,aAAaqyC,MACxC/B,EAAMkE,KAAW1sC,EACb5N,EAAK3L,MAAK,KAA6B,CACzCmkD,GAAa,EACb,OAINpC,EAAM5uD,OAAS8yD,GACX9B,GAAc4B,KACXp6C,EAAKhL,GAAE,KAAqBglD,GAAgB,GAC5Ch6C,EAAKhL,GAAE,KAA6BilD,GAAuB,GAC3Dj6C,EAAKhL,GAAE,KAAoBklD,GAAe,GAC1Cl6C,EAAKhL,GAAE,MAAuBmlD,GAAkB,IAIvDn6C,EAAKwD,MACH,KAGFP,EAAgBjD,KAAOA,EAAK4D,OAC5Bm2C,EAAel4D,EAAOoqC,YAAYouB,EAAWjE,EAAK,GAWpD,OATAnzC,EAAgBpC,oBAGZi5C,GAAgB,IACdE,GAAe92C,EAAWvT,IAAG,GAC7BsqD,GAAsB/2C,EAAWvT,IAAG,GACpCuqD,GAAch3C,EAAWvT,IAAG,GAC5BwqD,GAAiBj3C,EAAWvT,IAAG,KAE9BoqD,GAGT3I,EAAAjtD,UAAA0zD,sBAAA,SAAsB7nD,GACpB,IAAIgQ,EAAO9d,KAAK+gB,gBAAgBjD,KAShC,OANAA,EAAKrQ,IAAG,GAGRqQ,EAAKrQ,IAAG,GAGD6gD,EAAA+J,aAAar4D,KAAM,KAAM8N,IAGlCohD,EAAAjtD,UAAA2zD,oBAAA,SAAoB9nD,GAQlB,OAJA9N,KAAKuG,MACHG,EAAA5C,eAAekR,wBACflH,EAAU1J,OAELpE,KAAKL,OAAOisC,qBAOrBsjB,EAAAjtD,UAAAkwD,yBAAA,SAAyBrkD,EAA8BwqD,QAAA,IAAAA,OAAA,GACrD,IAAI79C,EAAUza,KAAKya,QACfsG,EAAkB/gB,KAAK+gB,gBACvBpH,EAAe7L,EAAU6L,aACzB4+C,EAAkB5+C,EAAarU,OAGnC,GAAIgzD,GACFv3C,GAAmB/gB,KAAKmwD,uBACxBriD,EAAU8B,QAAU9B,EAAU8B,OAAO7B,MAAQnH,EAAAoH,SAASqG,OACrD,CAMD,IAAK,IAAIhU,EAAI,EAAGA,EAAIk4D,IAAmBl4D,EACrCL,KAAKuyD,yBAAyB54C,EAAatZ,IAE7C,OAAO,EAIT,IAAIm4D,EAAe,IAAIryD,MACnB2X,EAAO9d,KAAK+gB,gBAAgBjD,KAC5B9S,EAAWhL,KAAKgL,SACpB,IAAS3K,EAAI,EAAGA,EAAIk4D,IAAmBl4D,EAAG,CACxC,IAAI+O,EAAcuK,EAAatZ,GAC3BO,EAAOwO,EAAYxO,KAAKwE,KACxB4M,EAAoB,KACpB0gD,EAA0B,EAC9B,GAAItjD,EAAY4C,KAAM,CAKpB,KAJAA,EAAOhH,EAASm+C,YACd/5C,EAAY4C,KACZ8L,EAAKhC,0BAEI,SACP1M,EAAYkM,cACdo3C,EAAW1yD,KAAKkzD,kBACd9jD,EAAYkM,YACZtJ,EAAI,UAKH,KAAI5C,EAAYkM,YAchB,CACLtb,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACft+C,EAAYxO,KAAKwD,MAAMomD,OAEzB,SAbA,GALAkI,EAAW1yD,KAAK4yD,4BACdxjD,EAAYkM,YACZ3U,EAAAgF,KAAKc,KAAI,GAGPzM,KAAKsvD,aAAe3oD,EAAAgF,KAAKc,KAAM,CACjCzM,KAAKuG,MACHG,EAAA5C,eAAe+uD,mCACfzjD,EAAYhL,MAAOpE,KAAKsvD,YAAYzqD,WAAY,UAElD,SAEFmN,EAAOhS,KAAKsvD,YAQd,IAAImJ,GAAY,EAChB,GAAIrpD,EAAY0D,GAAGrM,EAAApE,YAAYkY,OAC7B,GAAIm4C,EAEF,GADAA,EAAW1yD,KAAKL,OAAOkxC,qBAAqB6hB,GACxC7rD,EAAA8c,gBAAgB+uC,IAAa7rD,EAAA+c,aAAa6C,MAAO,CACnD,IAAItJ,EAAQ,IAAI29B,EAAAv/B,MAAMd,EAAS7Z,GAAO,EAAGoR,GACzC,OAAQnL,EAAAihB,kBAAkB4qC,IACxB,OACEv1C,EAAQA,EAAMlK,yBACZtG,QACE9F,EAAA6f,iBAAiBgsC,GACjB,IAGJ,MAEF,OACEv1C,EAAQA,EAAMlK,yBACZtG,QACE9F,EAAAkhB,oBAAoB2qC,GACpB7rD,EAAAiuC,qBAAqB4d,KAGzB,MAEF,OACEv1C,EAAQA,EAAMhK,uBAA4BtM,EAAAmhB,iBAAiB0qC,IAC3D,MAEF,OACEv1C,EAAQA,EAAMhK,uBAAuBtM,EAAAohB,iBAAiByqC,IACtD,MAEF,QAEE,OADAjvD,QAAO,GACAzD,KAAKL,OAAOisC,oBAIvB,IAAI9qB,EAAeC,EAAgBjD,KAAKgD,aACxC,GAAKA,GACA,GAAIA,EAAanP,IAAI/Q,GAKxB,OAJAZ,KAAKuG,MACHG,EAAA5C,eAAegO,uBACf1C,EAAYxO,KAAKwD,MAAOxD,GAEnBZ,KAAKL,OAAOisC,yBANF7qB,EAAgBjD,KAAKgD,aAAeA,EAAe,IAAIlX,IAQ1EkX,EAAarT,IAAI7M,EAAMuc,GACvBs7C,GAAY,OAEZz4D,KAAKsG,QACHI,EAAA5C,eAAeqvD,4DACf/jD,EAAYhL,YAIhBpE,KAAKuG,MACHG,EAAA5C,eAAe40D,wCACftpD,EAAYhL,OAIlB,IAAKq0D,EAAW,CACVt7C,OAAK,EAKPA,EAHA/N,EAAY+C,MAAM1L,EAAApE,YAAYk9C,IAAM94C,EAAApE,YAAYkY,QAChDuD,EAAKhL,GAAE,MAECgL,EAAK+D,eAAe7P,EAAMpR,GAAM,EAAOwO,GAEvC2R,EAAgB/C,SAAShM,EAAMpR,EAAMwO,GAE3CsjD,GACF8F,EAAa3yD,KAAK7F,KAAK24D,2BAA2BvpD,EAAYxO,KAAM8xD,IAChEv1C,EAAMnL,KAAKc,GAAG,KAChBgL,EAAKQ,gBAAgBnB,EAAM3B,OAAQsC,EAAK0F,YAAYkvC,EAAU1gD,KAEvDmL,EAAMnL,KAAKc,GAAG,KACvBgL,EAAKQ,gBAAgBnB,EAAM3B,OAAO,IAIxC,OAAOg9C,EAAalzD,OACO,GAAvBkzD,EAAalzD,OACXkzD,EAAa,GACbx4D,KAAKL,OAAOoqC,YAAY,KAAMyuB,EAAY,GAC5C,GAGNtJ,EAAAjtD,UAAA4zD,qBAAA,SAAqB/nD,GACnB,OAAO9N,KAAKkzD,kBAAkBplD,EAAU4e,WAAY/lB,EAAAgF,KAAKc,KAAI,MAG/DyiD,EAAAjtD,UAAA6zD,sBAAA,SAAsBhoD,GACpB,IAAInO,EAASK,KAAKL,OAGdy2D,EAAWp2D,KAAKq2D,cAClBr2D,KAAK4yD,4BAA4B9kD,EAAU0hB,UAAW7oB,EAAAgF,KAAKW,KAAI,GAC/DtM,KAAKsvD,aAGP,IACGtvD,KAAK0L,QAAQmB,eACd7M,KAAK+gB,gBAAgB5O,MAAM1L,EAAApE,YAAY+P,QAAU3L,EAAApE,YAAY40D,iBAC7D,CAEA,IAAIC,EAAkBv3D,EAAOkxC,qBAAqBulB,GAClD,GACEvvD,EAAA8c,gBAAgBuzC,IAAoBrwD,EAAA+c,aAAa6C,OACf,GAAlC5f,EAAAihB,kBAAkBovC,IAElB,IAAKrwD,EAAA6f,iBAAiBwwC,GAAkB,OAAOv3D,EAAO+qC,iBAItD0rB,EAAWp2D,KAAKq2D,cACdr2D,KAAK4yD,4BAA4B9kD,EAAU0hB,UAAW7oB,EAAAgF,KAAKW,KAAI,GAC/DtM,KAAKsvD,aAMX,IAAIvuC,EAAkB/gB,KAAK+gB,gBACvB4P,EAAQ5P,EAAgBtC,oBACxBuC,EAAaD,EAAgBjD,KAC7BA,EAAOkD,EAAWO,OACtBR,EAAgBjD,KAAOA,EACvB,IAAIoD,EAAa,SAAWyP,EAC5B7S,EAAKoD,WAAaA,EAClB,IAAID,EAAgB,YAAc0P,EAClC7S,EAAKmD,cAAgBA,EAErB,IAAIsS,EAAOvzB,KAAKsyD,iBAAiBxkD,EAAUA,WAEvCwoD,EAAax4C,EAAK3L,MAAK,IAc3B,OAXA4O,EAAgBjD,KAAOA,EAAK4D,OAC5BX,EAAgBpC,oBAChBb,EAAKwD,MACH,KAMGN,EAAW+B,mBAAmBjF,GAE5Bne,EAAOoqC,YAAY7oB,GACxBvhB,EAAO2qC,WAAWrpB,EAChBthB,EAAO6qC,SAAS4rB,EACdE,EACI/iC,EACA5zB,EAAOoqC,YAAY,MACjBxW,EACA5zB,EAAOuqC,YAAYjpB,IACpB,QAabiuC,EAAAjtD,UAAA22D,sBAAA,SACEvpD,EACAwpD,EACAC,GAEAr1D,OAAO4L,EAAQyD,GAAGrM,EAAApE,YAAY8Y,UAC9B,IAAInJ,EAAO3C,EAAQ2C,KACnB,QACG8mD,GACD9mD,EAAKc,GAAE,IACP+lD,EAAe/lD,GAAE,IACjBd,EAAKgV,KAAO6xC,EAAe7xC,MACtBhnB,KAAKsvD,YAAcuJ,GAAgB9qD,MACnC/N,KAAKsvD,YAAct9C,GAAMjE,MAE9B,OACA,OACE,IAAIgZ,EAAQ/U,EAAK0pC,yBAAyB/0C,EAAAgF,KAAKG,KAC/C,OAAO9L,KAAKL,OAAO6mC,UACQ,GAAzBn3B,EAAQ4L,kBACJ6zB,QAAQz/B,EAAQ6L,uBAAyB6L,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIgyC,EAAO1pD,EAAQ2C,KAAK6U,wBAAwBlgB,EAAAgF,KAAKG,KACrD,OAAO9L,KAAKL,OAAO6mC,UACQ,GAAzBn3B,EAAQ4L,kBACJ6zB,QAAQz/B,EAAQ6L,sBAAwB69C,EACxC,GAGR,OACA,OACE,OAAO/4D,KAAKL,OAAO6mC,UACQ,GAAzBn3B,EAAQ4L,kBACJ6zB,QAAQz/B,EAAQ6L,sBAChB,GAGR,OACA,OACE,IAAK7L,EAAQoL,QAAQ/O,QAAQkB,SAC3B,OAAO5M,KAAKL,OAAO6mC,UACQ,GAAzBn3B,EAAQ4L,kBACJ6zB,QAAQz/B,EAAQ6L,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzB7L,EAAQ4L,kBACXjb,KAAKL,OAAOinC,UACVkI,QAAQz/B,EAAQ6L,sBAChB6zB,SAAS1/B,EAAQ6L,uBAEnBlb,KAAKL,OAAOinC,UAAU,GAE5B,QAEE,IAAMv3B,EAAQ8E,aAAa2mC,EAAApxC,eAAemK,UAAYglD,GAAkBlyD,EAAAgF,KAAKY,IAC3E,OAAOvM,KAAKL,OAAOunC,UAAgC73B,EAAS+L,oBAG9Dpb,KAAKsvD,YAAc3oD,EAAAgF,KAAKY,IAE1B,QACE,OAAOvM,KAAKL,OAAOqnC,UAAgC33B,EAAS+L,oBAE9D,QAEE,OADA3X,QAAO,GACAzD,KAAKL,OAAOisC,sBAKzBsjB,EAAAjtD,UAAAixD,kBAAA,SACExmC,EACAmsC,EACAG,EACAC,GAIA,IAAIx1C,EACJ,OAHAzjB,KAAKsvD,YAAcuJ,EAGXnsC,EAAW3e,MACjB,KAAKnH,EAAAoH,SAASuoB,UACZ9S,EAAOzjB,KAAKk5D,2BAAgDxsC,EAAYmsC,GACxE,MAEF,KAAKjyD,EAAAoH,SAASwoB,OACZ/S,EAAOzjB,KAAKm5D,wBAA0CzsC,EAAYmsC,GAClE,MAEF,KAAKjyD,EAAAoH,SAASkc,KACZzG,EAAOzjB,KAAKo5D,sBAAsC1sC,EAAYmsC,GAC9D,MAEF,KAAKjyD,EAAAoH,SAASyoB,MACZhT,EAAOzjB,KAAKq5D,uBAAwC3sC,EAAYmsC,GAChE,MAEF,KAAKjyD,EAAAoH,SAASmc,cACZ1G,EAAOzjB,KAAKs5D,+BAAwD5sC,EAAYmsC,GAChF,MAEF,KAAKjyD,EAAAoH,SAAS+N,SACZ0H,EAAOzjB,KAAKu5D,0BAA8C7sC,EAAYmsC,GACtE,MAEF,KAAKjyD,EAAAoH,SAASic,WACd,KAAKrjB,EAAAoH,SAAS+b,MACd,KAAKnjB,EAAAoH,SAAS6b,KACd,KAAKjjB,EAAAoH,SAASmpB,KACd,KAAKvwB,EAAAoH,SAASkpB,MACd,KAAKtwB,EAAAoH,SAAS8b,KACZrG,EAAOzjB,KAAKw5D,4BACY9sC,EACtBmsC,EACc,GAAdG,GAEF,MAEF,KAAKpyD,EAAAoH,SAAS2oB,WACZlT,EAAOzjB,KAAKy5D,4BAAkD/sC,EAAYmsC,GAC1E,MAEF,KAAKjyD,EAAAoH,SAASoJ,QACZqM,EAAOzjB,KAAK05D,yBAA4ChtC,EAAYmsC,GACpE,MAEF,KAAKjyD,EAAAoH,SAAS6oB,IACZpT,EAAOzjB,KAAK25D,qBAAoCjtC,EAAYmsC,GAC5D,MAEF,KAAKjyD,EAAAoH,SAAS+oB,cACZtT,EAAOzjB,KAAK45D,+BAAwDltC,EAAYmsC,GAChF,MAEF,KAAKjyD,EAAAoH,SAASoc,eACZ3G,EAAOzjB,KAAK65D,gCACgBntC,EAC1BmsC,EACc,GAAdG,GAEF,MAEF,KAAKpyD,EAAAoH,SAASipB,QACZxT,EAAOzjB,KAAK85D,yBAA4CptC,EAAYmsC,GACpE,MAEF,KAAKjyD,EAAAoH,SAASqpB,aACZ5T,EAAOzjB,KAAK+5D,8BAAsDrtC,EAAYmsC,GAC9E,MAEF,KAAKjyD,EAAAoH,SAASspB,YACZ7T,EAAOzjB,KAAKg6D,6BAAoDttC,EAAYmsC,GAC5E,MAEF,QACE74D,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAEbqf,EAAOzjB,KAAKL,OAAOisC,oBAIvB,IAAI0jB,EAActvD,KAAKsvD,YASvB,OARkB,GAAd0J,GAAyC1J,GAAeuJ,GAC1Dp1C,EAAOzjB,KAAKi6D,kBAAkBx2C,EAAM6rC,EAAauJ,EAAgBG,EAAgBC,EAAUvsC,GAC3F1sB,KAAKsvD,YAAcuJ,GACF,GAARI,IACTx1C,EAAOzjB,KAAKk6D,uBAAuBz2C,EAAM6rC,IAGvCtvD,KAAK0L,QAAQmT,WAAW7e,KAAK+1D,iBAAiBtyC,EAAMiJ,EAAWtoB,OAC5Dqf,GAGTyrC,EAAAjtD,UAAA2wD,4BAAA,SACElmC,EACAmsC,EACAI,GAEA,OAAOj5D,KAAKkzD,kBACVxmC,EACAmsC,GAAkBlyD,EAAAgF,KAAKc,KACnB9F,EAAAgF,KAAKG,IACL+sD,EAAc,EAElBI,IAIJ/J,EAAAjtD,UAAA4uC,qBAAA,SACEnkB,EACAmsC,EACAG,EACAC,GAEA,OAAOj5D,KAAKL,OAAOkxC,qBACjB7wC,KAAKkzD,kBAAkBxmC,EAAYmsC,EAAgBG,EAAgBC,KAIvE/J,EAAAjtD,UAAAg4D,kBAAA,SACEx2C,EACA4E,EACAiB,EACA0vC,EACAC,EACAzM,GAEA/oD,OAAqB,GAAdu1D,GACP,IAAIr5D,EAASK,KAAKL,OAGlB,OAAiB,IAAb0oB,EAASta,MACXtK,OAAkB,IAAX6lB,EAAOvb,MACd/N,KAAKuG,MACHG,EAAA5C,eAAe+uD,mCACfrG,EAAWpoD,MAAOikB,EAASxjB,WAAYykB,EAAOzkB,YAEzClF,EAAOisC,qBAID,IAAXtiB,EAAOvb,KAA8BpO,EAAOyqC,WAAW3mB,IAEtD4E,EAASjI,eAAekJ,IACT,GAAd0vC,GACFh5D,KAAKuG,MACHG,EAAA5C,eAAeq2D,sDACf3N,EAAWpoD,MAAOikB,EAASxjB,WAAYykB,EAAOzkB,YAKhDwjB,EAASvV,GAAE,GAGTwW,EAAOxW,GAAE,GACM,IAAbuV,EAASta,KAGI,IAAXub,EAAOvb,OACT0V,EAAO9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQ4yC,WAAY32C,IAM5B,IAAX6F,EAAOvb,OAChB0V,EAAO9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQ6yC,UAAW52C,IAMtC6F,EAAOxW,GAAE,GAMZ2Q,EAHW,IAAb4E,EAASta,KACPub,EAAOxW,GAAE,GACPwW,EAAOxW,GAAE,IACJnT,EAAOynC,YAAYvgC,EAAA2gB,QAAQ8yC,cAAe72C,GAE1C9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQ+yC,cAAe92C,GAG/C6F,EAAOxW,GAAE,IACJnT,EAAOynC,YAAYvgC,EAAA2gB,QAAQgzC,cAAe/2C,GAE1C9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQizC,cAAeh3C,GAMjD6F,EAAOxW,GAAE,GACPwW,EAAOxW,GAAE,IACJnT,EAAOynC,YAAYvgC,EAAA2gB,QAAQkzC,cAAej3C,GAE1C9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQmzC,cAAel3C,GAG/C6F,EAAOxW,GAAE,IACJnT,EAAOynC,YAAYvgC,EAAA2gB,QAAQozC,cAAen3C,GAE1C9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQqzC,cAAep3C,IAOvDhgB,OAAmB,GAAZ6lB,EAAO5O,MAAyB,sBACvC+I,EAAO9jB,EAAOyqC,WAAW3mB,IAIlB4E,EAASvV,GAAE,IAAuBwW,EAAOxW,GAAE,GAKhD2Q,EAFW,IAAX6F,EAAOvb,KACLsa,EAASvV,GAAE,IACNnT,EAAOynC,YACZ/e,EAASvV,GAAE,GACPjM,EAAA2gB,QAAQszC,gBACRj0D,EAAA2gB,QAAQuzC,gBACZt3C,GAGK9jB,EAAOynC,YACZ/e,EAASvV,GAAE,GACPjM,EAAA2gB,QAAQwzC,gBACRn0D,EAAA2gB,QAAQyzC,gBACZx3C,GAMA4E,EAASvV,GAAE,IACNnT,EAAOynC,YACZ/e,EAASvV,GAAE,GACPjM,EAAA2gB,QAAQ0zC,gBACRr0D,EAAA2gB,QAAQ2zC,gBACZ13C,GAGK9jB,EAAOynC,YACZ/e,EAASvV,GAAE,GACPjM,EAAA2gB,QAAQ4zC,gBACRv0D,EAAA2gB,QAAQ6zC,gBACZ53C,GAQF4E,EAASvV,GAAE,IAGRwW,EAAOxW,GAAE,MACZ2Q,EAAO9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQ8zC,QAAS73C,IAIpC6F,EAAOxW,GAAE,KAClB2Q,EAAO9jB,EAAOynC,YACZ9d,EAAOxW,GAAE,GAAqBjM,EAAA2gB,QAAQ+zC,UAAY10D,EAAA2gB,QAAQg0C,UAC1Dx7D,KAAKk6D,uBAAuBz2C,EAAM4E,IAEpC4wC,EAAQ,GAKJ5wC,EAASvV,GAAE,KAETuV,EAASrB,KAAOsC,EAAOtC,OACzBvD,EAAOzjB,KAAKk6D,uBAAuBz2C,EAAM4E,GACzC4wC,EAAQ,GAMhBj5D,KAAKsvD,YAAchmC,EACJ,GAAR2vC,EACHj5D,KAAKk6D,uBAAuBz2C,EAAM6F,GAClC7F,IAGNyrC,EAAAjtD,UAAAi3D,2BAAA,SAA2BxsC,EAAiCmsC,GAC1D,IAAIvvC,EAAStpB,KAAKgL,SAASm+C,YACzBz8B,EAAWpD,OACXtpB,KAAK+gB,gBAAgBjD,KAAKhC,yBAE5B,OAAKwN,EACEtpB,KAAKkzD,kBAAkBxmC,EAAWA,WAAYpD,EAAM,KADvCtpB,KAAKL,OAAOisC,qBASlCsjB,EAAAjtD,UAAAk3D,wBAAA,SACEzsC,EACAmsC,GAEA,IAII4C,EACAC,EACAC,EACAC,EACAC,EAEAp4C,EAVA9jB,EAASK,KAAKL,OACdsjB,EAAOyJ,EAAWzJ,KAClBC,EAAQwJ,EAAWxJ,MASnB44C,GAAW,EAEXjvC,EAAWH,EAAWG,SAC1B,OAAQA,GACN,KAAKnD,EAAAC,MAAM22B,SAKT,GAJAmb,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAamC,IAC5C,CACZ8a,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAKrB,GAFA+vB,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAEhB,OAxBE6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAUI24C,EAAW9tD,MACjB,OACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASS,MAAO02C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASW,MAAOw2C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASW,MACTpe,EAAAyd,SAASS,MACb02C,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASU,MAAOy2C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASY,MACTre,EAAAyd,SAASU,MACby2C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASY,MAAOu2C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASa,MAAOs2C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASc,MAAOq2C,EAAUE,GACrD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB5rC,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACxB,MAEF,KAAKod,EAAAC,MAAM42B,YAKT,GAJAkb,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa+B,IAC5C,CACZkb,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAKrB,GAFA+vB,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAEhB,OAxBE6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAUI24C,EAAW9tD,MACjB,OACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASqB,MAAO81C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASuB,MACThf,EAAAyd,SAASqB,MACb81C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASuB,MAAO41C,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASsB,MAAO61C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASwB,MACTjf,EAAAyd,SAASsB,MACb61C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASwB,MAAO21C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASyB,MAAO01C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS0B,MAAOy1C,EAAUE,GACrD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB5rC,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACxB,MAEF,KAAKod,EAAAC,MAAM62B,gBAKT,GAJAib,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAaoC,IAC5C,CACZ6a,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAKrB,GAFA+vB,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,KAAMs3D,EAAS72D,WAAY+2D,EAAU/2D,YAEzD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAEhB,OAxBE6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAUI24C,EAAW9tD,MACjB,OACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASe,MAAOo2C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASiB,MACT1e,EAAAyd,SAASe,MACbo2C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASiB,MAAOk2C,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASgB,MAAOm2C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASkB,MACT3e,EAAAyd,SAASgB,MACbm2C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASkB,MAAOi2C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASmB,MAAOg2C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASoB,MAAO+1C,EAAUE,GACrD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB5rC,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACxB,MAEF,KAAKod,EAAAC,MAAM82B,mBAKT,GAJAgb,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAagC,IAC5C,CACZib,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAKrB,GAFA+vB,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,KAAMs3D,EAAS72D,WAAY+2D,EAAU/2D,YAEzD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAEhB,OAxBE6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAUI24C,EAAW9tD,MACjB,OACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS2B,MAAOw1C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAAS6B,MACTtf,EAAAyd,SAAS2B,MACbw1C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS6B,MAAOs1C,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS4B,MAAOu1C,EAAUE,GACrD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAAS8B,MACTvf,EAAAyd,SAAS4B,MACbu1C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS8B,MAAOq1C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS+B,MAAOo1C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASgC,MAAOm1C,EAAUE,GACrD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB5rC,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACxB,MAGF,KAAKod,EAAAC,MAAMi3B,qBACX,KAAKl3B,EAAAC,MAAM+2B,cAUT,GAJA+a,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZziC,GAAYnD,EAAAC,MAAM+2B,eAAiB1gD,KAAKsvD,YAAYx8C,GAAE,KAExD,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa6B,IAC5C,CACZob,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAQN,GAFAivC,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAOslB,EAAA02B,sBAAsB1zB,EAAWG,UAAW6uC,EAAS72D,WAAY+2D,EAAU/2D,YAE/F7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAEhB,OAxBE6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAUI24C,EAAW9tD,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASC,MAAOk3C,EAAUE,GACrD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASE,MACT3d,EAAAyd,SAASC,MACbk3C,EACAE,GAEF,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASE,MAAOi3C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASG,MAAOg3C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASI,MAAO+2C,EAAUE,GACrD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB5rC,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACxB,MAEF,KAAKod,EAAAC,MAAMk3B,0BACX,KAAKn3B,EAAAC,MAAMg3B,mBAKT,GAJA8a,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZziC,GAAYnD,EAAAC,MAAMg3B,oBAAsB3gD,KAAKsvD,YAAYx8C,GAAE,KAE7D,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa8B,IAC5C,CACZmb,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAQN,GAFAivC,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAOslB,EAAA02B,sBAAsB1zB,EAAWG,UAAW6uC,EAAS72D,WAAY+2D,EAAU/2D,YAE/F7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAEhB,OAxBE6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAUI24C,EAAW9tD,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASK,MAAO82C,EAAUE,GACrD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASM,MACT/d,EAAAyd,SAASK,MACb82C,EACAE,GAEF,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASM,MAAO62C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASO,MAAO42C,EAAUE,GACrD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASQ,MAAO22C,EAAUE,GACrD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB5rC,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACxB,MAEF,KAAKod,EAAAC,MAAMm4B,OACT,OAAO9hD,KAAKi8D,kBAAkBh5C,EAAMC,EAAO21C,GAE7C,KAAKnvC,EAAAC,MAAMo4B,YAAa+Z,GAAW,EACnC,KAAKpyC,EAAAC,MAAM5gB,KAKT,GAJA0yD,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAaoB,KAC5C,CACZ6b,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,GAAIkwB,EACFH,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,SAC7C,CAGL,GAFAC,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAtBd6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAWN,OAAQljB,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASqvC,OAAQ8H,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAAS43C,OACTr1D,EAAAyd,SAASqvC,OACb8H,EACAE,GAEF,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS43C,OAAQT,EAAUE,GACtD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS63C,OAAQV,EAAUE,GACtD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS83C,OAAQX,EAAUE,GACtD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAMq4B,aAAc8Z,GAAW,EACpC,KAAKpyC,EAAAC,MAAM1gB,MAKT,GAJAwyD,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAaqB,KAC5C,CACZ4b,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,GAAIkwB,EACFH,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,gBACZ,CAGL,GAFAqM,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAtBd6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAWN,OAAQljB,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS+3C,OAAQZ,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASg4C,OACTz1D,EAAAyd,SAAS+3C,OACbZ,EACAE,GAEF,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASg4C,OAAQb,EAAUE,GACtD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASi4C,OAAQd,EAAUE,GACtD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASk4C,OAAQf,EAAUE,GACtD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAMs4B,gBAAiB6Z,GAAW,EACvC,KAAKpyC,EAAAC,MAAMo3B,SAKT,GAJA0a,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAasB,KAC5C,CACZ2b,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,GAAIkwB,EACFL,EAAWz7D,KAAKk6D,uBAAuBuB,EAAUC,GACjDC,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,SAC7C,CAGL,GAFAC,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAtBd6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAWN,OAAQljB,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASiC,OAAQk1C,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASm4C,OACT51D,EAAAyd,SAASiC,OACbk1C,EACAE,GAEF,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASm4C,OAAQhB,EAAUE,GACtD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASo4C,OAAQjB,EAAUE,GACtD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASq4C,OAAQlB,EAAUE,GACtD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAMu4B,yBAA0B4Z,GAAW,EAChD,KAAKpyC,EAAAC,MAAMm3B,kBAKT,GAJA2a,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAauB,KAC5C,CACZ0b,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,IAAIh6B,OAAQ,EAGZ,GAAyB,IAArB5R,KAAKsvD,YAAYvhD,MAGnB,GAFA4tD,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOvc,EAAAgF,KAAKY,IAAG,KAClDqvD,EAAY57D,KAAKsvD,cACX19C,EAAW5R,KAAK+vD,gBAAiB,CAErC,KADIz7C,EAAYtU,KAAKya,QAAQxQ,eAAe/I,IAAI,UAChC,CACdlB,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf+b,EAAWtoB,MAAO,SAEpBqf,EAAO9jB,EAAOisC,oBACd,MAGF,KADI3pC,EAAYqS,EAAU9B,QAAU8B,EAAU9B,QAAQtR,IAAI,OAAS,MACnD,CACdlB,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf+b,EAAWtoB,MAAO,aAEpBqf,EAAO9jB,EAAOisC,oBACd,MAEFnoC,OAAOxB,EAAU8L,MAAQ+sC,EAAArxC,YAAYwI,oBACrCjS,KAAK+vD,eAAiBn+C,EAAW5R,KAAKgL,SAASuH,gBAAmCtQ,EAAW,YAsB/F,GAhBAw5D,EAAWz7D,KAAKi6D,kBACdwB,EACAz7D,KAAKsvD,YACL3oD,EAAAgF,KAAKa,IAAG,IAGRyW,GAEFy4C,EAAW17D,KAAKsvD,YAChBqM,EAAY37D,KAAKkzD,kBACfhwC,EACAvc,EAAAgF,KAAKa,IAAG,KAIVovD,EAAY57D,KAAKsvD,cACX19C,EAAW5R,KAAKgwD,gBAAiB,CAErC,KADI17C,EAAYtU,KAAKya,QAAQxQ,eAAe/I,IAAI,SAChC,CACdlB,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf+b,EAAWtoB,MAAO,QAEpBqf,EAAO9jB,EAAOisC,oBACd,MAGF,KADI3pC,EAAYqS,EAAU9B,QAAU8B,EAAU9B,QAAQtR,IAAI,OAAS,MACnD,CACdlB,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf+b,EAAWtoB,MAAO,YAEpBqf,EAAO9jB,EAAOisC,oBACd,MAEFnoC,OAAOxB,EAAU8L,MAAQ+sC,EAAArxC,YAAYwI,oBACrCjS,KAAKgwD,eAAiBp+C,EAAW5R,KAAKgL,SAASuH,gBAAmCtQ,EAAW,MAM/FwhB,EAHI7R,GAAY5R,KAAK6zD,gBAAgBjiD,GAG9B5R,KAAK48D,eAAehrD,GAAY6pD,EAAUE,IAF1Ch8D,EAAOisC,oBAIhB,MAEF,KAAKliB,EAAAC,MAAMw4B,aAAc2Z,GAAW,EACpC,KAAKpyC,EAAAC,MAAMq3B,MAKT,GAJAya,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAawB,KAC5C,CACZyb,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,GAAIkwB,EACFL,EAAWz7D,KAAKk6D,uBAAuBuB,EAAUC,GACjDC,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,gBACZ,CAGL,GAFAqM,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAtBd6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAWN,OAAQljB,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASu4C,OAAQpB,EAAUE,GACtD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASw4C,OACTj2D,EAAAyd,SAASu4C,OACbpB,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASw4C,OAAQrB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS6C,OAAQs0C,EAAUE,GACtD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASy4C,OACTl2D,EAAAyd,SAAS6C,OACbs0C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASy4C,OAAQtB,EAAUE,GACtD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS04C,OAAQvB,EAAUE,GACtD,MAEF,QACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS24C,OAAQxB,EAAUE,GACtD,MAEF,QACEl4D,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAMy4B,eAAgB0Z,GAAW,EACtC,KAAKpyC,EAAAC,MAAMs3B,QAKT,GAJAwa,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAayB,KAC5C,CACZwb,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,GAAIkwB,EACFL,EAAWz7D,KAAKk6D,uBAAuBuB,EAAUC,GACjDC,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,gBACZ,CAGL,GAFAqM,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAtBd6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAWN,OAAQljB,KAAKsvD,YAAYvhD,MACvB,OACA,OAIA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS8C,OAAQq0C,EAAUE,GACtD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAAS44C,OACTr2D,EAAAyd,SAAS8C,OACbq0C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS44C,OAAQzB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS+C,OAAQo0C,EAAUE,GACtD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAAS64C,OACTt2D,EAAAyd,SAAS+C,OACbo0C,EACAE,GAEF,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS64C,OAAQ1B,EAAUE,GACtD,MAEF,QAEE,KADI/pD,EAAW5R,KAAK6vD,gBACL,CAEb,KADIv7C,EAAYtU,KAAKya,QAAQxQ,eAAe/I,IAAI,UAChC,CACdlB,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf+b,EAAWtoB,MAAO,SAEpBqf,EAAO9jB,EAAOisC,oBACd,MAGF,KADI3pC,EAAYqS,EAAU9B,QAAU8B,EAAU9B,QAAQtR,IAAI,OAAS,MACnD,CACdlB,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf+b,EAAWtoB,MAAO,aAEpBqf,EAAO9jB,EAAOisC,oBACd,MAEFnoC,OAAOxB,EAAU8L,MAAQ+sC,EAAArxC,YAAYwI,oBACrCjS,KAAK6vD,eAAiBj+C,EAAW5R,KAAKgL,SAASuH,gBAAmCtQ,EAAW,MAK7FwhB,EAHI7R,GAAY5R,KAAK6zD,gBAAgBjiD,GAG9B5R,KAAK48D,eAAehrD,GAAY6pD,EAAUE,IAF1Ch8D,EAAOisC,oBAIhB,MAEF,QAEE,KADIh6B,EAAW5R,KAAK8vD,gBACL,CACb,IAAIx7C,EASArS,EARJ,KADIqS,EAAYtU,KAAKya,QAAQxQ,eAAe/I,IAAI,SAChC,CACdlB,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf+b,EAAWtoB,MAAO,QAEpBqf,EAAO9jB,EAAOisC,oBACd,MAGF,KADI3pC,EAAYqS,EAAU9B,QAAU8B,EAAU9B,QAAQtR,IAAI,OAAS,MACnD,CACdlB,KAAKuG,MACHG,EAAA5C,eAAe6M,mBACf+b,EAAWtoB,MAAO,YAEpBqf,EAAO9jB,EAAOisC,oBACd,MAEFnoC,OAAOxB,EAAU8L,MAAQ+sC,EAAArxC,YAAYwI,oBACrCjS,KAAK8vD,eAAiBl+C,EAAW5R,KAAKgL,SAASuH,gBAAmCtQ,EAAW,MAK7FwhB,EAHI7R,GAAY5R,KAAK6zD,gBAAgBjiD,GAG9B5R,KAAK48D,eAAehrD,GAAY6pD,EAAUE,IAF1Ch8D,EAAOisC,oBAIhB,MAEF,QACEnoC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAM04B,yBAA0ByZ,GAAW,EAChD,KAAKpyC,EAAAC,MAAMy3B,kBAKT,GAJAqa,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAeuE,QAAO,GACxE1B,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAaqC,aAC5C,CACZ4a,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAKrB,OAFA+vB,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,YACTtvD,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASwC,OAAQ20C,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS+4C,OAAQ5B,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAAS+4C,OACTx2D,EAAAyd,SAASwC,OACb20C,EACAE,GAEF,MAEF,QACA,QAKE,OAJA37D,KAAKuG,MACHG,EAAA5C,eAAew5D,2CACf5wC,EAAWtoB,MAAOslB,EAAA02B,sBAAsB1zB,EAAWG,UAAW7sB,KAAKsvD,YAAYzqD,YAE1ElF,EAAOisC,oBAEhB,QACEnoC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAM24B,+BAAgCwZ,GAAW,EACtD,KAAKpyC,EAAAC,MAAM03B,wBAKT,GAJAoa,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAeuE,QAAO,GACxE1B,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAaiC,aAC5C,CACZgb,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAMrB,OAHA6vB,EAAWz7D,KAAKk6D,uBAAuBuB,EAAUC,GACjDC,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,YACTtvD,KAAKsvD,YAAYvhD,MACvB,OACA,OAIA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS2C,OAAQw0C,EAAUE,GACtD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASi5C,OAAQ9B,EAAUE,GACtD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASi5C,OACT12D,EAAAyd,SAAS2C,OACbw0C,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS4C,OAAQu0C,EAAUE,GACtD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASk5C,OAAQ/B,EAAUE,GACtD,MAEF,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASk5C,OACT32D,EAAAyd,SAAS4C,OACbu0C,EACAE,GAEF,MAEF,QACA,QAKE,OAJA37D,KAAKuG,MACHG,EAAA5C,eAAew5D,2CACf5wC,EAAWtoB,MAAOslB,EAAA02B,sBAAsB1zB,EAAWG,UAAW7sB,KAAKsvD,YAAYzqD,YAE1ElF,EAAOisC,oBAEhB,QACEnoC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAM44B,2CAA4CuZ,GAAW,EAClE,KAAKpyC,EAAAC,MAAM23B,oCAKT,GAJAma,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAeuE,QAAO,GACxE1B,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAakC,eAC5C,CACZ+a,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAMrB,OAHA6vB,EAAWz7D,KAAKk6D,uBAAuBuB,EAAUC,GACjDC,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,YACTtvD,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS4C,OAAQu0C,EAAUE,GAExD,OACA,OACA,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS4C,OAAQu0C,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASk5C,OAAQ/B,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASk5C,OACT32D,EAAAyd,SAAS4C,OACbu0C,EACAE,GAEF,MAEF,QACA,QAKE,OAJA37D,KAAKuG,MACHG,EAAA5C,eAAew5D,2CACf5wC,EAAWtoB,MAAOslB,EAAA02B,sBAAsB1zB,EAAWG,UAAW7sB,KAAKsvD,YAAYzqD,YAE1ElF,EAAOisC,oBAEhB,QACEnoC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAM64B,iBAAkBsZ,GAAW,EACxC,KAAKpyC,EAAAC,MAAM43B,UAKT,GAJAka,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAeuE,QAAO,GACxE1B,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa0B,aAC5C,CACZub,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,GAAIkwB,EACFH,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,gBACZ,CAGL,GAFAqM,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAtBd6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAWN,OAAQljB,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASsC,OAAQ60C,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASm5C,OAAQhC,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASm5C,OACT52D,EAAAyd,SAASsC,OACb60C,EACAE,GAEF,MAEF,QACA,QAKE,OAJA37D,KAAKuG,MACHG,EAAA5C,eAAew5D,2CACf5wC,EAAWtoB,MAAOslB,EAAA02B,sBAAsB1zB,EAAWG,UAAW7sB,KAAKsvD,YAAYzqD,YAE1ElF,EAAOisC,oBAEhB,QACEnoC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAM84B,WAAYqZ,GAAW,EAClC,KAAKpyC,EAAAC,MAAM63B,IAKT,GAJAia,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAeuE,QAAO,GACxE1B,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa2B,YAC5C,CACZsb,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,GAAIkwB,EACFH,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,gBACZ,CAGL,GAFAqM,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAtBd6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAWN,OAAQljB,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASo5C,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASo5C,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASq5C,MAAOlC,EAAUE,GACrD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASq5C,MACT92D,EAAAyd,SAASo5C,MACbjC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA37D,KAAKuG,MACHG,EAAA5C,eAAew5D,2CACf5wC,EAAWtoB,MAAOslB,EAAA02B,sBAAsB1zB,EAAWG,UAAW7sB,KAAKsvD,YAAYzqD,YAE1ElF,EAAOisC,oBAEhB,QACEnoC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAM+4B,aAAcoZ,GAAW,EACpC,KAAKpyC,EAAAC,MAAM83B,MAKT,GAJAga,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAeuE,QAAO,GACxE1B,EAAW17D,KAAKsvD,YAGZtvD,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAC5C,IAAIqoC,EAEEz6B,EADN,GADIy6B,EAAiBugB,EAASvgB,eAG5B,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa4B,aAC5C,CACZqb,EAAOzjB,KAAK+7D,sBAAsBr7C,EAAUuC,EAAMw4C,EAAUv4C,EAAOwJ,GACnE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,GAAIkwB,EACFH,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,gBACZ,CAGL,GAFAqM,EAAY37D,KAAK4yD,4BAA4B1vC,EAAOw4C,EAAQ,GAC5DE,EAAY57D,KAAKsvD,cACbuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwf,EAAUE,GAAW,IAuB1D,OALA57D,KAAKuG,MACHG,EAAA5C,eAAek4D,8CACftvC,EAAWtoB,MAAO,IAAKs3D,EAAS72D,WAAY+2D,EAAU/2D,YAExD7E,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,oBAtBd6vB,EAAWz7D,KAAKi6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB54C,GAEF04C,EAAY37D,KAAKi6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB34C,GAWN,OAAQljB,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASs5C,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASs5C,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASu5C,OAAQpC,EAAUE,GACtD,MAEF,OACA,OACEl4C,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASu5C,OACTh3D,EAAAyd,SAASs5C,OACbnC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA37D,KAAKuG,MACHG,EAAA5C,eAAew5D,2CACf5wC,EAAWtoB,MAAOslB,EAAA02B,sBAAsB1zB,EAAWG,UAAW7sB,KAAKsvD,YAAYzqD,YAE1ElF,EAAOisC,oBAEhB,QACEnoC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAKF,KAAKliB,EAAAC,MAAMi4B,oBAOT,GANA6Z,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAChBqM,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,YAGb7rC,EAAO9jB,EAAOizC,gBAAgB6oB,GAAU,EAAM,GAChDz7D,KAAKq2D,cAAcoF,EAAUz7D,KAAKsvD,aAClC7rC,EAAO9jB,EAAO6qC,SACZxqC,KAAKq2D,cAAcoF,EAAUz7D,KAAKsvD,aAClCqM,EACAl4C,OAIG,CACL,IAAI3F,EAAO9d,KAAK+gB,gBAAgBjD,KAC5B05C,EAAYx3D,KAAK+gB,gBAAgBvC,oBACnCxe,KAAKsvD,aACJxxC,EAAK0F,YAAYi4C,EAAUz7D,KAAKsvD,cAEnC7rC,EAAO9jB,EAAO6qC,SACZxqC,KAAKq2D,cACH12D,EAAOooC,eAAeyvB,EAAUh8C,MAAOigD,GACvCz7D,KAAKsvD,aAEPqM,EACAh8D,EAAOkoC,eACLpkC,OAAO+zD,GAAWh8C,MAClBxb,KAAKsvD,YAAYlxC,iBAIvB,MAEF,KAAKsL,EAAAC,MAAMk4B,QAOT,GANA4Z,EAAWz7D,KAAK4yD,4BAA4B3vC,EAAM41C,EAAc,GAChE6C,EAAW17D,KAAKsvD,YAChBqM,EAAY37D,KAAKkzD,kBAAkBhwC,EAAOw4C,EAAQ,KAClDE,EAAY57D,KAAKsvD,YAGb7rC,EAAOzjB,KAAKL,OAAOizC,gBAAgB6oB,GAAU,EAAM,GACrDh4C,EAAOzjB,KAAKL,OAAO6qC,SACjBxqC,KAAKq2D,cAAcoF,EAAUz7D,KAAKsvD,aAClC7rC,EACAk4C,OAIG,CACD79C,EAAO9d,KAAK+gB,gBAAgBjD,KAC5B05C,EAAYx3D,KAAK+gB,gBAAgBvC,oBACnCxe,KAAKsvD,aACJxxC,EAAK0F,YAAYi4C,EAAUz7D,KAAKsvD,cAEnC7rC,EAAO9jB,EAAO6qC,SACZxqC,KAAKq2D,cACH12D,EAAOooC,eAAeyvB,EAAUh8C,MAAOigD,GACvCz7D,KAAKsvD,aAEP3vD,EAAOkoC,eACLpkC,OAAO+zD,GAAWh8C,MAClBxb,KAAKsvD,YAAYlxC,gBAEnBu9C,GAGJ,MAEF,QACEl4D,QAAO,GACPggB,EAAOzjB,KAAKL,OAAOisC,oBAGvB,OAAOkwB,EACH97D,KAAK24D,2BAA2B11C,EAAMQ,EAAMo1C,GAAkBlyD,EAAAgF,KAAKc,MACnEgX,GAGNyrC,EAAAjtD,UAAA67D,qBAAA,SACE3P,EACA7sD,EACAy8D,EACAvR,GAEA,IAAIwR,EACAC,EAAyB,EAO7B,OANI9P,EAAiBr7C,GAAGrM,EAAApE,YAAY6a,WAClC+gD,EAAUF,EACVC,MAEAA,GAAwB18D,GAEnBtB,KAAKk+D,kBACV/P,EACA6P,EACAxR,EACAyR,EACA9P,EAAiBh6C,aAAa2mC,EAAApxC,eAAe0M,UAIjD84C,EAAAjtD,UAAA85D,sBAAA,SACE5N,EACAlrC,EACAw4C,EACAv4C,EACAspC,GAEA,IAAIwR,EACAC,EAAyB,EAC7B,GAAI9P,EAAiBr7C,GAAGrM,EAAApE,YAAY6a,UAAW,CAC7C,IAAItN,EAASnM,OAAO0qD,EAAiBv+C,QACrCnM,OAAOmM,EAAO7B,MAAQ+sC,EAAArxC,YAAYwT,OAClCghD,EAAUxC,EACVuC,GAAwB96C,QAExB86C,GAAwB/6C,EAAMC,GAShC,OAPUljB,KAAKk+D,kBACb/P,EACA6P,EACAxR,EACAyR,EACA9P,EAAiBh6C,aAAa2mC,EAAApxC,eAAe0M,UAKjD84C,EAAAjtD,UAAAg6D,kBAAA,SAAkBvvC,EAAwByxC,EAA6BtF,GACrE,IAOIld,EANA3wC,EADUhL,KAAKya,QACIzP,SACnB+V,EAAkB/gB,KAAK+gB,gBACvBV,EAASrV,EAAS8/C,kBAAkBp+B,EAAY3L,GACpD,IAAKV,EAAQ,OAAOrgB,KAAKL,OAAOisC,oBAIhC,OAAQvrB,EAAOtS,MACb,KAAK+sC,EAAArxC,YAAY2K,OACf,IAAKpU,KAAKwyD,cAAsBnyC,GAC9B,OAAOrgB,KAAKL,OAAOisC,oBAErBnoC,OAAgB4c,EAAQrO,MAAQrL,EAAAgF,KAAKc,MAGvC,KAAKquC,EAAArxC,YAAYgS,MACjB,KAAKq/B,EAAArxC,YAAY+V,MACfm8B,EAAmCt7B,EAAQrO,KAC3C,MAEF,KAAK8oC,EAAArxC,YAAYyO,SACf,IAAIE,EAA6BiI,EAAQjI,gBACzC,GAAIA,EAAiB,CACnB,IAAIxG,EAAW5R,KAAKgL,SAASuH,gBAAgB6F,EAAiB,MAC9D,IAAKxG,EAAU,OAAO5R,KAAKL,OAAOisC,oBAClCnoC,OAAmD,GAA5CmO,EAASa,UAAUC,eAAepN,QACzCq2C,EAAa/pC,EAASa,UAAUC,eAAe,GAC/C,MAMF,OAJA1S,KAAKuG,MACHG,EAAA5C,eAAes6D,oEACf1xC,EAAWtoB,MAAkBic,EAAQ3S,cAEhC1N,KAAKL,OAAOisC,oBAErB,KAAKkP,EAAArxC,YAAYwT,MACf,GAAIjS,EAASk+C,yBAA0B,CACrC,IAAImV,EAAct9C,EAAgBjD,KAAKhL,GAAE,MACrCwrD,EAAqBj+C,EAAQE,eAAeu6B,EAAAt0C,aAAaiB,YAAa42D,GAC1E,IAAKC,EAaH,OAZyBj+C,EAAQE,eAAeu6B,EAAAt0C,aAAagB,YAAa62D,GAOxEr+D,KAAKuG,MACHG,EAAA5C,eAAey6D,+CACf7xC,EAAWtoB,MAAeic,EAAQ3S,cAPpC1N,KAAKuG,MACHG,EAAA5C,eAAeonD,qCACfx+B,EAAWtoB,MAAeic,EAAQ3S,cAQ/B1N,KAAKL,OAAOisC,oBAErBnoC,OAAqD,GAA9C66D,EAAW7rD,UAAUC,eAAepN,QAC3Cq2C,EAAa2iB,EAAW7rD,UAAUC,eAAe,GACjD,MAIJ,QAKE,OAJA1S,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAKvBnoC,OAAOk4C,GAAch1C,EAAAgF,KAAKc,MAC1B,IAAIsxD,EAAY/9D,KAAKkzD,kBAAkBiL,EAAiBxiB,EAAU,KAClE,OAAO37C,KAAK24D,2BACVjsC,EACAqxC,EACAlF,GAAkBlyD,EAAAgF,KAAKc,OAI3ByiD,EAAAjtD,UAAA02D,2BAAA,SACEjsC,EACA8xC,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAI9+D,EAASK,KAAKL,OACd0gB,EAASrgB,KAAKgL,SAAS8/C,kBAAkBp+B,EAAY1sB,KAAK+gB,iBAC9D,IAAKV,EAAQ,OAAO1gB,EAAOisC,oBAE3B,OAAQvrB,EAAOtS,MACb,KAAK+sC,EAAArxC,YAAYgS,MACf,IAAIzJ,EAAeqO,EAAQrO,KAG3B,GAFAvO,OAAOuO,GAAQrL,EAAAgF,KAAKc,MACpBzM,KAAKsvD,YAAcmP,EAAMzsD,EAAOrL,EAAAgF,KAAKc,KACzB4T,EAAQvN,GAAGrM,EAAApE,YAAYkY,OAKjC,OAJAva,KAAKuG,MACHG,EAAA5C,eAAes6D,oEACf1xC,EAAWtoB,MAAOic,EAAO3S,cAEpB/N,EAAOisC,oBAEhB,IAAI9tB,EAAO9d,KAAK+gB,gBAAgBjD,KAIhC,OAHI9L,EAAKc,GAAG,KACVgL,EAAKQ,gBAAwB+B,EAAQ7E,OAAQsC,EAAK0F,YAAYg7C,EAAsBxsD,IAE/EysD,EACH9+D,EAAOooC,eAAuB1nB,EAAQ7E,MAAOgjD,GAC7C7+D,EAAOgqC,eAAuBtpB,EAAQ7E,MAAOgjD,GAEnD,KAAK1jB,EAAArxC,YAAY2K,OACf,IAAKpU,KAAKwyD,cAAsBnyC,GAAS,OAAO1gB,EAAOisC,oBACnD55B,EAAgBqO,EAAQrO,KAG5B,GAFAvO,OAAOuO,GAAQrL,EAAAgF,KAAKc,MACpBzM,KAAKsvD,YAAcmP,EAAMzsD,EAAOrL,EAAAgF,KAAKc,KACzB4T,EAAQvN,GAAGrM,EAAApE,YAAYkY,OAMjC,OALAva,KAAKuG,MACHG,EAAA5C,eAAes6D,oEACf1xC,EAAWtoB,MACXic,EAAO3S,cAEF/N,EAAOisC,oBAGhB,GADA4yB,EAAuBx+D,KAAKk6D,uBAAuBsE,EAAsBxsD,GACrEysD,EAAK,CACP,IAAIpN,EAAar/C,EAAKoM,eAClB1Q,EAAe2S,EAAO3S,aAC1B,OAAO/N,EAAOoqC,YAAY,MACxBpqC,EAAOkqC,gBAAgBn8B,EAAc8wD,GACrC7+D,EAAOsoC,gBAAgBv6B,EAAc2jD,IACpCA,GAEH,OAAO1xD,EAAOkqC,gBAAgBxpB,EAAO3S,aAAc8wD,GAGvD,KAAK1jB,EAAArxC,YAAY+V,MACf,IAAMpQ,EAAsBiR,EAAQjR,YACpC,GACUiR,EAAQvN,GAAGrM,EAAApE,YAAYgU,YAE7BrW,KAAK+gB,gBAAgBjO,GAAGrM,EAAApE,YAAYuU,cACrB,MAAfxH,GAC2B,MAA3BA,EAAYkM,YAOd,OAJAtb,KAAKuG,MACHG,EAAA5C,eAAes6D,oEACf1xC,EAAWtoB,MAAeic,EAAQ3S,cAE7B/N,EAAOisC,oBAEhB,IAAI8yB,EAAiBj7D,OAAOzD,KAAKgL,SAASi+C,uBACtC0V,EAAW3+D,KAAK4yD,4BAClB8L,EACA1+D,KAAK0L,QAAQW,UAAS,GAGpB2F,EAAeqO,EAAQrO,KAC3BhS,KAAKsvD,YAAcmP,EAAMzsD,EAAOrL,EAAAgF,KAAKc,KACjC4kD,EAAar/C,EAAKoM,eAKtB,GAJa,IAATpM,EAAKjE,OAEPywD,EAAuBx+D,KAAKk6D,uBAAuBsE,EAAsBxsD,IAEvEysD,EAAK,CAEH3gD,GADAiD,EAAkB/gB,KAAK+gB,iBACAjD,KAD3B,IAMI25C,EAJY12C,EAAgBvC,oBAC9BxM,GACC8L,EAAK0F,YAAYg7C,EAAsBxsD,IAEXwJ,MAG/B,OAAO7b,EAAOoqC,YAAY,MACxBpqC,EAAOgqC,eAAe8tB,EAAgB+G,GACtC7+D,EAAO6oC,YACLx2B,EAAKwX,SACLm1C,EACAh/D,EAAOkoC,eAAe4vB,EAAgBpG,GACtCA,EACQhxC,EAAQZ,cAElB9f,EAAOkoC,eAAe4vB,EAAgBpG,IACrCA,GAGH,OAAO1xD,EAAO6oC,YACZx2B,EAAKwX,SACLm1C,EACAH,EACAnN,EACQhxC,EAAQZ,cAItB,KAAKq7B,EAAArxC,YAAYyO,SACf,IAAIE,EAA6BiI,EAAQjI,gBACzC,GAAIA,EAAiB,CACnB,IAAIwmD,EAAiB5+D,KAAKgL,SAASuH,gBAAgB6F,EAAiB,MACpE,IAAKwmD,EAAgB,OAAOj/D,EAAOisC,oBAGnC,IAAK6yB,EAAK,CACR,GAAIG,EAAe9rD,GAAGrM,EAAApE,YAAY6a,UAAW,CACvCwhD,EAAiBj7D,OAAOzD,KAAKgL,SAASi+C,uBACtC0V,EAAW3+D,KAAK4yD,4BAClB8L,EACA1+D,KAAK0L,QAAQW,UAAS,GAGxB,OAAOrM,KAAK48D,eAAegC,GAAkBD,EAAUH,IAEvD,OAAOx+D,KAAK48D,eAAegC,GAAkBJ,IAKjD,IAAIrmD,EAA6BkI,EAAQlI,gBACzC1U,OAA0B,MAAnB0U,GACP,IAAI0mD,EAAiB7+D,KAAKgL,SAASuH,gBAAmC4F,EAAiB,MACvF,IAAK0mD,EAAgB,OAAOl/D,EAAOisC,oBACnC,IACIkzB,GADAlsD,EAAaisD,EAAepsD,UAAUG,YACRwL,eAClC,GAAIwgD,EAAe9rD,GAAGrM,EAAApE,YAAY6a,UAAW,CACvCwhD,EAAiBj7D,OAAOzD,KAAKgL,SAASi+C,uBACtC0V,EAAW3+D,KAAK4yD,4BAClB8L,EACA1+D,KAAK0L,QAAQW,UAAS,GAIpBorD,EADYz3D,KAAK+gB,gBAAgBvC,oBAAoB5L,GAAY,GACtC4I,MAC/B,OAAO7b,EAAOoqC,YAAY,MACxB/pC,KAAK48D,eAAegC,GAClBj/D,EAAOooC,eAAe0vB,EAAgBkH,GACtCH,IAEFx+D,KAAK48D,eAAeiC,GAClBl/D,EAAOkoC,eAAe4vB,EAAgBqH,MAEvCA,GAGH,OAAOn/D,EAAOoqC,YAAY,MACxB/pC,KAAK48D,eAAegC,GAAkBJ,IACtCx+D,KAAK48D,eAAeiC,IACnBC,GAQP,OALE9+D,KAAKuG,MACHG,EAAA5C,eAAes6D,oEACf1xC,EAAWtoB,MAAOic,EAAO3S,cAGtB/N,EAAOisC,oBAEhB,KAAKkP,EAAArxC,YAAYwT,MACf,IAAI0Q,EAAoB3tB,KAAKgL,SAASk+C,yBACtC,GAAIv7B,EAAmB,CACrB,IAAI0wC,EAAcr+D,KAAK+gB,gBAAgBjD,KAAKhL,GAAE,MAC1Cm4C,EAAqB5qC,EAAQE,eAAeu6B,EAAAt0C,aAAagB,YAAa62D,GAC1E,IAAKpT,EAKH,OAJAjrD,KAAKuG,MACHG,EAAA5C,eAAeonD,qCACfx+B,EAAWtoB,MAAOic,EAAO3S,cAEpB/N,EAAOisC,oBAEhB,IAAI0yB,EAAqBj+C,EAAQE,eAAeu6B,EAAAt0C,aAAaiB,YAAa42D,GAC1E,IAAKC,EAMH,OALAt+D,KAAKuG,MACHG,EAAA5C,eAAey6D,+CACf7xC,EAAWtoB,MAAOic,EAAO3S,cAE3B1N,KAAKsvD,YAAcmP,EAAMxT,EAAWx4C,UAAUG,WAAajM,EAAAgF,KAAKc,KACzD9M,EAAOisC,oBAEhB,IAAI+P,EAAqBt7B,EAAQrO,KAO7B+sD,GANAL,EAAiBj7D,OAAOzD,KAAKgL,SAASi+C,uBACtC0V,EAAW3+D,KAAK4yD,4BAClB8L,EACA1+D,KAAK0L,QAAQW,UAAS,GAGNrM,KAAKkzD,kBACrBvlC,EACAhnB,EAAAgF,KAAKG,IAAG,MAIV,GAAI2yD,EAAK,CACP,IAAI19C,EACAi+C,GADAj+C,EAAkB/gB,KAAK+gB,iBACW9C,aAAa09B,GAAY,GAC3DsjB,EAAmBl+C,EAAgBvC,oBAAoBxe,KAAKsvD,aAAa,GACzE18C,EAAaq4C,EAAWx4C,UAAUG,WAEtC,OADA5S,KAAK+gB,gBAAgBxC,cAAcygD,GAC5Br/D,EAAOoqC,YAAY,MACxB/pC,KAAK48D,eAAe0B,GAClB3+D,EAAOooC,eAAei3B,EAAgBxjD,MAAOmjD,GAC7Ch/D,EAAOooC,eAAek3B,EAAiBzjD,MAAOujD,GAC9CP,IAEFx+D,KAAK48D,eAAe3R,GAClBtrD,EAAOkoC,eAAem3B,EAAgBxjD,MAAOwjD,EAAgBhtD,KAAKoM,gBAClEze,EAAOkoC,eAAeo3B,EAAiBzjD,MAAOyjD,EAAiBjtD,KAAKoM,mBAErExL,EAAWwL,gBAEd,OAAOpe,KAAK48D,eAAe0B,GACzBK,EACAI,EACAP,KAWV,OAJAx+D,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,qBAGhBsjB,EAAAjtD,UAAAm3D,sBAAA,SAAsB1sC,EAA4BmsC,GAChD,IAKIpmD,EACAysD,EANAv/D,EAASK,KAAKL,OACdohB,EAAkB/gB,KAAK+gB,gBACvBV,EAASrgB,KAAKgL,SAAS8/C,kBAAkBp+B,EAAWA,WAAY3L,GACpE,IAAKV,EAAQ,OAAO1gB,EAAOisC,oBAI3B,OAAQvrB,EAAOtS,MAGb,KAAK+sC,EAAArxC,YAAYwI,mBACf,IAAIhQ,EAA+Boe,EAC/BV,EAAgB+M,EAAW/M,cAG/B,GAAI1d,EAAUkS,aAAa2mC,EAAApxC,eAAemK,SACxC,OAAO7T,KAAKm/D,6BAA6Bl9D,EAAWyqB,EAAYmsC,GAGlE,IAAIjnD,EAA4B,KAGhC,GAAI+N,EAAe,CACjB,IAAK1d,EAAU6Q,GAAGrM,EAAApE,YAAY+P,SAK5B,OAJApS,KAAKuG,MACHG,EAAA5C,eAAe0lD,sBACf98B,EAAWA,WAAWtoB,MAAOnC,EAAUyL,cAElC/N,EAAOisC,oBAEhBh6B,EAAW5R,KAAKgL,SAASwgD,iCACvBvpD,EACA0d,EACA3f,KAAK+gB,gBAAgBjD,KAAKhC,wBAC1B4Q,OAIG,IAAIzqB,EAAU6Q,GAAGrM,EAAApE,YAAY+P,SAAU,CAI5C,IAHA,IAAIgtD,EAAgB,IAAIx1D,IACpByQ,EAAiB5W,OAAOxB,EAAUmN,YAAYiL,gBAC9CglD,EAAoBhlD,EAAe/U,OAC9BjF,EAAI,EAAGA,EAAIg/D,IAAqBh/D,EACvC++D,EAAc3xD,IAAI4M,EAAeha,GAAGO,KAAKwE,KAAM,MAGjD,IAAIsN,EAAiBzQ,EAAUmN,YAAYqD,UAAU2Y,WACjDk0C,EAAoB5sD,EAAepN,OACnC04D,EAAsBtxC,EAAWxV,UACjCqoD,EAAevB,EAAoB14D,OACnCk6D,EAAgB,IAAIr5D,MAAqBo5D,GAC7C,IAASl/D,EAAI,EAAGA,EAAIi/D,IAAqBj/D,EAAG,CAC1C,IAAIkpD,EAAW72C,EAAerS,GAAG2R,KAC7BpR,EAAO2oD,EAASx7C,MAAQnH,EAAAoH,SAASunB,KAAkBg0B,EAAU3oD,KAAKwE,KAAO,KACzEq6D,EAAqBp/D,EAAIk/D,EACzBvB,EAAoB39D,GACpB4B,EAAUmN,YAAYqD,UAAU2Y,WAAW/qB,GAAGib,YAClD,IAAKmkD,EAKH,OAJAz/D,KAAKuG,MACHG,EAAA5C,eAAe+T,+BACf6U,EAAWtoB,MAAOk7D,EAAkBz6D,SAAS,IAAK06D,EAAa16D,SAAS,KAEnElF,EAAOisC,oBAEhB,GAAa,OAAThrC,GAAiBw+D,EAAcztD,IAAI/Q,GAAO,CAE5C,GADI8+D,EAAeN,EAAcl+D,IAAIN,GACnB,CAChB4+D,EAAcn/D,GAAKL,KAAK4yD,4BAA4B6M,EAAoBC,EAAY,GACpF,IAAI7D,OAAU,EACd,KAAMA,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwjB,EAAc1/D,KAAKsvD,aAAa,OACjEuM,EAAal1D,EAAAgF,KAAKuwC,iBAAiBwjB,EAAc1/D,KAAKsvD,aAAa,IAKvE,OAJAtvD,KAAKuG,MACHG,EAAA5C,eAAe+uD,mCACfngD,EAAerS,GAAG2R,KAAK5N,MAAOpE,KAAKsvD,YAAYzqD,WAAY66D,EAAa76D,YAEnElF,EAAOisC,oBAGlB8zB,EAAe7D,OAEf2D,EAAcn/D,GAAKL,KAAK4yD,4BAA4B6M,EAAoB94D,EAAAgF,KAAKG,IAAG,GAChF4zD,EAAe1/D,KAAKsvD,YAGtB8P,EAAc3xD,IAAI7M,EAAM8+D,OACnB,CACL,IAAIC,EAAe3/D,KAAKgL,SAASm+C,YAC/Bz2C,EAAerS,GAAG2R,KAClBhS,KAAK+gB,gBAAgBjD,KAAKhC,yBAE5B,IAAK6jD,EAAc,OAAOhgE,EAAOisC,oBACjC4zB,EAAcn/D,GAAKL,KAAKkzD,kBACtBuM,EACAE,EAAY,MAMlB,IAAIlT,EAAwB,IAAItmD,MAAYk5D,GAC5C,IAASh/D,EAAI,EAAGA,EAAIg/D,IAAqBh/D,EAAG,CAC1C,IAAIq/D,EAAej8D,OAAO27D,EAAcl+D,IAAImZ,EAAeha,GAAGO,KAAKwE,OACnEqnD,EAAsBpsD,GAAKq/D,EAO7B,OALA9tD,EAAW5R,KAAKgL,SAASuH,gBACvBtQ,EACAwqD,EACAzsD,KAAK+gB,gBAAgBjD,KAAKhC,0BAGrB9b,KAAK48D,eAAehrD,EAAU4tD,GADfx/D,KAAKL,OAAOisC,oBAQlCh6B,EAAW5R,KAAKgL,SAASuH,gBACvBtQ,EACA,KACAjC,KAAK+gB,gBAAgBjD,KAAKhC,yBAG9B,IAAKlK,EAAU,OAAO5R,KAAKL,OAAOisC,oBAGlC,IAAI+yB,EAA0B,EAS9B,OARI/sD,EAASkB,GAAGrM,EAAApE,YAAY6a,YAC1ByhD,EAAW3+D,KAAK4yD,4BACdnvD,OAAOzD,KAAKgL,SAASi+C,uBACrBjpD,KAAK0L,QAAQW,UAAS,IAKnBrM,KAAKk+D,kBACVtsD,EACA8a,EAAWxV,UACXwV,EACAiyC,EACA/sD,EAASuC,aAAa2mC,EAAApxC,eAAe0M,SAKzC,KAAK0kC,EAAArxC,YAAYgS,MACf,GAAIhJ,EAAoB4N,EAAQrO,KAAKW,mBAAoB,CACvDusD,EAAWv/D,EAAOkoC,eAAuBxnB,EAAQ7E,MAAK,GACtD,MAMA,OAJAxb,KAAKuG,MACHG,EAAA5C,eAAe4nD,uGACfh/B,EAAWtoB,MAAeic,EAAQrO,KAAKnN,YAElClF,EAAOisC,oBAGlB,KAAKkP,EAAArxC,YAAY2K,OACf,GAAI3B,EAAqB4N,EAAQrO,KAAKW,mBAAoB,CACxDusD,EAAWv/D,EAAOsoC,gBAAyB5nB,EAAQ3S,aAAuB2S,EAAQrO,KAAKoM,gBACvF,MAMA,OAJApe,KAAKuG,MACHG,EAAA5C,eAAe4nD,uGACfh/B,EAAWtoB,MAAgBic,EAAQrO,KAAKnN,YAEnClF,EAAOisC,oBAGlB,KAAKkP,EAAArxC,YAAY+V,MAEf,GAAI/M,EADe4N,EAAQrO,KACNW,mBAAoB,CACvC,IAAI+rD,EAAiBj7D,OAAOzD,KAAKgL,SAASi+C,uBACtC0V,EAAW3+D,KAAK4yD,4BAClB8L,EACA1+D,KAAK0L,QAAQW,UAAS,GAGxB6yD,EAAWv/D,EAAOwoC,WAChB,GACA,EACAw2B,EAAQ,EAEAt+C,EAAQZ,cAElB,MAMA,OAJAzf,KAAKuG,MACHG,EAAA5C,eAAe4nD,uGACfh/B,EAAWtoB,MAAeic,EAAQrO,KAAKnN,YAElClF,EAAOisC,oBAGlB,KAAKkP,EAAArxC,YAAY0V,gBACf1M,EAA6B4N,EAAQ5N,UACrCysD,EAAWl/D,KAAKkzD,kBACdxmC,EAAWA,WACMrM,EAAQrO,KAAI,KAI/B,MAEF,KAAK8oC,EAAArxC,YAAYyO,SAGjB,QAKE,OAJAlY,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,oBAGlB,OAAO5rC,KAAK4/D,oBACVntD,EACAysD,EACAxyC,EAAWxV,UACXwV,IAIIwiC,EAAAjtD,UAAAk9D,6BAAR,SACEl9D,EACAyqB,EACAmsC,GAEA,IAAIl5C,EAA+B,KAI/B+pC,EAAoBh9B,EAAW/M,cAC/B+M,EAAW/M,gBACR1d,EAAU6Q,GAAGrM,EAAApE,YAAY+P,UAC5BpS,KAAKuG,MACHG,EAAA5C,eAAe0lD,sBACf98B,EAAWtoB,MAAOnC,EAAUyL,cAGhCiS,EAAgB3f,KAAKgL,SAASm/C,qBAC5B1mD,OAAOxB,EAAUmN,YAAYiL,gBAC7BqvC,EACA1pD,KAAK+gB,gBAAgBjD,KAAKhC,wBAC1B4Q,IAKJ,IAAIjJ,EAAO6qC,EAAAuR,YACT7/D,KACAiC,EACA0d,EACA+M,EAAWxV,UACX2hD,EACAnsC,GAEF,OAAKjJ,IACHzjB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,sBASvBsjB,EAAAjtD,UAAA69D,mBAAA,SACErtD,EACA8sD,EACAQ,EACAvT,GAKA,GAAIuT,IAAwB,MADbttD,EAAU2K,UAMvB,OAJApd,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfw3C,EAAWpoD,QAEN,EAIT,IAAI44C,EAAUvqC,EAAUuqC,QACxB,GAAIA,EAKF,OAJAh9C,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfw3C,EAAWpoD,QAEN,EAGT,IAAI47D,EAAUvtD,EAAUsqC,mBACpBxO,EAAU97B,EAAUC,eAAepN,OAGvC,OAAIi6D,EAAeS,GACjBhgE,KAAKuG,MACHy5D,EAAUzxB,EACN7nC,EAAA5C,eAAem8D,wCACfv5D,EAAA5C,eAAe+T,+BACnB20C,EAAWpoD,MAAO47D,EAAQn7D,WAAY06D,EAAa16D,aAE9C,KAIL06D,EAAehxB,IAAYyO,KAC7Bh9C,KAAKuG,MACHG,EAAA5C,eAAe+T,+BACf20C,EAAWpoD,MAAOmqC,EAAQ1pC,WAAY06D,EAAa16D,aAE9C,IAOXqqD,EAAAjtD,UAAAi8D,kBAAA,SACEtsD,EACAosD,EACAxR,EACAyR,EACAiC,QADA,IAAAjC,MAAA,QACA,IAAAiC,OAAA,GAEA,IAAIX,EAAevB,EAAoB14D,OACnCmN,EAAYb,EAASa,UAEzB,IAAKzS,KAAK8/D,mBACRrtD,EACA8sD,EACW,GAAXtB,EACAzR,GAEA,OAAOxsD,KAAKL,OAAOisC,oBAIrB,GAAIs0B,EAAQ,CAEV,GADAz8D,QAAQmO,EAASkB,GAAGrM,EAAApE,YAAY2yD,cAC5Bh1D,KAAKovD,uBAAuB+Q,SAASvuD,GAKlC,CACL5R,KAAKovD,uBAAuBvpD,KAAK+L,GACjC,IAAI6R,EAAOzjB,KAAKogE,2BAA2BxuD,EAAUosD,EAAqBxR,EAAYyR,GAEtF,OADAj+D,KAAKovD,uBAAuB/wC,MACrBoF,EARPzjB,KAAKsG,QACHI,EAAA5C,eAAeu8D,yCACf7T,EAAWpoD,MAAOwN,EAASlE,cAWjC,IAAI4yD,EAAuBrC,EAAUsB,EAAe,EAAIA,EACpD73B,EAAW,IAAIvhC,MAAqBm6D,GACpC9kD,EAAQ,EACRyiD,IACFv2B,EAAS,GAAKu2B,EACdziD,EAAQ,GAGV,IADA,IAAI9I,EAAiBD,EAAUC,eACtBrS,EAAI,EAAGA,EAAIk/D,IAAgBl/D,IAAKmb,EACvCksB,EAASlsB,GAASxb,KAAKkzD,kBACrB8K,EAAoB39D,GACpBqS,EAAerS,GAAE,KAMrB,OADAoD,OAAO+X,GAAS8kD,GACTtgE,KAAK48D,eAAehrD,EAAU81B,IAI/BwnB,EAAAjtD,UAAAm+D,2BAAR,SACExuD,EACAosD,EACAxR,EACAyR,gBAAA,IAAAA,MAAA,GAEA,IAAIsB,EAAevB,EAAoB14D,OACnCmN,EAAYb,EAASa,UACrBsO,EAAkB/gB,KAAK+gB,gBACvBphB,EAASK,KAAKL,OACdyP,EAAcwC,EAAS3P,UAAUmN,YAGjCmxD,EAAex/C,EAAgBjD,KAC/BqD,EAAcvP,EAASlE,aAAe,aAAekE,EAAS+K,gBAAgB9X,SAAS,IACvF+N,EAAahB,EAASa,UAAUG,WAChCkL,EAAOg9B,EAAA/8B,KAAKpc,OAAOof,GACvBjD,EAAKrQ,IAAG,MACRqQ,EAAKqD,YAAcA,EACnBrD,EAAKlL,WAAaA,EAClBkL,EAAKhC,wBAA0BlK,EAASkK,wBAIxC,IAAIyX,KACJ,GAAI0qC,EAAS,CACX,IAAIruD,EAASnM,OAAOmO,EAAShC,QAE7B,GADAnM,OAAOmM,EAAO7B,MAAQ+sC,EAAArxC,YAAYwT,OAC9BpW,EAAA8c,gBAAgBs6C,IAAYp3D,EAAA+c,aAAaC,SAC3C/F,EAAKiE,oBACHlb,EAAAid,iBAAiBm6C,GACTruD,EAAQoC,KAChB,YAEG,CACL,IAAIwuD,EAAY1iD,EAAK+D,eAAuBjS,EAAQoC,KAAM,QAAQ,GAClEuhB,EAAK1tB,KACHlG,EAAOgqC,eAAe62B,EAAUhlD,MAAOyiD,KAK7C,IADA,IAAIvrD,EAAiBD,EAAUC,eACtBrS,EAAI,EAAGA,EAAIk/D,IAAgBl/D,EAAG,CACrC,IAAIogE,EAAYzgE,KAAKkzD,kBACnB8K,EAAoB39D,GACpBqS,EAAerS,GAAE,KAInB,GAAIwG,EAAA8c,gBAAgB88C,IAAc55D,EAAA+c,aAAaC,SAC7C/F,EAAKiE,oBACHlb,EAAAid,iBAAiB28C,GACjB/tD,EAAerS,GACfoS,EAAUoL,iBAAiBxd,QAGxB,CACL,IAAIqgE,EAAgB5iD,EAAK+D,eACvBnP,EAAerS,GACfoS,EAAUoL,iBAAiBxd,IAC1Byd,EAAK0F,YAAYi9C,EAAW/tD,EAAerS,KAE9CkzB,EAAK1tB,KACHlG,EAAOgqC,eAAe+2B,EAAcllD,MAAOilD,KAMjD1/C,EAAgBjD,KAAOA,EACvB,IAAIw/B,EAAgB7qC,EAAUC,eAAepN,OAC7C,IAASjF,EAAIk/D,EAAcl/D,EAAIi9C,IAAiBj9C,EAAG,CACjD,IAAIqyD,EAAW1yD,KAAKkzD,kBAClBzvD,OAAO2L,EAAYqD,UAAU2Y,WAAW/qB,GAAGib,aAC3C5I,EAAerS,GAAE,KAIfqgE,EAAgB5iD,EAAK+D,eACvBnP,EAAerS,GACfoS,EAAUoL,iBAAiBxd,IAC1Byd,EAAK0F,YAAYkvC,EAAUhgD,EAAerS,KAE7CkzB,EAAK1tB,KACHlG,EAAOgqC,eAAe+2B,EAAcllD,MAAOk3C,IAK/C,IAAIkE,EAAgBnzD,OAAO2L,EAAYmkB,MACvC,GAAIqjC,EAAc7oD,MAAQnH,EAAAoH,SAASwpB,MAEjC,IADA,IAAI5pB,EAA8BgpD,EAAehpD,WACjCvC,GAAPhL,EAAI,EAAOuN,EAAWtI,QAAQjF,EAAIgL,IAAKhL,EAAG,CACjD,IAAIqrB,EAAO1rB,KAAKsyD,iBAAiB1kD,EAAWvN,IAC5C,GAAIwG,EAAA8c,gBAAgB+H,IAAS7kB,EAAA+c,aAAaqyC,MACxC1iC,EAAK1tB,KAAK6lB,GACN5N,EAAK3L,MAAK,KAA6B,WAI/CohB,EAAK1tB,KAAK7F,KAAKsyD,iBAAiBsE,IAIlC,IAAI91C,EAAehD,EAAKgD,aACxB,GAAIA,EAAc,KAChB,IAAwB,IAAAtD,EAAAzN,EAAA+Q,EAAalI,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAA1C,IAAI0R,EAAWxR,EAAA7O,MACdqgB,EAAY7O,GAAGrM,EAAApE,YAAYuf,SAC7Bb,EAAgBxC,cAAcoD,qGAGlC7D,EAAKgD,aAAe,KAOtB,OALAhD,EAAKc,WACL5e,KAAK+gB,gBAAgBjD,KAAOyiD,EAC5BvgE,KAAKsvD,YAAc18C,EAGfA,GAAcjM,EAAAgF,KAAKc,MAASqR,EAAK3L,MAAK,IAOnCxS,EAAOoqC,YAAY5oB,EAAaoS,EAAM3gB,EAAWwL,iBANtDpe,KAAKuG,MACHG,EAAA5C,eAAewwD,+DACfllD,EAAYqD,UAAUG,WAAWxO,OAE5BzE,EAAOisC,sBAMlBsjB,EAAAjtD,UAAAgvD,iBAAA,SAAiB0P,GAQf,IAAIpkD,EAAaokD,EAASpkD,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIqkD,EAAoBD,EAASluD,UAC7BouD,EAAeF,EAASjzD,aACxBozD,EAAyBF,EAAkBluD,eAC3CquD,EAAgCJ,EAAS1+D,UAAUmN,YAAYqD,UAAU2Y,WACzE41C,EAAmBJ,EAAkBhuD,WACrCquD,EAAiBL,EAAkBxjD,SACnCuuC,EAAagV,EAAS7tD,GAAGrM,EAAApE,YAAY6a,UAGrCgkD,EAAeN,EAAkB7jB,mBACjCokB,EAAcD,EACdE,EAAeN,EAAuBx7D,OACtC+7D,EAAcD,EACdzV,MACAwV,IACAE,GAEJ,IAAIC,EAAc79D,OAAO49D,EAAcF,GAEnCI,EAAoB,IAAIp7D,MAAqBg7D,GAC7CK,EAAe,EAGf7hE,EAASK,KAAKL,OACdgsD,IACF4V,EAAkB,GAAK5hE,EAAOkoC,eAAe,EAAG7nC,KAAK0L,QAAQ4lD,gBAC7DkQ,EAAe,GAIjB,IAAK,IAAInhE,EAAI,EAAGA,EAAI6gE,IAAgB7gE,IAAKmhE,EACvCD,EAAkBC,GAAgB7hE,EAAOkoC,eAAe25B,EAAcV,EAAuBzgE,GAAG+d,gBAElG3a,OAAO+9D,GAAgBL,GAGvB,IAAIM,EAAsB,IAAI96D,EAAAi2C,UAAUkkB,EAAwBE,EAAkBC,GAC9ES,EAAiBb,EAAe,cACpCY,EAAoB1kB,mBAAqBqkB,GACzC7kD,EAAa,IAAIu+B,EAAAj/B,SACf8kD,EAAS1+D,UACTy/D,EACAD,EACAd,EAAS/wD,OACT+wD,EAAS7kD,0BAEArO,IAAIkzD,EAASjmD,MAAQjU,EAAApE,YAAY2yD,WAAavuD,EAAApE,YAAY8uD,UACrEwP,EAASpkD,WAAaA,EAItB,IAAI81C,EAAmBryD,KAAK+gB,gBAC5B/gB,KAAK+gB,gBAAkBxE,EAGvB,IAAI2uB,EAAWo2B,EAAc,EACzBzyC,EAAQ,IAAI1oB,MAAc+kC,GAC1By2B,EAAM,KAAOL,EAAYz8D,SAAS,IACtC,IAASxE,EAAI,EAAGA,EAAI6qC,IAAY7qC,EAAG,CACjC,IAAIswB,EAAQtwB,EAAEwE,SAAS,IAAM88D,EAC7B9yC,EAAMxuB,GAAKswB,EAEb,IAAI4C,EAAO5zB,EAAOoqC,YAAYlb,EAAM,IAClClvB,EAAOoqC,YAAY,cACjBpqC,EAAOqrC,aAAanc,EAAO,aAEzBqyC,EACIvhE,EAAO4nC,aACL1gC,EAAAyd,SAAS+3C,OACT18D,EAAOsoC,gBAAgB,QAAO,GAC9BtoC,EAAO6mC,UAAU06B,IAEnBvhE,EAAOsoC,gBAAgB,QAAO,MAGtCtoC,EAAOisC,sBAET,IAASvrC,EAAI,EAAGA,EAAIihE,IAAejhE,IAAKmhE,EAAc,CACpD,IAAIxvD,EAAO8uD,EAAuBI,EAAe7gE,GAC7C+O,EAAc2xD,EAA8BG,EAAe7gE,GAC3Dib,EAAclM,EAAYkM,YAC1Bo3C,OAAQ,EACRp3C,EACFo3C,EAAW/yD,EAAOgqC,eAAe63B,EAC/BxhE,KAAKkzD,kBACH53C,EACAtJ,EAAI,OAMRhS,KAAKuG,MACHG,EAAA5C,eAAe89D,4CACfxyD,EAAYhL,OAEdsuD,EAAW/yD,EAAOisC,qBAEpBrY,EAAO5zB,EAAOoqC,YAAYlb,EAAMxuB,EAAI,IAClCkzB,EACAm/B,IAEF6O,EAAkBC,GAAgB7hE,EAAOkoC,eAAe25B,EAAcxvD,EAAKoM,gBAE7Epe,KAAK+gB,gBAAkBsxC,EACvB5uD,OAAO+9D,GAAgBH,GAEvB,IAAI/Q,EAAU3wD,EAAOssC,YACnBy1B,EACA1hE,KAAKuwD,mBACHkR,EAAoB/uD,eACpB+uD,EAAoB7uD,WACpB6uD,EAAoBrkD,UAEtBzW,EAAA61C,mBAAmBjgC,EAAWL,kBAC9Bvc,EAAOoqC,YAAY,MACjBxW,EACA5zB,EAAO0rC,WACLw1B,EACAU,EACAP,EAAiB5iD,iBAElB4iD,EAAiB5iD,iBAGtB,OADA7B,EAAWqC,SAASjf,EAAQ2wD,GACrB/zC,GAID2yC,EAAAjtD,UAAA4/D,cAAR,WAEE,IAAK7hE,KAAK0vD,QAAS,CACjB,IAAI/vD,EAASK,KAAKL,OAClBK,KAAK0vD,QAAU/vD,EAAOmsC,UAHL,QAIH,GAEZ,EACAnsC,EAAO6mC,UAAU,IAGrB,MAVmB,SAcb0oB,EAAAjtD,UAAAivD,cAAR,WAEE,IAAKlxD,KAAK2vD,QAAS,CACjB,IAAIhwD,EAASK,KAAKL,OAClBK,KAAK2vD,QAAUhwD,EAAOssC,YAHL,WAIfjsC,KAAKuwD,oBAAqB5pD,EAAAgF,KAAKQ,KAAOxF,EAAAgF,KAAKc,MAC3C,KACA9M,EAAOkqC,gBAAgB7pC,KAAK6hE,gBAC1BliE,EAAOkoC,eAAe,EAAC,KAG3BloC,EAAO+sC,kBAVU,WAUsB,YAEzC,MAZmB,YAgBrBwiB,EAAAjtD,UAAA26D,eAAA,SACEhrD,EACA81B,QAAA,IAAAA,MAAA,MAEA,IAAIo6B,EAAcp6B,EAAWA,EAASpiC,OAAS,EAC3Ci6D,EAAeuC,EAEfX,EADevvD,EAASa,UAAUsqC,mBAElCqkB,EAAexvD,EAASa,UAAUC,eAAepN,OACjD+7D,EAAcD,EACdxvD,EAASkB,GAAGrM,EAAApE,YAAY6a,cACxBikD,IACAE,IACA9B,GAEJ97D,OAAOq+D,GAAeX,GAEtB,IAAIxhE,EAASK,KAAKL,OAClB,IAAKK,KAAK6zD,gBAAgBjiD,GAAW,OAAOjS,EAAOisC,oBACnD,IAAIh5B,EAAahB,EAASa,UAAUG,WAChCmvD,EAAenwD,EAASkB,GAAGrM,EAAApE,YAAY0wD,eAG3C,GAAI+O,EAAcT,EAAa,CACxB35B,KACHA,EAAW,IAAIvhC,MAAMk7D,IACZ/7D,OAAS,GAKpB,IAHA,IAAIoN,EAAiBd,EAASa,UAAUC,eACpCsvD,EAAiBpwD,EAAS3P,UAAUmN,YAAYqD,UAAU2Y,WAC1D62C,GAA0B,EACrB5hE,EAAIk/D,EAAcl/D,EAAI+gE,IAAgB/gE,EAAG,CAChD,IAAIib,EAAc0mD,EAAe3hE,GAAGib,YACpC,GAAsB,OAAhBA,IAAwB1U,EAAAgjB,oBAAoBtO,EAAYvN,MAAQ,CACpEk0D,GAA0B,EAC1B,OAGJ,GAAIA,EACF,IAAS5hE,EAAIk/D,EAAcl/D,EAAI+gE,IAAgB/gE,EAC7CqnC,EAAS7hC,KACP7F,KAAKkzD,kBACS8O,EAAe3hE,GAAGib,YAC9B5I,EAAerS,GAAE,UAMlB,CACL,IAASA,EAAIk/D,EAAcl/D,EAAI+gE,IAAgB/gE,EAC7CqnC,EAAS7hC,KAAK6M,EAAerS,GAAGg8C,aAAa18C,IAE/C,IAAKoiE,EAAc,CACjB,IAAIpB,EAAW/uD,EAEf,GADAA,EAAW5R,KAAKixD,iBAAiBr/C,IAC5B5R,KAAK6zD,gBAAgBjiD,GAAW,OAAOjS,EAAOisC,oBACnDh6B,EAASkM,KAAKpD,MAAQimD,EAAS7iD,KAAKpD,MACpC1a,KAAKya,QAAQvQ,gBAAgBuD,IAAImE,EAASlE,aAAckE,GACxD,IAAIktD,EAAmBlsD,EAAWwL,eAElC,OADApe,KAAKsvD,YAAc18C,EACZjT,EAAOoqC,YAAY,MACxBpqC,EAAOkqC,gBAAgB7pC,KAAK6hE,gBAAiBliE,EAAO6mC,UAAU+4B,IAC9D5/D,EAAO0rC,WAAWz5B,EAASlE,aAAcg6B,EAAUo3B,IAClDA,KAOT,OADA9+D,KAAKsvD,YAAc18C,EACfmvD,EAAqBpiE,EAAO4rC,iBAAiB35B,EAASlE,aAAcg6B,EAAU90B,EAAWwL,gBACnFze,EAAO0rC,WAAWz5B,EAASlE,aAAcg6B,EAAU90B,EAAWwL,iBAK1E8wC,EAAAjtD,UAAA29D,oBAAA,SACEntD,EACAysD,EACAlB,EACAxR,EACAyR,QAAA,IAAAA,MAAA,GAEA,IAAIsB,EAAevB,EAAoB14D,OAEvC,IAAKtF,KAAK8/D,mBACRrtD,EACA8sD,EACW,GAAXtB,EACAzR,GAEA,OAAOxsD,KAAKL,OAAOisC,oBAGrB,IAAI00B,EAAuBrC,EAAUsB,EAAe,EAAIA,EACpD73B,EAAW,IAAIvhC,MAAqBm6D,GACpC9kD,EAAQ,EACRyiD,IACFv2B,EAAS,GAAKu2B,EACdziD,EAAQ,GAGV,IADA,IAAI9I,EAAiBD,EAAUC,eACtBrS,EAAI,EAAGA,EAAIk/D,IAAgBl/D,IAAKmb,EACvCksB,EAASlsB,GAASxb,KAAKkzD,kBACrB8K,EAAoB39D,GACpBqS,EAAerS,GAAE,KAMrB,OADAoD,OAAO+X,GAAS8kD,GACTtgE,KAAKkiE,iBAAiBzvD,EAAWysD,EAAUx3B,IAIpDwnB,EAAAjtD,UAAAigE,iBAAA,SACEzvD,EACAysD,EACAx3B,QAAA,IAAAA,MAAA,MAEA,IAAIo6B,EAAcp6B,EAAWA,EAASpiC,OAAS,EAC3Ci6D,EAAeuC,EAEfX,EADe1uD,EAAUsqC,mBAEzBqkB,EAAe3uD,EAAUC,eAAepN,OACxC+7D,EAAcD,EACd3uD,EAAU2K,aACV+jD,IACAE,IACA9B,GAEJ97D,OAAOq+D,GAAeX,GAEtBnhE,KAAKuwD,mBAAmB99C,EAAUC,eAAgBD,EAAUG,WAAYH,EAAU2K,UAClF,IAAIzd,EAASK,KAAKL,OAGlB,GAAImiE,EAAcT,EAAa,CACxB35B,KACHA,EAAW,IAAIvhC,MAAMk7D,IACZ/7D,OAAS,GAGpB,IADA,IAAIoN,EAAiBD,EAAUC,eACtBrS,EAAIk/D,EAAcl/D,EAAI+gE,IAAgB/gE,EAC7CqnC,EAAS7hC,KAAK6M,EAAerS,GAAGg8C,aAAa18C,IAIjD,IAAIiT,EAAaH,EAAUG,WAE3B,OADA5S,KAAKsvD,YAAc18C,EACZjT,EAAOoqC,YAAY,MACxBpqC,EAAOkqC,gBAAgB7pC,KAAK6hE,gBAC1BliE,EAAO6mC,UAAU+4B,IAEnB5/D,EAAO8rC,mBAAmByzB,EAAUx3B,EAAUj1B,EAAU2M,sBACvDxM,EAAWwL,iBAGhB8wC,EAAAjtD,UAAAo3D,uBAAA,SAAuB3sC,EAA6BmsC,GAIlD,IAHA,IAAIxrC,EAAcX,EAAWW,YACzB80C,EAAiB90C,EAAY/nB,OAC7B88D,EAAQ,IAAIj8D,MAAqBg8D,KAC5B9hE,EAAI,EAAGA,EAAI8hE,IAAkB9hE,EACpC+hE,EAAM/hE,GAAKL,KAAKkzD,kBACd7lC,EAAYhtB,GACZsG,EAAAgF,KAAKc,UAWT,OANA21D,EAAMD,GAAkBniE,KAAKkzD,kBAC3B7lC,EAAY80C,GACZtJ,OAIK74D,KAAKL,OAAOoqC,YAAY,KAAMq4B,EAAOpiE,KAAKsvD,YAAYlxC,iBAG/D8wC,EAAAjtD,UAAAq3D,+BAAA,SAA+B5sC,EAAqCmsC,GAClE,IAAIx4C,EAASrgB,KAAKgL,SAASmgD,qBAAqBz+B,EAAY1sB,KAAK+gB,iBACjE,IAAKV,EAAQ,OAAOrgB,KAAKL,OAAOisC,oBAChC,OAAQvrB,EAAOtS,MACb,KAAK+sC,EAAArxC,YAAYwT,MACf,IAAIohD,EAAcr+D,KAAK+gB,gBAAgBjD,KAAKhL,GAAE,MAC1Cm4C,EAAqB5qC,EAAQE,eAAeu6B,EAAAt0C,aAAagB,YAAa62D,GAC1E,IAAKpT,EAKH,OAJAjrD,KAAKuG,MACHG,EAAA5C,eAAeonD,qCACfx+B,EAAWA,WAAWtoB,MAAeic,EAAQ3S,cAExC1N,KAAKL,OAAOisC,oBAErB,IAAIqyB,EAAUj+D,KAAKkzD,kBACjBxmC,EAAWA,WACHrM,EAAQrO,KAAI,KAItB,OAAOhS,KAAKk+D,kBAAkBjT,GAC5Bv+B,EAAWiB,mBACVjB,EAAYuxC,GAOnB,OAJAj+D,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,qBAGrBsjB,EAAAjtD,UAAAs3D,0BAAA,SAA0B7sC,EAAgCmsC,GACxD,IAAIzpD,EAAcsd,EAAWtd,YACzBxO,EAAOwO,EAAYxO,KACnB4T,GAAc5T,EAAKwE,KAAKE,OACxB1E,EAAKwE,KACL,aAAe,IAAMpF,KAAKyvD,cAAcnqD,OAAOT,SAAS,IACxDkc,EAAkB/gB,KAAK+gB,gBACvB9e,EAAY,IAAI64C,EAAAjkC,kBAClB7W,KAAKya,QACLjG,EACAuM,EAAgBrT,aAAejH,EAAA7D,gBAAkB4R,EACjDpF,EACA,KACA0rC,EAAApxC,eAAesJ,MAEb8K,EAAOiD,EAAgBjD,KACvBlM,EAAW5R,KAAK4zD,kCAClB3xD,KAEA6b,EAAKhC,wBACLgC,EACA1O,GAEF,IAAKwC,EAAU,OAAO5R,KAAKL,OAAOisC,oBAClC5rC,KAAKsvD,YAAc19C,EAASa,UAAUT,KAGtC,IAAIwJ,EAAQxb,KAAK+0D,yBAAyBnjD,GAC1C,OAAO4J,EAAQ,EACXxb,KAAKL,OAAOisC,oBACZ5rC,KAAKL,OAAO6mC,UAAUhrB,IAQ5B0zC,EAAAjtD,UAAAu3D,4BAAA,SACE9sC,EACAmsC,EACAwJ,GAEA,IAAI1iE,EAASK,KAAKL,OACdohB,EAAkB/gB,KAAK+gB,gBAG3B,OAAQ2L,EAAW3e,MACjB,KAAKnH,EAAAoH,SAAS6b,KACZ,IAAIne,EAAU1L,KAAK0L,QAInB,OAHKmtD,EAAe1d,iBAClBn7C,KAAKsvD,YAAc5jD,EAAQW,WAEtBX,EAAQkB,SACXjN,EAAOinC,UAAU,GACjBjnC,EAAO6mC,UAAU,GAEvB,KAAK5/B,EAAAoH,SAAS8b,KAEZ,OADA9pB,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACjB3M,EAAO6mC,UAAU,GAE1B,KAAK5/B,EAAAoH,SAAS+b,MAEZ,OADA/pB,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACjB3M,EAAO6mC,UAAU,GAE1B,KAAK5/B,EAAAoH,SAASmpB,KAEZ,IADIrZ,EAAOiD,EAAgBjD,MAClBhL,GAAE,MAET,GADIwvD,EAAaxkD,EAAKmE,eAAe,QAGnC,OADAjiB,KAAKsvD,YAAcgT,EAAWtwD,KACvBrS,EAAOkoC,eAAey6B,EAAW9mD,MAAO8mD,EAAWtwD,KAAKoM,gBAGnE,GAAI2C,EAAgBjO,GAAGrM,EAAApE,YAAY6a,UAAW,CAC5C,IAAItN,EAASnM,OAAOsd,EAAgBnR,QACpCnM,OAAOmM,EAAO7B,MAAQ+sC,EAAArxC,YAAYwT,OAClC,IAAIG,EAAmBxN,EAAQoC,KAC/B,OAAI+O,EAAgBjO,GAAGrM,EAAApE,YAAYuU,eAC5BkH,EAAKhL,GAAE,KACVgL,EAAKrQ,IAAG,IAERzN,KAAKsvD,YAAclyC,EACZzd,EAAOooC,eAAe,EAC3B/nC,KAAKq0D,wBAA+BzkD,EAAQ8c,MAIlD1sB,KAAKsvD,YAAclyC,EACZzd,EAAOkoC,eAAe,EAAGzqB,EAASgB,iBAO3C,OALApe,KAAKuG,MACHG,EAAA5C,eAAewnD,+CACf5+B,EAAWtoB,OAEbpE,KAAKsvD,YAActvD,KAAK0L,QAAQW,UACzB1M,EAAOisC,oBAEhB,KAAKhlC,EAAAoH,SAASkpB,MACZ,IAAIpZ,EAEEwkD,EADN,IADIxkD,EAAOiD,EAAgBjD,MAClBhL,GAAE,MAET,GADIwvD,EAAaxkD,EAAKmE,eAAe,QAInC,GADIrC,EADkBnc,OAAO6+D,EAAWtwD,KAAKmpC,gBAClBv7B,KAGzB,OADA5f,KAAKsvD,YAAc1vC,EAAK5N,KACjBrS,EAAOkoC,eAAey6B,EAAW9mD,MAAOoE,EAAK5N,KAAKoM,gBAI/D,GAAI2C,EAAgBjO,GAAGrM,EAAApE,YAAY6a,UAAW,CAC5C,IAEI0C,EAFAhQ,EAASnM,OAAOsd,EAAgBnR,QAGpC,GAFAnM,OAAOmM,EAAO7B,MAAQ+sC,EAAArxC,YAAYwT,OAC9B2C,EAAehQ,EAAQgQ,KACjB,CACR,IAAI2iD,EAAY3iD,EAAK5N,KAErB,OADAhS,KAAKsvD,YAAciT,EACZ5iE,EAAOkoC,eAAe,EAAG06B,EAAUnkD,iBAQ9C,OALApe,KAAKuG,MACHG,EAAA5C,eAAeynD,iDACf7+B,EAAWtoB,OAEbpE,KAAKsvD,YAActvD,KAAK0L,QAAQW,UACzB1M,EAAOisC,oBAKlB,IAAIvrB,EAASrgB,KAAKgL,SAASiG,kBACzByb,EACA1sB,KAAKqvD,aAAetuC,GAEtB,IAAKV,EAAQ,OAAO1gB,EAAOisC,oBAE3B,OAAQvrB,EAAOtS,MACb,KAAK+sC,EAAArxC,YAAYgS,MACf,IAAI+mD,EAAoBniD,EAAQrO,KAEhC,GADAvO,OAAO++D,GAAa77D,EAAAgF,KAAKc,MACb4T,EAAQvN,GAAGrM,EAAApE,YAAY8Y,SACjC,OAAOnb,KAAK44D,sBAA6Bv4C,EAAQw4C,EAAgBwJ,GAEnE,IAAIrlD,EAAqBqD,EAAQ7E,MAGjC,OAFA/X,OAAOuZ,GAAc,GACrBhd,KAAKsvD,YAAckT,EACZxiE,KAAKL,OAAOkoC,eAAe7qB,EAAYwlD,EAAUpkD,gBAE1D,KAAK08B,EAAArxC,YAAY2K,OACf,IAAKpU,KAAKwyD,cAAsBnyC,GAC9B,OAAOrgB,KAAKL,OAAOisC,oBAErB,IAAIqC,EAAsB5tB,EAAQrO,KAElC,OADAvO,OAAOwqC,GAActnC,EAAAgF,KAAKc,MACb4T,EAAQvN,GAAGrM,EAAApE,YAAY8Y,SAC3Bnb,KAAK44D,sBAA8Bv4C,EAAQw4C,EAAgBwJ,IAEpEriE,KAAKsvD,YAAcrhB,EACZjuC,KAAKL,OAAOsoC,gBAAyB5nB,EAAQ3S,aAAcugC,EAAW7vB,iBAE/E,KAAK08B,EAAArxC,YAAYoR,UACf,OAAKwF,EAAOvN,GAAGrM,EAAApE,YAAY8uD,WAQ3BnxD,KAAKsvD,YAAc3oD,EAAAgF,KAAKG,IACRuU,EAAQvN,GAAGrM,EAAApE,YAAY8Y,SAC9Bnb,KAAKL,OAAO6mC,UAAsBnmB,EAAQvF,eAE5C9a,KAAKL,OAAOsoC,gBAA4B5nB,EAAQ3S,aAAY,KAXjE1N,KAAKuG,MACHG,EAAA5C,eAAe2+D,+HACf/1C,EAAWtoB,OAEbpE,KAAKsvD,YAAc3oD,EAAAgF,KAAKG,IACjB9L,KAAKL,OAAOisC,qBAQvB,KAAKkP,EAAArxC,YAAYwI,mBACf,IAAIL,EAAW5R,KAAKgL,SAASuH,gBACR8N,EACnB,KACAU,EAAgBjD,KAAKhC,yBAEvB,IAAMlK,IAAY5R,KAAK6zD,gBAAgBjiD,GAAY,OAAOjS,EAAOisC,oBACjE,IAAIpwB,EAAQxb,KAAK+0D,yBAAyBnjD,GAE1C,OADA5R,KAAKsvD,YAAc19C,EAASa,UAAUT,KAC/BhS,KAAKL,OAAO6mC,UAAUhrB,GAOjC,OAJAxb,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,qBAGrBsjB,EAAAjtD,UAAAw3D,4BAAA,SACE/sC,EACAmsC,GAEA,IAAIl5D,EAASK,KAAKL,OAId8jB,EAAOzjB,KAAK4yD,4BAA4BlmC,EAAWA,WAAY1sB,KAAK0L,QAAQW,UAAS,GACrF2F,EAAOhS,KAAKsvD,YACZlhC,EAASpuB,KAAKgL,SAASm+C,YAAYz8B,EAAW0B,QAElD,OADApuB,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACnB8hB,EACEpc,EAAKc,GAAE,OAAyBsb,EAAOtb,GAAE,KAC5Cd,EAAKopC,gBAAgBh7B,eAAegO,GAClCzuB,EAAO4nC,aACLv1B,EAAKc,GAAE,IACHjM,EAAAyd,SAASM,MACT/d,EAAAyd,SAASK,MACblB,EACAzR,EAAKqqC,aAAa18C,IAEpBA,EAAO6mC,UAAU,GACnB7mC,EAAO6mC,UAAUx0B,EAAKoO,eAAegO,GAAQ,GAAQ,EAAI,GAXzCzuB,EAAOisC,qBAc7BsjB,EAAAjtD,UAAAy3D,yBAAA,SACEhtC,EACAmsC,EACA6J,QAAA,IAAAA,OAAA,GAEA,IAAI/iE,EAASK,KAAKL,OAElB,OAAQ+sB,EAAWrV,aACjB,KAAKzQ,EAAA0Q,YAAY+e,MACf5yB,QAAQi/D,GACR,IAAI9mB,EAAYid,EAAe1d,eAC/B,OACES,GACAA,EAAU35C,WAAajC,KAAKya,QAAQlQ,eAE7BvK,KAAK2iE,oBACVl/D,OAAOm4C,EAAUj8B,eAAe,GACP+M,EAAYL,mBACrCK,IAGJ1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,qBAEhB,KAAKhlC,EAAA0Q,YAAYof,MACf,IAAIksC,EAAsCl2C,EAAYprB,MAItD,OAHIohE,IACFE,GAAcA,GAEZ/J,GAAkBlyD,EAAAgF,KAAKY,IAClB5M,EAAOqnC,UAAe47B,IAE/B5iE,KAAKsvD,YAAc3oD,EAAAgF,KAAKa,IACjB7M,EAAOunC,UAAU07B,IAE1B,KAAKh8D,EAAA0Q,YAAYsf,QACf,IAAIisC,EAAsCn2C,EAAYprB,MAOtD,OANIohE,IACFG,EAAWC,QACTn2D,QAAQ,GACRk2D,IAGIhK,EAAe9qD,MAIrB,OACE,GAAIg1D,UAAUF,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IACzD,MAEF,OACE,GAAIG,UAAUH,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IACzD,MAEF,OACE,GAAII,WAAWJ,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OACE,GAAIK,WAAWL,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OACE,GAAIM,WAAWN,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OACE,GAAIO,WAAWP,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,QACE,GAAIQ,YAAYR,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IAC3D,MAEF,OACE,IAAK7iE,KAAK0L,QAAQkB,SAAU,CAC1B,GAAIu2D,WAAWN,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OAAOljE,EAAOinC,UAAUkI,QAAQ+zB,GAAW9zB,SAAS8zB,IAEtD,OACE,IAAK7iE,KAAK0L,QAAQkB,SAAU,CAC1B,GAAIw2D,WAAWP,GAAW,OAAOljE,EAAO6mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OAAOljE,EAAOinC,UAAUkI,QAAQ+zB,GAAW9zB,SAAS8zB,IAEtD,OACA,OACE,OAAOljE,EAAOinC,UAAUkI,QAAQ+zB,GAAW9zB,SAAS8zB,IAEtD,QACE,GAAIS,WAAWT,GAAW,OAAOljE,EAAOqnC,UAAUu8B,WAAWV,IAC7D,MAEF,QACE,GAAIW,WAAWX,GAAW,OAAOljE,EAAOunC,UAAUu8B,WAAWZ,IAC7D,MAEF,QACE,MAEF,QAEE,OADAp/D,QAAO,GACA9D,EAAOisC,oBAMlB,OAAIu3B,WAAWN,IACb7iE,KAAKsvD,YAAc3oD,EAAAgF,KAAKG,IACjBnM,EAAO6mC,UAAUsI,QAAQ+zB,KACvBO,WAAWP,IACpB7iE,KAAKsvD,YAAc3oD,EAAAgF,KAAKQ,IACjBxM,EAAO6mC,UAAUsI,QAAQ+zB,MAEhC7iE,KAAKsvD,YAAc3oD,EAAAgF,KAAKI,IACjBpM,EAAOinC,UAAUkI,QAAQ+zB,GAAW9zB,SAAS8zB,KAGxD,KAAKj8D,EAAA0Q,YAAYC,OAEf,OADA9T,QAAQi/D,GACD1iE,KAAK0jE,oBAA8Ch3C,EAAYprB,OAExE,KAAKsF,EAAA0Q,YAAYwf,OAEf,OADArzB,QAAQi/D,GACD1iE,KAAK2jE,qBAA8Cj3C,EAAYmsC,GAS1E,OALA74D,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAEbpE,KAAKsvD,YAAcuJ,EACZl5D,EAAOisC,qBAGhBsjB,EAAAjtD,UAAAyhE,oBAAA,SAAoBE,GAClB,IAAIjkE,EAASK,KAAKL,OACd+L,EAAU1L,KAAK0L,QACf8jD,EAAiBxvD,KAAKwvD,eAEtBqU,EAAsCrU,EAAetuD,IAAI0iE,GAC7D,IAAKC,EAAe,CAClB,IAAIC,EAAeF,EAAYt+D,OAC3By+D,EAAe,IAAI7xB,WAAW,EAAmB,EAAf4xB,GACtCC,EAAa,GAA6B,IAAvBD,EACnBC,EAAa,GAAMD,IAAkB,EAAK,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1C,IAAK,IAAIzjE,EAAI,EAAGA,EAAIyjE,IAAgBzjE,EAClC0jE,EAAa,EAAQ,EAAJ1jE,GAA6C,IAAnCujE,EAAYl+D,WAAWrF,GAClD0jE,EAAa,EAAQ,EAAJ1jE,GAAUujE,EAAYl+D,WAAWrF,KAAO,EAAK,IAEhEwjE,EAAgB7jE,KAAK60D,iBAAiBkP,EAAcr4D,EAAQW,UAAUmd,UACtEgmC,EAAe/hD,IAAIm2D,EAAaC,GAElC,IAAIG,EAAeH,EAAch/B,OAC7Bo/B,EAAajkE,KAAKya,QAAQtQ,YAAYjJ,IAAI,UAE9C,OADAlB,KAAKsvD,YAAc2U,GAA0Bv4D,EAAQW,UACjDX,EAAQkB,SACHjN,EAAOinC,UAAUkI,QAAQk1B,GAAej1B,SAASi1B,KAE1DvgE,OAAO0/D,WAAWa,IACXrkE,EAAO6mC,UAAUsI,QAAQk1B,MAGlC9U,EAAAjtD,UAAA0gE,oBAAA,SAAoBuB,EAAmB72C,EAAoCm/B,GACzE,IAAI2X,GAAW,EACXxkE,EAASK,KAAKL,OAGd4K,EAAiB9G,OAAOzD,KAAKya,QAAQlQ,gBACzC,IAAKA,GAAkBA,EAAewD,MAAQ+sC,EAAArxC,YAAYyH,gBAAiB,OAAOvR,EAAOisC,oBACzF,IAAIw4B,EAAgBpkE,KAAKgL,SAAS6G,aAA6BtH,GAAkB25D,IACjF,IAAKE,EAAe,OAAOzkE,EAAOisC,oBAClC,IAAIy4B,EAAYD,EAAcpyD,KAE1BsyD,EAAej3C,EAAY/nB,OAC/B,GAAIg/D,EAAc,CAChB,IAAIC,EAAoBL,EAAY9lD,eAChCxF,OAAM,EACN4rD,OAAU,EACd,OAAQD,GACN,OACE3rD,EAASgtB,WAAkB,IAAI6+B,WAAWH,IAC1CE,EAA4B,EAAfF,EACb,MAEF,OACE1rD,EAASgtB,WAAkB,IAAIz/B,MAAWm+D,IAC1CE,EAA4B,EAAfF,EACb,MAEF,OACE1rD,EAASgtB,WAAkB,IAAI8+B,aAAaJ,IAC5CE,EAA4B,EAAfF,EACb,MAEF,OACE1rD,EAASgtB,WAAkB,IAAI++B,aAAaL,IAC5CE,EAA4B,EAAfF,EACb,MAEF,QAEE,OADA7gE,QAAO,GACA9D,EAAOisC,oBAOlB,IAFA,IAAIw2B,EAAQ,IAAIj8D,MAAqBm+D,GACjC7gD,OAAI,EACCpjB,EAAI,EAAGA,EAAIikE,IAAgBjkE,EAIlC,GAHA+hE,EAAM/hE,GAAKgtB,EAAYhtB,GACnBL,KAAKkzD,kBAA8B7lC,EAAYhtB,GAAI6jE,EAAW,KAC9DA,EAAY7nB,aAAa18C,GACzBwkE,EAEF,GADA1gD,EAAO9jB,EAAOkxC,qBAAqBuxB,EAAM/hE,IACrCwG,EAAA8c,gBAAgBF,IAAS5c,EAAA+c,aAAa6C,MAExC,OADAhjB,OAAOoD,EAAAihB,kBAAkBrE,IAAS8gD,GAC1BA,GACN,OACE3+B,WAAkBhtB,GAAQvY,GAAKwG,EAAA6f,iBAAiBjD,GAChD,MAEF,OACEmiB,WAAkBhtB,GAAQvY,GAAKsM,QAC7B9F,EAAAkhB,oBAAoBtE,GACpB5c,EAAAiuC,qBAAqBrxB,IAEvB,MAEF,OACEmiB,WAAkBhtB,GAAQvY,GAAKwG,EAAAmhB,iBAAiBvE,GAChD,MAEF,OACEmiB,WAAkBhtB,GAAQvY,GAAKwG,EAAAohB,iBAAiBxE,GAChD,MAEF,QAAShgB,QAAO,QAUlB0gE,GAAW,EAKjB,IAAIS,EAAgB5kE,KAAK0L,QAAQW,UAAUmd,SAC3C,GAAI26C,EAAU,CAKZ,IAAIU,EAAYD,EAAgB,EAE5BE,EAAkB,GAAM,GAAKC,IAAIP,EADd,EAC8C,GACjEQ,EAAO,IAAI9yB,WAAW2yB,EAAYC,GAClChgC,EAAU9kC,KAAK60D,iBAAiBmQ,GAChCngC,EAAS,EAoBb,OAjBqB,GAAjB+/B,GACF1hE,EAAA+hE,SAASvd,QAAQ5iB,EAAQD,OAAQl4B,QAAQk4D,IAAaG,EAAMngC,GAC5DA,GAAU,IAEVphC,OAAmC,GAA5BsrC,SAASjK,EAAQD,SACxB3hC,EAAAgiE,SAASp2B,QAAQhK,EAAQD,QAAUggC,EAAWG,EAAMngC,GACpDA,GAAU,GAEZ3hC,EAAAgiE,SAASZ,EAAcU,EAAMngC,GAC7BA,GAAU,EACVphC,OAAOohC,GAAUggC,GAGjB3hE,EAAAgiE,SAASV,EAAYQ,EAAMngC,GAC3BA,GArBuB,EAwBf0/B,GACN,OACE,IAASlkE,EAAI,EAAGA,EAAIikE,IAAgBjkE,EAClC6C,EAAAgiE,SAASt/B,WAAkBhtB,GAAQvY,GAAI2kE,EAAMngC,GAASA,GAAU,EAElE,MAEF,OACE,IAASxkC,EAAI,EAAGA,EAAIikE,IAAgBjkE,EAClC6C,EAAA+hE,SAASr/B,WAAkBhtB,GAAQvY,GAAI2kE,EAAMngC,GAASA,GAAU,EAElE,MAEF,OACE,IAASxkC,EAAI,EAAGA,EAAIikE,IAAgBjkE,EAClC6C,EAAAiiE,SAASv/B,WAAkBhtB,GAAQvY,GAAI2kE,EAAMngC,GAASA,GAAU,EAElE,MAEF,OACE,IAASxkC,EAAI,EAAGA,EAAIikE,IAAgBjkE,EAClC6C,EAAAkiE,SAASx/B,WAAkBhtB,GAAQvY,GAAI2kE,EAAMngC,GAASA,GAAU,EAElE,MAEF,QAEE,OADAphC,QAAO,GACA9D,EAAOisC,oBAMlB,OAHAnoC,OAAOohC,GAAUggC,EAAYC,GAE7B9kE,KAAKsvD,YAAc+U,EACK,GAAjBO,EACHjlE,EAAOinC,UACLkI,QAAQhK,EAAQD,QAChBkK,SAASjK,EAAQD,SAEnBllC,EAAO6mC,UACLsI,QAAQhK,EAAQD,SAKtB7kC,KAAKsvD,YAAc+U,EACnB,IAAIjT,EAASgT,EAAc7jD,eAAeu6B,EAAAt0C,aAAaiB,aAAa,GACpE,IAAK2pD,EAKH,OAJApxD,KAAKuG,MACHG,EAAA5C,eAAey6D,+CACf/R,EAAWpoD,MAAOggE,EAAc12D,cAE3B/N,EAAOisC,oBAEhB,IAAIy5B,EAAkBhB,EAAUjmD,eAC5B2C,EAAkB/gB,KAAK+gB,gBACvBy2C,EAAYz2C,EAAgB9C,aAAaomD,GAAW,GACpDnQ,EAAQ,IAAI/tD,MAAqB,EAAIm+D,GACrC9oD,EAAQ,EACZ04C,EAAM14C,KAAW7b,EAAOgqC,eAAe6tB,EAAUh8C,MAC/Cxb,KAAK48D,eAAen5D,OAAO2gE,EAActkD,sBACvCngB,EAAO6mC,UAAU,GACjB7mC,EAAO6mC,UAAU89B,MAGrB,IAASjkE,EAAI,EAAGA,EAAIikE,IAAgBjkE,EAClC6zD,EAAM14C,KAAWxb,KAAK48D,eAAexL,GACnCzxD,EAAOkoC,eAAe2vB,EAAUh8C,MAAO6pD,GACvC1lE,EAAO6mC,UAAUnmC,GACjB+hE,EAAM/hE,KAOV,OAJAoD,OAAO+X,EAAQ,GAAK04C,EAAM5uD,QAC1B4uD,EAAM14C,GAAS7b,EAAOkoC,eAAe2vB,EAAUh8C,MAAO6pD,GACtDtkD,EAAgBxC,cAAci5C,GAC9Bx3D,KAAKsvD,YAAc+U,EACZ1kE,EAAOoqC,YAAY,KAAMmqB,EAAOmR,GAKzC,OADArlE,KAAKsvD,YAAc+U,EACZrkE,KAAK48D,eAAen5D,OAAO2gE,EAActkD,sBAC9CngB,EAAO6mC,UAAU,GACjB7mC,EAAO6mC,UAAU,MAKvB0oB,EAAAjtD,UAAA0hE,qBAAA,SAAqBj3C,EAAqCmsC,GACxD,IAAIl5D,EAASK,KAAKL,OAGdw7C,EAAiB0d,EAAe1d,eACpC,IAAKA,GAAkBA,EAAeroC,GAAGrM,EAAApE,YAAYkU,UAKnD,OAJAvW,KAAKuG,MACHG,EAAA5C,eAAe+uD,mCACfnmC,EAAWtoB,MAAO,WAAYy0D,EAAeh0D,YAExClF,EAAOisC,oBAIhB,IAAI8lB,EAAOvW,EAAer7B,oBAC1B,GAAI4xC,EAAM,CACR,GAAIA,EAAKj/C,UAAUsqC,mBAKjB,OAJA/8C,KAAKuG,MACHG,EAAA5C,eAAewhE,sDACf54C,EAAWtoB,MAAO+2C,EAAet2C,YAE5BlF,EAAOisC,oBAEhB,GAAI8lB,EAAK5+C,GAAGrM,EAAApE,YAAYs9C,SAKtB,OAJA3/C,KAAKuG,MACHG,EAAA5C,eAAeyhE,mFACf74C,EAAWtoB,MAAO+2C,EAAet2C,YAE5BlF,EAAOisC,oBAEhB,GAAI8lB,EAAK5+C,GAAGrM,EAAApE,YAAYu9C,WAKtB,OAJA5/C,KAAKuG,MACHG,EAAA5C,eAAe0hE,qFACf94C,EAAWtoB,MAAO+2C,EAAet2C,YAE5BlF,EAAOisC,oBAKlB,IAAI/c,EAAQnC,EAAWmC,MACnBqc,EAAWrc,EAAMvpB,OACjBsT,EAAS8T,EAAW9T,OACpBpG,EAAU2oC,EAAe3oC,QACzBizD,GAAY,EACZrD,EAAQ,IAAIj8D,MAAqB+kC,EAAW,GAC5CssB,EAAYx3D,KAAK+gB,gBAAgB9C,aAAaje,KAAK0L,QAAQW,WAC/D5I,OAAOynC,GAAYtyB,EAAOtT,QAC1B,IAAK,IAAIjF,EAAI,EAAGgL,EAAI6/B,EAAU7qC,EAAIgL,IAAKhL,EAAG,CACxC,IAAIoQ,EAAS+B,EAAUA,EAAQtR,IAAI2tB,EAAMxuB,GAAG+E,MAAQ,KACpD,GAAKqL,GAAUA,EAAO1C,MAAQ+sC,EAAArxC,YAAY+V,MAA1C,CAQA,IAAIxN,EAAevB,EAAQuB,KAC3BowD,EAAM/hE,EAAI,GAAKL,KAAKL,OAAO6oC,YACzBx2B,EAAKwX,SACLxpB,KAAKL,OAAOkoC,eAAe2vB,EAAUh8C,MAAOxb,KAAK0L,QAAQ4lD,gBACzDtxD,KAAKkzD,kBAAkBt6C,EAAOvY,GAAYoQ,EAAQuB,KAAI,KACtDA,EAAKoM,eACG3N,EAAQgP,mBAbhBzf,KAAKuG,MACHG,EAAA5C,eAAeknD,oCACfn8B,EAAMxuB,GAAG+D,MAAOyqB,EAAMxuB,GAAG+E,KAAM+1C,EAAet2C,YAEhD4gE,GAAY,EAahB,OADAzlE,KAAKsvD,YAAcnU,EAAenpC,KAAKopC,gBACnCqqB,EAAkB9lE,EAAOisC,qBAG7Bw2B,EAAM,GAAKziE,EAAOgqC,eAChB6tB,EAAUh8C,MACV8yC,EAAAoX,gBAAgB1lE,KAAMm7C,EAAgBzuB,IAIxC01C,EAAMA,EAAM98D,OAAS,GAAK3F,EAAOkoC,eAAe2vB,EAAUh8C,MAAOxb,KAAK0L,QAAQ4lD,gBAEvE3xD,EAAOoqC,YAAY,KAAMq4B,EAAOpiE,KAAK0L,QAAQ4lD,kBAGtDpC,EAAAjtD,UAAA03D,qBAAA,SAAqBjtC,EAA2BmsC,GAC9C,IAAIl5D,EAASK,KAAKL,OACd+L,EAAU1L,KAAK0L,QACfqV,EAAkB/gB,KAAK+gB,gBAGvBV,EAASrgB,KAAKgL,SAAS8/C,kBACzBp+B,EAAWA,WACX3L,GAEF,IAAKV,EAAQ,OAAO1gB,EAAOisC,oBAC3B,GAAIvrB,EAAOtS,MAAQ+sC,EAAArxC,YAAYyH,gBAK7B,OAJAlR,KAAKuG,MACHG,EAAA5C,eAAe6hE,yEACfj5C,EAAWA,WAAWtoB,OAEjBpE,KAAKL,OAAOisC,oBAErB,IAGIuP,EAqBA13B,EAxBA1N,EAAiCsK,EACjC4rC,EAA8B,KAC9BtsC,EAAgB+M,EAAW/M,cAoB/B,KAbEssC,GAJCtsC,GACoD,QAApDw7B,EAAiB0d,EAAe1d,iBACjCA,EAAeroC,GAAGrM,EAAApE,YAAY+P,SAEdpS,KAAKgL,SAAS6G,aAC5BkE,EACAolC,EAAex7B,cACfoB,EAAgBjD,KAAKhC,yBAGP9b,KAAKgL,SAASy+C,8BAC5B1zC,EACA4J,EACAoB,EAAgBjD,KAAKhC,wBACrB4Q,IAGgB,OAAO/sB,EAAOisC,oBAKlC,IAAIg6B,EAAqC3Z,EACrCnsC,EAAuC,KAC3C,GAEE,GADAA,EAAsB8lD,EAAqB9lD,oBAClB,YAClB8lD,EAAuBA,EAAqBhmD,MAcrD,OAVE6D,EADE3D,EACK9f,KAAKk+D,kBAAkBp+C,EAAqB4M,EAAWxV,UAAWwV,EACvEhhB,EAAQW,UAAUgwC,aAAa18C,IAK1BK,KAAK6lE,aAAa5Z,EAAev/B,GAG1C1sB,KAAKsvD,YAAcrD,EAAcj6C,KAC1ByR,GAGTyrC,EAAAjtD,UAAA23D,+BAAA,SACEltC,EACAmsC,GAGA,OAAO74D,KAAKkzD,kBACVxmC,EAAWA,WACXmsC,EAAc,MAWlB3J,EAAAjtD,UAAA43D,gCAAA,SACElP,EACAkO,EACAwJ,GAEA,IAAI1iE,EAASK,KAAKL,OAEd0gB,EAASrgB,KAAKgL,SAAS0/C,sBAAsBC,EAAgB3qD,KAAK+gB,iBACtE,IAAKV,EAAQ,OAAO1gB,EAAOisC,oBAE3B,OAAQvrB,EAAOtS,MACb,KAAK+sC,EAAArxC,YAAY2K,OACf,IAAKpU,KAAKwyD,cAAsBnyC,GAC9B,OAAO1gB,EAAOisC,oBAEhB,IAAIqC,EAAsB5tB,EAAQrO,KAElC,OADAvO,OAAOwqC,GAActnC,EAAAgF,KAAKc,MACb4T,EAAQvN,GAAGrM,EAAApE,YAAY8Y,SAC3Bnb,KAAK44D,sBAA8Bv4C,EAAQw4C,EAAgBwJ,IAEpEriE,KAAKsvD,YAAcrhB,EACZtuC,EAAOsoC,gBAAyB5nB,EAAQ3S,aAAcugC,EAAW7vB,iBAE1E,KAAK08B,EAAArxC,YAAYoR,UACf,IAAIjL,EAAqByQ,EAAQzQ,OAEjC,OADAnM,OAAkB,OAAXmM,GAAmBA,EAAO7B,MAAQ+sC,EAAArxC,YAAYmR,MAChD5a,KAAKozD,YAAkBxjD,IAI5B5P,KAAKsvD,YAAc3oD,EAAAgF,KAAKG,IACRuU,EAAQvN,GAAGrM,EAAApE,YAAY8Y,SAC9Bxb,EAAO6mC,UAAsBnmB,EAAQvF,eAEvCnb,EAAOsoC,gBAA4B5nB,EAAQ3S,aAAY,KAP5D1N,KAAKsvD,YAAc3oD,EAAAgF,KAAKG,IACjB9L,KAAKL,OAAOisC,qBAQvB,KAAKkP,EAAArxC,YAAY+V,MACf,IAAIk/C,EAAiBj7D,OAAOzD,KAAKgL,SAASi+C,uBAC1CxlD,OAAe4c,EAAQZ,cAAgB,GACvC,IAAIk/C,EAAW3+D,KAAK4yD,4BAClB8L,EACA1+D,KAAK0L,QAAQW,UAAS,GAIxB,OADArM,KAAKsvD,YAAsBjvC,EAAQrO,KAC5BrS,EAAOwoC,WACJ9nB,EAAQrO,KAAKwX,SACbnJ,EAAQrO,KAAKc,GAAG,GACxB6rD,EACQt+C,EAAQrO,KAAKoM,eACbiC,EAAQZ,cAGpB,KAAKq7B,EAAArxC,YAAYyO,SACf,IAAIjW,EAAuBoe,EAAQlI,gBACnC,GAAIlW,EAAW,CACb,IAAI2P,EAAW5R,KAAKgL,SAASuH,gBAAgBtQ,EAAW,MACxD,IAAK2P,EAAU,OAAOjS,EAAOisC,oBAC7B,IAAIn5B,EAAYb,EAASa,UACzB,IAAKzS,KAAK8/D,mBACRrtD,EACA,EACAb,EAASkB,GAAGrM,EAAApE,YAAY6a,UACxBytC,GAEA,OAAOhrD,EAAOisC,oBAEhB,IAAIs0B,EAA8D,IAApDtuD,EAAS+E,eAAiBmkC,EAAApxC,eAAe0M,QACvD,GAAIxE,EAASkB,GAAGrM,EAAApE,YAAY6a,UAAW,CACjCtN,EAASnM,OAAOmO,EAAShC,QAC7BnM,OAAOmM,EAAO7B,MAAQ+sC,EAAArxC,YAAYwT,OAC9ByhD,EAAiBj7D,OAAOzD,KAAKgL,SAASi+C,uBACtC0V,EAAW3+D,KAAK4yD,4BAClB8L,EACA1+D,KAAK0L,QAAQW,UAAS,GAIxB,OADArM,KAAKsvD,YAAc78C,EAAUG,WACtB5S,KAAKk+D,kBAAkBtsD,KAAc+4C,EAAgBgU,EAAUuB,GAGtE,OADAlgE,KAAKsvD,YAAc78C,EAAUG,WACtB5S,KAAKk+D,kBAAkBtsD,KAAc+4C,EAAgB,EAAGuV,GAOjE,OAJAlgE,KAAKuG,MACHG,EAAA5C,eAAeknD,oCACfL,EAAevmD,MAAkBic,EAAQ7L,WAAuB6L,EAAQzQ,OAAO/K,YAE1ElF,EAAOisC,oBAQpB,OAJA5rC,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf21C,EAAevmD,OAEVzE,EAAOisC,qBAGhBsjB,EAAAjtD,UAAA63D,yBAAA,SAAyBptC,EAA+BmsC,GACtD,IAAIppC,EAAS/C,EAAW+C,OACpBC,EAAShD,EAAWgD,OACpB3O,EAAkB/gB,KAAK+gB,gBACvBC,EAAaD,EAAgBjD,KAE7Bs4C,EAAWp2D,KAAKq2D,cAClBr2D,KAAK4yD,4BAA4BlmC,EAAW8C,UAAW7oB,EAAAgF,KAAKW,KAAI,GAChEtM,KAAKsvD,aAGP,IACGtvD,KAAK0L,QAAQmB,eACd7M,KAAK+gB,gBAAgB5O,MAAM1L,EAAApE,YAAY+P,QAAU3L,EAAApE,YAAY40D,iBAC7D,CAEA,IAAIC,EAAkBl3D,KAAKL,OAAOkxC,qBAAqBulB,GACvD,GACEvvD,EAAA8c,gBAAgBuzC,IAAoBrwD,EAAA+c,aAAa6C,OACf,GAAlC5f,EAAAihB,kBAAkBovC,GAElB,OAAOrwD,EAAA6f,iBAAiBwwC,GACpBl3D,KAAK4yD,4BAA4BnjC,EAAQopC,EAAc,GACvD74D,KAAK4yD,4BAA4BljC,EAAQmpC,EAAc,GAI3DzC,EAAWp2D,KAAKq2D,cACdr2D,KAAK4yD,4BAA4BlmC,EAAW8C,UAAW7oB,EAAAgF,KAAKW,KAAI,GAChEtM,KAAKsvD,aAKX,IAAIwW,EAAa9kD,EAAWO,OAC5BR,EAAgBjD,KAAOgoD,EACvB,IAAIC,EAAa/lE,KAAK4yD,4BAA4BnjC,EAAQopC,EAAc,GACpEmN,EAAahmE,KAAKsvD,YACtBwW,EAAWpkD,OAEX,IAAIukD,EAAajlD,EAAWO,OAC5BR,EAAgBjD,KAAOmoD,EACvB,IAAIC,EAAalmE,KAAK4yD,4BAA4BljC,EAAQmpC,EAAc,GACpEsN,EAAanmE,KAAKsvD,YACtBvuC,EAAgBjD,KAAOmoD,EAAWvkD,OAElCV,EAAWgC,cAAc8iD,EAAYG,GAErC,IAAIpK,EAAal1D,EAAAgF,KAAKuwC,iBAAiB8pB,EAAYG,GAAY,GAC/D,OAAKtK,GAQLkK,EAAa/lE,KAAKi6D,kBAChB8L,EACAC,EACAnK,EAAU,IAGVpsC,GAEFy2C,EAAalmE,KAAKi6D,kBAChBiM,EACAC,EACAtK,EAAU,IAGVnsC,GAEF1vB,KAAKsvD,YAAcuM,EACZ77D,KAAKL,OAAO6qC,SAAS4rB,EAAU2P,EAAYG,KAxBhDlmE,KAAKuG,MACHG,EAAA5C,eAAe+uD,mCACfnmC,EAAWtoB,MAAO4hE,EAAWnhE,WAAYshE,EAAWthE,YAEtD7E,KAAKsvD,YAAcuJ,EACZ74D,KAAKL,OAAOisC,sBAsBvBsjB,EAAAjtD,UAAA83D,8BAAA,SAA8BrtC,EAAoCmsC,GAChE,IAAIl5D,EAASK,KAAKL,OACdohB,EAAkB/gB,KAAK+gB,gBAGvBqlD,EAAWpmE,KAAKkzD,kBAClBxmC,EAAWhJ,QACXm1C,GAAkBlyD,EAAAgF,KAAKc,KACnB9F,EAAAgF,KAAKG,IACL+sD,EAAc,KAKpB,GAAIhyD,EAAA8c,gBAAgByiD,IAAav/D,EAAA+c,aAAayF,YAAa,OAAO+8C,EAClE,IAEI/+B,EACAgqB,EACAgV,EAJA/W,EAActvD,KAAKsvD,YAMvB,OAAQ5iC,EAAWG,UACjB,KAAKnD,EAAAC,MAAMu3B,UAGT,GAAIlhD,KAAKsvD,YAAYx8C,GAAE,KAKrB,OAJA9S,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,OAAQ0jB,EAAYvhD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACEs5B,EAAKxgC,EAAAyd,SAASqvC,OACdtC,EAAU,EACVgV,EAAY1mE,EAAO6mC,UAAU,GAC7B,MAEF,OACA,OAEEa,GADI37B,EAAU1L,KAAK0L,SACNkB,SACT/F,EAAAyd,SAAS43C,OACTr1D,EAAAyd,SAASqvC,OACbtC,EAAa3lD,EAAQ4lD,eACrB+U,EAAY/W,EAAYhT,YAAY38C,GACpC,MAEF,OACA,OACE0nC,EAAKxgC,EAAAyd,SAAS43C,OACd7K,EAAU,EACVgV,EAAY1mE,EAAOinC,UAAU,GAC7B,MAEF,QACES,EAAKxgC,EAAAyd,SAAS63C,OACd9K,EAAU,EACVgV,EAAY1mE,EAAOqnC,UAAU,GAC7B,MAEF,QACEK,EAAKxgC,EAAAyd,SAAS83C,OACd/K,EAAU,EACVgV,EAAY1mE,EAAOunC,UAAU,GAC7B,MAEF,QAEE,OADAzjC,QAAO,GACA9D,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAMw3B,YAGT,GAAInhD,KAAKsvD,YAAYx8C,GAAE,KAKrB,OAJA9S,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENpE,KAAKL,OAAOisC,oBAGrB,OAAQ0jB,EAAYvhD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACEs5B,EAAKxgC,EAAAyd,SAAS+3C,OACdhL,EAAU,EACVgV,EAAY1mE,EAAO6mC,UAAU,GAC7B,MAEF,OACA,OACE,IAAI96B,EACJ27B,GADI37B,EAAU1L,KAAK0L,SACNkB,SACT/F,EAAAyd,SAASg4C,OACTz1D,EAAAyd,SAAS+3C,OACbhL,EAAa3lD,EAAQ4lD,eACrB+U,EAAY/W,EAAYhT,YAAY38C,GACpC,MAEF,OACA,OACE0nC,EAAKxgC,EAAAyd,SAASg4C,OACdjL,EAAU,EACVgV,EAAY1mE,EAAOinC,UAAU,GAC7B,MAEF,QACES,EAAKxgC,EAAAyd,SAASi4C,OACdlL,EAAU,EACVgV,EAAY1mE,EAAOqnC,UAAU,GAC7B,MAEF,QACEK,EAAKxgC,EAAAyd,SAASk4C,OACdnL,EAAU,EACVgV,EAAY1mE,EAAOunC,UAAU,GAC7B,MAEF,QAEE,OADAzjC,QAAO,GACA9D,EAAOisC,oBAGlB,MAEF,QAEE,OADAnoC,QAAO,GACA9D,EAAOisC,oBAKlB,GAAIitB,GAAkBlyD,EAAAgF,KAAKc,KACzB,OAAOzM,KAAK24D,2BAA2BjsC,EAAWhJ,QAChD/jB,EAAO4nC,aAAaF,EAClB++B,EACAC,IAEF,GAKJ,IAAI7O,EAAYz2C,EAAgB9C,aAAaqxC,GAAa,GACtDgX,EAAWtmE,KAAK24D,2BAA2BjsC,EAAWhJ,QACxD/jB,EAAO4nC,aAAaF,EAClBrnC,KAAKL,OAAOkoC,eAAe2vB,EAAUh8C,MAAO61C,GAC5CgV,IAEF,GAEFrmE,KAAKsvD,YAAc7rD,OAAO+zD,GAAWxlD,KACrC+O,EAAgBxC,cAAqBi5C,GAErC,IAAIx6C,EAAqBw6C,EAAWh8C,MACpC,OAAO7b,EAAOoqC,YAAY,MACxBpqC,EAAOgqC,eAAe3sB,EAAYopD,GAClCE,EACA3mE,EAAOkoC,eAAe7qB,EAAYq0C,IACjCA,IAGLnC,EAAAjtD,UAAA+3D,6BAAA,SACEttC,EACAmsC,GAEA,IAEIp1C,EAFA9jB,EAASK,KAAKL,OACdm8D,GAAW,EAGf,OAAQpvC,EAAWG,UACjB,KAAKnD,EAAAC,MAAM5gB,KAWT,GAVA0a,EAAOzjB,KAAKkzD,kBACVxmC,EAAWhJ,QACXm1C,GAAkBlyD,EAAAgF,KAAKc,KACnB9F,EAAAgF,KAAKG,IACL+sD,EAAc,KAMhB74D,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBn7C,KAAKsvD,YAAYnU,eAGpC,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAauC,MAC5C,CACZ0a,EAAOzjB,KAAK89D,qBAAqBp9C,EAAUgM,EAAWhJ,QAASD,EAAMiJ,GACrE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,oBAIhB,MAEF,KAAKliB,EAAAC,MAAM1gB,MACT,GAAIyjB,EAAWhJ,QAAQ3V,MAAQnH,EAAAoH,SAASoJ,UAClBsV,EAAWhJ,QAASrM,aAAezQ,EAAA0Q,YAAYsf,SAC/ClK,EAAWhJ,QAASrM,aAAezQ,EAAA0Q,YAAYof,OAClE,CAEDjT,EAAOzjB,KAAK05D,yBAA4ChtC,EAAWhJ,QAASm1C,GAAgB,GAExF74D,KAAK0L,QAAQmT,WAAW7e,KAAK+1D,iBAAiBtyC,EAAMiJ,EAAWtoB,OACnE,MAaF,GAVAqf,EAAOzjB,KAAKkzD,kBACVxmC,EAAWhJ,QACXm1C,GAAkBlyD,EAAAgF,KAAKc,KACnB9F,EAAAgF,KAAKG,IACL+sD,EAAc,KAMhB74D,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBn7C,KAAKsvD,YAAYnU,eAGpC,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAayC,OAC5C,CACZwa,EAAOzjB,KAAK89D,qBAAqBp9C,EAAUgM,EAAWhJ,QAASD,EAAMiJ,GACrE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,oBAGhB,OAAQ5rC,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS+3C,OAAQ18D,EAAO6mC,UAAU,GAAI/iB,GACjE,MAEF,OACA,OACEA,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASg4C,OACTz1D,EAAAyd,SAAS+3C,OACbr8D,KAAKsvD,YAAYjT,aAAa18C,GAC9B8jB,GAEF,MAEF,OACA,OACEA,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASg4C,OAAQ38D,EAAOinC,UAAU,GAAInjB,GACjE,MAEF,QACEA,EAAO9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQ++C,OAAQ9iD,GAC1C,MAEF,QACEA,EAAO9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQg/C,OAAQ/iD,GAC1C,MAEF,QACEhgB,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAMu3B,UAYT,GAXA4a,GAAW,EACXr4C,EAAOzjB,KAAKkzD,kBACVxmC,EAAWhJ,QACXm1C,GAAkBlyD,EAAAgF,KAAKc,KACnB9F,EAAAgF,KAAKG,IACL+sD,EAAc,KAMhB74D,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBn7C,KAAKsvD,YAAYnU,eAGpC,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAawC,YAC5C,CACZya,EAAOzjB,KAAK89D,qBAAqBp9C,EAAUgM,EAAWhJ,QAASD,EAAMiJ,GACrE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,oBAGhB,OAAQ5rC,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASqvC,OAAQlwC,EAAMzjB,KAAKL,OAAO6mC,UAAU,IACxE,MAEF,OACA,OACE/iB,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAAS43C,OACTr1D,EAAAyd,SAASqvC,OACblwC,EACAzjB,KAAKsvD,YAAYhT,YAAY38C,IAE/B,MAEF,OACA,OACE8jB,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS43C,OAAQz4C,EAAM9jB,EAAOinC,UAAU,IACnE,MAEF,QACEnjB,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS63C,OAAQ14C,EAAM9jB,EAAOqnC,UAAU,IACnE,MAEF,QACEvjB,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS83C,OAAQ34C,EAAM9jB,EAAOunC,UAAU,IACnE,MAEF,QACEzjC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAMw3B,YAYT,GAXA2a,GAAW,EACXr4C,EAAOzjB,KAAKkzD,kBACVxmC,EAAWhJ,QACXm1C,GAAkBlyD,EAAAgF,KAAKc,KACnB9F,EAAAgF,KAAKG,IACL+sD,EAAc,KAMhB74D,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAE5C,GADIqoC,EAAiBn7C,KAAKsvD,YAAYnU,eAGpC,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa0C,YAC5C,CACZua,EAAOzjB,KAAK89D,qBAAqBp9C,EAAUgM,EAAWhJ,QAASD,EAAMiJ,GACrE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,oBAGhB,OAAQ5rC,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS+3C,OAAQ54C,EAAM9jB,EAAO6mC,UAAU,IACnE,MAEF,OACA,OACE/iB,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASg4C,OACTz1D,EAAAyd,SAAS+3C,OACb54C,EACAzjB,KAAKsvD,YAAYhT,YAAY38C,IAE/B,MAEF,OACA,OACE8jB,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASg4C,OAAQ74C,EAAM9jB,EAAOinC,UAAU,IACnE,MAEF,QACEnjB,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASi4C,OAAQ94C,EAAM9jB,EAAOqnC,UAAU,IACnE,MAEF,QACEvjB,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASk4C,OAAQ/4C,EAAM9jB,EAAOunC,UAAU,IACnE,MAEF,QACEzjC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAM+3B,YAWT,GAVAj+B,EAAOzjB,KAAKkzD,kBACVxmC,EAAWhJ,QACXm1C,GAAkBlyD,EAAAgF,KAAKc,KACnB9F,EAAAgF,KAAKG,IACL+sD,EAAc,KAMhB74D,KAAKsvD,YAAYx8C,GAAE,KAErB,GADIqoC,EAAiBn7C,KAAKsvD,YAAYnU,eAGpC,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa2C,KAC5C,CACZsa,EAAOzjB,KAAK89D,qBAAqBp9C,EAAUgM,EAAWhJ,QAASD,EAAMiJ,GACrE,MAMNjJ,EAAOzjB,KAAKymE,eAAehjD,EAAMzjB,KAAKsvD,aACtCtvD,KAAKsvD,YAAc3oD,EAAAgF,KAAKW,KACxB,MAEF,KAAKod,EAAAC,MAAMg4B,MAaT,GAZAl+B,EAAOzjB,KAAKkzD,kBACVxmC,EAAWhJ,QACXm1C,GAAkBlyD,EAAAgF,KAAKc,KACnB9F,EAAAgF,KAAKG,IACL+sD,EAAe/lD,GAAE,GACfnM,EAAAgF,KAAKI,IACL8sD,EAAc,KAMlB74D,KAAKsvD,YAAYx8C,GAAE,KAAuB,CAC5C,IAAIqoC,EAEEz6B,EADN,GADIy6B,EAAiBn7C,KAAKsvD,YAAYnU,eAGpC,GADIz6B,EAAWy6B,EAAe56B,eAAeu6B,EAAAt0C,aAAa4C,aAC5C,CACZqa,EAAOzjB,KAAK89D,qBAAqBp9C,EAAUgM,EAAWhJ,QAASD,EAAMiJ,GACrE,MAOJ,OAJA1sB,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,oBAUhB,OAREnoB,EAAOzjB,KAAKi6D,kBACVx2C,EACAzjB,KAAKsvD,YAAatvD,KAAKsvD,YAAY8N,QAAO,IAE1C1wC,EAAWhJ,SAIP1jB,KAAKsvD,YAAYvhD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE0V,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASs5C,OAAQn6C,EAAM9jB,EAAO6mC,WAAW,IACpE,MAEF,OACA,OACE/iB,EAAO9jB,EAAO4nC,aACZvnC,KAAK0L,QAAQkB,SACT/F,EAAAyd,SAASu5C,OACTh3D,EAAAyd,SAASs5C,OACbn6C,EACAzjB,KAAKsvD,YAAY/S,eAAe58C,IAElC,MAEF,OACA,OACE8jB,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASu5C,OAAQp6C,EAAM9jB,EAAOinC,WAAW,GAAI,IACxE,MAEF,QACEnjC,QAAO,GACPggB,EAAO9jB,EAAOisC,oBAGlB,MAEF,KAAKliB,EAAAC,MAAMm2B,OAKT,OAJA9/C,KAAKuG,MACHG,EAAA5C,eAAekR,wBACf0X,EAAWtoB,OAENzE,EAAOisC,oBAEhB,QAEE,OADAnoC,QAAO,GACA9D,EAAOisC,oBAGlB,OAAOkwB,EACH97D,KAAK24D,2BAA2BjsC,EAAWhJ,QAASD,EAAMo1C,GAAkBlyD,EAAAgF,KAAKc,MACjFgX,GAINyrC,EAAAjtD,UAAAi4D,uBAAA,SAAuBz2C,EAAqBzR,GAC1C,IAAIrS,EAASK,KAAKL,OACdme,EAAO9d,KAAK+gB,gBAAgBjD,KAChC,OAAQ9L,EAAKjE,MACX,OACM+P,EAAK0F,YAAYC,EAAMzR,KACzByR,EAAOzjB,KAAK0L,QAAQwB,WAAU,GAC1BvN,EAAOynC,YAAYvgC,EAAA2gB,QAAQk/C,cAAejjD,GAC1C9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS2C,OAC3BtnB,EAAO4nC,aAAa1gC,EAAAyd,SAASwC,OAC3BrD,EACA9jB,EAAO6mC,UAAU,KAEnB7mC,EAAO6mC,UAAU,MAGzB,MAEF,OACM1oB,EAAK0F,YAAYC,EAAMzR,KACzByR,EAAOzjB,KAAK0L,QAAQwB,WAAU,GAC1BvN,EAAOynC,YAAYvgC,EAAA2gB,QAAQm/C,eAAgBljD,GAC3C9jB,EAAO4nC,aAAa1gC,EAAAyd,SAAS2C,OAC3BtnB,EAAO4nC,aAAa1gC,EAAAyd,SAASwC,OAC3BrD,EACA9jB,EAAO6mC,UAAU,KAEnB7mC,EAAO6mC,UAAU,MAGzB,MAEF,OACM1oB,EAAK0F,YAAYC,EAAMzR,KACzByR,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASsC,OAClCnD,EACA9jB,EAAO6mC,UAAU,OAGrB,MAEF,OACM1oB,EAAK0F,YAAYC,EAAMzR,KACzByR,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASsC,OAClCnD,EACA9jB,EAAO6mC,UAAU,SAGrB,MAEF,QACM1oB,EAAK0F,YAAYC,EAAMzR,KACzByR,EAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASsC,OAClCnD,EACA9jB,EAAO6mC,UAAU,KAMzB,OAAO/iB,GAITyrC,EAAAjtD,UAAAwkE,eAAA,SAAehjD,EAAqBzR,GAClC,IAAIrS,EAASK,KAAKL,OAClB,OAAQqS,EAAKjE,MACX,OACA,OACA,OACA,OACA,QACE0V,EAAOzjB,KAAKk6D,uBAAuBz2C,EAAMzR,GAG3C,OACA,OACE,OAAOrS,EAAOynC,YAAYvgC,EAAA2gB,QAAQC,OAAQhE,GAE5C,OACA,OACE,OAAO9jB,EAAOynC,YAAYvgC,EAAA2gB,QAAQE,OAAQjE,GAE5C,OACA,OACE,OAAO9jB,EAAOynC,YAAyB,IAAbp1B,EAAKgV,KAAangB,EAAA2gB,QAAQE,OAAS7gB,EAAA2gB,QAAQC,OAAQhE,GAE/E,QACE,OAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASG,MAAOhB,EAAM9jB,EAAOqnC,UAAU,IAEpE,QACE,OAAOrnC,EAAO4nC,aAAa1gC,EAAAyd,SAASI,MAAOjB,EAAM9jB,EAAOunC,UAAU,IAEpE,QAEE,OADAzjC,QAAO,GACA9D,EAAO6mC,UAAU,KAM9B0oB,EAAAjtD,UAAAo0D,cAAA,SAAc5yC,EAAqBzR,GACjC,IAAIrS,EAASK,KAAKL,OAClB,OAAQqS,EAAKjE,MACX,OACA,OACA,OACA,OACA,QACE0V,EAAOzjB,KAAKk6D,uBAAuBz2C,EAAMzR,GAG3C,OACA,OACE,OAAOyR,EAET,OACA,OACE,OAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASM,MAAOnB,EAAM9jB,EAAOinC,UAAU,IAEpE,OACA,OACE,OAAoB,IAAb50B,EAAKgV,KACRrnB,EAAO4nC,aAAa1gC,EAAAyd,SAASM,MAAOnB,EAAM9jB,EAAOinC,UAAU,IAC3DnjB,EAEN,QACE,OAAO9jB,EAAO4nC,aAAa1gC,EAAAyd,SAASO,MAAOpB,EAAM9jB,EAAOqnC,UAAU,IAEpE,QACE,OAAOrnC,EAAO4nC,aAAa1gC,EAAAyd,SAASQ,MAAOrB,EAAM9jB,EAAOunC,UAAU,IAEpE,QAEE,OADAzjC,QAAO,GACA9D,EAAO6mC,UAAU,KAM9B0oB,EAAAjtD,UAAA4jE,aAAA,SAAa5Z,EAAsBO,WAC7B7sD,EAASK,KAAKL,OACdohB,EAAkB/gB,KAAK+gB,gBACvBuwC,EAAiBtxD,KAAK0L,QAAQ4lD,eAG9BkG,EAAYz2C,EAAgB9C,aAAaguC,EAAcj6C,MAAM,GAC7DwmD,EAAe,IAAIryD,MAQvB,GAPAqyD,EAAa3yD,KACXlG,EAAOgqC,eAAe6tB,EAAUh8C,MAC9B8yC,EAAAoX,gBAAgB1lE,KAAMisD,EAAeO,KAKrCP,EAAcz5C,YAChB,IAAmB,IAAAgL,EAAAzN,EAAAk8C,EAAcz5C,QAAQoG,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAA9C,IAAIQ,EAAMN,EAAA7O,MACb,GAAImP,EAAO1C,MAAQ+sC,EAAArxC,YAAY+V,MAAO,CACpC,IAAIonD,EAAen2D,EACf+8C,EAAYoZ,EAAM50D,KAClB60D,EAAkBrZ,EAAUpvC,eAC5BmvC,EAAmBqZ,EAAM3kE,UAAUmN,YAEvC,GADA3L,QAAQmjE,EAAMz0D,MAAM1L,EAAApE,YAAYkY,QAC5BgzC,EAAiBjyC,YACnBk9C,EAAa3yD,KAAKlG,EAAO6oC,YAAYglB,EAAUhkC,SAC7C7pB,EAAOkoC,eAAe2vB,EAAUh8C,MAAO81C,GACvCtxD,KAAKkzD,kBACH3F,EAAiBjyC,YACjBkyC,EAAS,KAIXqZ,EACAD,EAAMnnD,mBAEH,CAEL,IAAI0Z,EAAoCytC,EAAM3kE,UAAUmN,YAAa+pB,eACrEq/B,EAAa3yD,KAAKlG,EAAO6oC,YAAYglB,EAAUhkC,SAC7C7pB,EAAOkoC,eAAe2vB,EAAUh8C,MAAO81C,GACvCn4B,GAAkB,EACdx5B,EAAOkoC,eAAe,EAAI1O,EAAgB0tC,GAC1CrZ,EAAUnR,aAAa18C,GACzBknE,EACFD,EAAMnnD,mHAchB,OANA+4C,EAAa3yD,KACXlG,EAAOkoC,eAAe2vB,EAAUh8C,MAAO81C,IAGzCvwC,EAAgBxC,cAAci5C,GAC9Bx3D,KAAKsvD,YAAcrD,EAAcj6C,KAC1BrS,EAAOoqC,YAAY,KAAMyuB,EAAclH,IAIhDpC,EAAAjtD,UAAAoyD,wBAAA,SAAwBpI,EAAsBO,GAE5C,IAAI7sD,EAASK,KAAKL,OACd2xD,EAAiBtxD,KAAK0L,QAAQ4lD,eAElC,OADAtxD,KAAKsvD,YAAcrD,EAAcj6C,KAC1BrS,EAAO6qC,SACE,GAAd8mB,EACI3xD,EAAO4nC,aACL1gC,EAAAyd,SAASM,MACTjlB,EAAOkoC,eAAe,EAAC,GACvBloC,EAAOinC,UAAU,IAEnBjnC,EAAOkoC,eAAe,EAAC,GAC3BloC,EAAOkoC,eAAe,EAAGypB,GACzB3xD,EAAOooC,eAAe,EACpB/nC,KAAK6lE,aAAa5Z,EAAeO,MAMvC0C,EAAAjtD,UAAA8zD,iBAAA,SAAiBtyC,EAAqBrf,GACpC,IAAI2c,EAAkB/gB,KAAK+gB,gBACvBjc,EAASV,EAAMU,OACfA,EAAOma,eAAiB,IAAGna,EAAOma,eAAiBjf,KAAKL,OAAOy0C,iBAAiBtvC,EAAOC,iBAC3FX,EAAM4a,aAAeyE,EACrB1C,EAAgB3E,eAAevW,KAAKzB,IAExC8qD,EA/pOA,CAA8BxoD,EAAAT,mBAmqO9B,SAAA+sD,EACE3jD,EACAD,EACA03D,GAKA,QALA,IAAAA,MAAA,MAEA9X,EAA8B8X,EAAgBA,EAActyD,WAAapF,EAAYhL,MAAMU,OAAOmzB,WAClGg3B,EAA+B5/C,EAAQmF,WAElCnF,EAAQ8E,aAAa2mC,EAAApxC,eAAegQ,UAAzC,CAEA,IAAIe,EAAUpL,EAAQoL,QAClBhH,EAAYhQ,OAAOmD,EAAA0P,cAAc1P,EAAAS,cAAcqS,SAAUtK,EAAYkE,aACrEmY,EAAOhY,EAAUyD,UACrB,GAAIuU,GAAQA,EAAKnmB,OAAQ,CACvB,IAAI8B,EAAMqkB,EAAK,GACXrkB,EAAI2G,MAAQnH,EAAAoH,SAASoJ,SAA+BhQ,EAAKiQ,aAAezQ,EAAA0Q,YAAYC,QACtF03C,EAAyD7nD,EAAK9F,MAC1DmqB,EAAKnmB,QAAU,KACjB8B,EAAMqkB,EAAK,IACH1d,MAAQnH,EAAAoH,SAASoJ,SAA+BhQ,EAAKiQ,aAAezQ,EAAA0Q,YAAYC,QACtFy3C,EAA8BC,EAC9BA,EAAyD7nD,EAAK9F,MAC1DmqB,EAAKnmB,OAAS,GAChBmV,EAAQlU,MACNG,EAAA5C,eAAe+T,+BACfpE,EAAUrP,MAAO,IAAKqnB,EAAKnmB,OAAOT,aAItC4V,EAAQlU,MACNG,EAAA5C,eAAe8T,wBACfxQ,EAAIhD,SAKVqW,EAAQlU,MACNG,EAAA5C,eAAe8T,wBACfxQ,EAAIhD,YAIRqW,EAAQlU,MACNG,EAAA5C,eAAem8D,wCACfxsD,EAAUrP,MAAO,IAAK,MA/sOf1E,EAAAwvD,iaCzPb,IAAAzoD,EAAAtG,EAAA,GAMA26C,EAAA36C,EAAA,GAIAupB,EAAAvpB,EAAA,GAQAuG,EAAAvG,EAAA,GAKA+C,EAAA/C,EAAA,GAIAyG,EAAAzG,EAAA,GAyDA4mE,EAAA,SAAAj9D,GAcE,SAAAi9D,IAAA,IAAAh9D,EACED,EAAAtJ,KAAAR,OAAOA,YAVT+J,EAAAi9D,QAAoB,IAAI7gE,MAExB4D,EAAAk9D,QAAuB,IAAIztD,IAE3BzP,EAAAm9D,QAAuB,IAAI1tD,IAE3BzP,EAAAm5C,UAAmC,KA4b3Bn5C,EAAAo9D,8BAAqC,EAsbrCp9D,EAAAq9D,oBAAuC,KA72B7Cr9D,EAAK0Q,QAAU,IAAIqgC,EAAAjxC,QAAQE,EAAK7D,eAw0GpC,OAx1G4BiF,EAAA47D,EAAAj9D,GAoB1Bi9D,EAAA9kE,UAAAolE,UAAA,SACEjiE,EACAyK,EACAsF,GAEA,IAAIpQ,EAAiB7B,EAAAyuB,cAAc9hB,GAC/BoJ,EAAerS,EAAAkrB,mBAAmB/sB,GAGtC,IAAI/E,KAAKknE,QAAQv1D,IAAIsH,GAArB,CACAjZ,KAAKknE,QAAQztD,IAAIR,GACjBjZ,KAAKinE,QAAQxtD,IAAIR,GAGjB,IAAInU,EAAS,IAAI8B,EAAA+wB,OACf5yB,EACAK,EACA+P,EACIvO,EAAA6wB,WAAWS,MACXroB,EAAK+hB,WAAWnrB,EAAA3D,iBAAmB+M,EAAKy3D,QAAQ7gE,EAAAnE,eAAgBmE,EAAA3D,eAAewC,QAAU,EACvFsB,EAAA6wB,WAAWU,QACXvxB,EAAA6wB,WAAWonB,SAEfpkC,EAAUza,KAAKya,QACnBA,EAAQvP,QAAQrF,KAAKf,GAGrB,IAAIyiE,EAAK,IAAI79C,EAAAm5B,UAAU/9C,EAAQ2V,EAAQvU,aACvCqhE,EAAGrkB,UAAYljD,KAAKkjD,UACpBp+C,EAAO8yB,UAAY2vC,EAEnB,IADA,IAAI35D,EAAa9I,EAAO8I,YAChB25D,EAAG3hB,KAAKl8B,EAAAC,MAAM07B,YAAY,CAChC,IAAIv3C,EAAY9N,KAAKwnE,uBAAuBD,GACxCz5D,IACFA,EAAU8B,OAAS9K,EACnB8I,EAAW/H,KAAKiI,IAGpBy5D,EAAGxe,WAILge,EAAA9kE,UAAAulE,uBAAA,SACED,EACAjzD,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIoG,EAAQjU,EAAApE,YAAY2Q,KACpBy0D,GAAiB,EAGjBn0D,EAAqC,KAClCi0D,EAAG3hB,KAAKl8B,EAAAC,MAAMg7B,KAAK,CACpB8iB,EAAW,IAAGA,EAAWF,EAAGzkB,UAChC,IAAIrvC,EAAYzT,KAAK0nE,eAAeH,GAC/B9zD,GAIAH,IAAYA,MACjBA,EAAWzN,KAAK4N,IAJdzT,KAAK2nE,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBN,EAAG3hB,KAAKl8B,EAAAC,MAAMtb,UACZk5D,EAAG3hB,KAAKl8B,EAAAC,MAAMk1B,UAChB7+C,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfuyD,EAAGnjE,SAGHqjE,EAAW,IAAGA,EAAWF,EAAGzkB,UAChCpoC,GAASjU,EAAApE,YAAYgM,OACrBu5D,EAAcL,EAAGzkB,SACjB+kB,EAAYN,EAAGxvC,KAGjB,IAEI+vC,EAAgC,MAAbxzD,GAAqBA,EAAUxB,GAAGrM,EAAApE,YAAYgQ,SACjEk1D,EAAG3hB,KAAKl8B,EAAAC,MAAMi1B,UACZ6oB,EAAW,IAAGA,EAAWF,EAAGzkB,UAC5BglB,GACF9nE,KAAKuG,MACHG,EAAA5C,eAAeikE,gEACfR,EAAGnjE,SAGPsW,GAASjU,EAAApE,YAAYu8C,QAAUn4C,EAAApE,YAAYgQ,SAClCy1D,IACTptD,GAASjU,EAAApE,YAAYgQ,SAIvB,IAAIvE,EAA8B,KAG9Bk6D,EAAQT,EAAGjiB,OAEf,OADImiB,EAAW,IAAGA,EAAWF,EAAGvkB,cACxBglB,GACN,KAAKt+C,EAAAC,MAAMpP,MAGT,GAFAgtD,EAAGt3D,OACHyK,GAASjU,EAAApE,YAAYkY,MACjBgtD,EAAG3hB,KAAKl8B,EAAAC,MAAM/O,MAAO,CACvB9M,EAAY9N,KAAKioE,UAAUV,EAAI7sD,EAAOpH,EAAYm0D,GAClD,MAEA35D,EAAY9N,KAAKkoE,cAAcX,EAAI7sD,EAAOpH,EAAYm0D,GACtDn0D,EAAa,KAEf,MAEF,KAAKoW,EAAAC,MAAM41B,IAAK7kC,GAASjU,EAAApE,YAAYk9C,IACrC,KAAK71B,EAAAC,MAAMo2B,IACTwnB,EAAGt3D,OACHnC,EAAY9N,KAAKkoE,cAAcX,EAAI7sD,EAAOpH,EAAYm0D,GACtDn0D,EAAa,KACb,MAEF,KAAKoW,EAAAC,MAAM/O,KACT2sD,EAAGt3D,OACHnC,EAAY9N,KAAKioE,UAAUV,EAAI7sD,EAAOpH,EAAYm0D,GAClDn0D,EAAa,KACb,MAEF,KAAKoW,EAAAC,MAAM5N,SACTwrD,EAAGt3D,OACHnC,EAAY9N,KAAKmoE,cAAcZ,EAAI7sD,EAAOpH,EAAYm0D,GACtDn0D,EAAa,KACb,MAEF,KAAKoW,EAAAC,MAAMpT,SACT,IAAIwvC,EAAQwhB,EAAGzhB,OAEf,GADAyhB,EAAGt3D,QACEs3D,EAAG3hB,KAAKl8B,EAAAC,MAAM1M,OAAQ,CACzBsqD,EAAGphB,MAAMJ,GACTj4C,EAAY9N,KAAKooE,eAAeb,GAAI,GACpC,MAEAA,EAAGrhB,QAAQH,GAEbrrC,GAASjU,EAAApE,YAAYkU,SAGvB,KAAKmT,EAAAC,MAAM1M,MACX,KAAKyM,EAAAC,MAAM/I,UACT2mD,EAAGt3D,OACHnC,EAAY9N,KAAKqoE,sBAAsBd,EAAI7sD,EAAOpH,EAAYm0D,GAC9Dn0D,EAAa,KACb,MAEF,KAAKoW,EAAAC,MAAMhP,UACLorC,EAAQwhB,EAAGzhB,OACfyhB,EAAGt3D,OACCs3D,EAAGjiB,MAAK,EAAO57B,EAAA00B,mBAAmB8G,SAAWx7B,EAAAC,MAAMM,YACrDs9C,EAAGrhB,QAAQH,GACXj4C,EAAY9N,KAAKsoE,eAAef,EAAI7sD,EAAOpH,EAAYm0D,GACvDn0D,EAAa,OAEbi0D,EAAGphB,MAAMJ,GACTj4C,EAAY9N,KAAKooE,eAAeb,GAAI,IAEtC,MAEF,KAAK79C,EAAAC,MAAMlb,OACT84D,EAAGt3D,OAGDnC,GAFF4M,GAASjU,EAAApE,YAAYoM,QACThI,EAAApE,YAAYgM,OACVrO,KAAKuoE,kBAAkBhB,EAAIE,GAE3BznE,KAAKwoE,YAAYjB,GAE/B,MAEF,KAAK79C,EAAAC,MAAM4L,KACLwwB,EAAQwhB,EAAGzhB,OACfyhB,EAAGt3D,OACCs3D,EAAGjiB,MAAK,EAAO57B,EAAA00B,mBAAmB8G,SAAWx7B,EAAAC,MAAMM,YACrDs9C,EAAGrhB,QAAQH,GACXj4C,EAAY9N,KAAKyoE,qBAAqBlB,EAAI7sD,EAAOpH,EAAYm0D,GAC7Dn0D,EAAa,OAEbi0D,EAAGphB,MAAMJ,GACTj4C,EAAY9N,KAAKooE,eAAeb,GAAI,IAEtC,MAEF,QAGM7sD,EAAQjU,EAAApE,YAAYgM,OACtBP,EAAY9N,KAAK0oE,YAAYnB,EAAI7sD,EAAO+sD,IAIpCI,GACF7nE,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAAMwjE,EAAaC,GAAY,UASjCvzD,IACHxG,EAAY9N,KAAKooE,eAAeb,GAAI,KAQ5C,GAAIj0D,EACF,IAAK,IAAIjT,EAAI,EAAGgL,EAAIiI,EAAWhO,OAAQjF,EAAIgL,IAAKhL,EAC9CL,KAAKuG,MACHG,EAAA5C,eAAe8kE,8BACft1D,EAAWjT,GAAG+D,OAIpB,OAAO0J,GAITi5D,EAAA9kE,UAAA4mE,SAAA,WACE,IAAI7B,EAAUhnE,KAAKgnE,QACnB,OAAOA,EAAQ1hE,OAAS0hE,EAAQjgD,QAAU,MAI5CggD,EAAA9kE,UAAA8mD,OAAA,WACE,GAAI/oD,KAAKgnE,QAAQ1hE,OAAQ,MAAM,IAAIoM,MAAM,wBAIzC,OAHA1R,KAAKgnE,WACLhnE,KAAKinE,QAAQ6B,QACb9oE,KAAKknE,QAAQ4B,QACN9oE,KAAKya,SAIdssD,EAAA9kE,UAAA8mE,UAAA,SACExB,EACAyB,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGIj3D,EAHAmuC,EAAQonB,EAAGt3D,OACXw3D,EAAWF,EAAGzkB,SAKlB,GAAI3C,GAASz2B,EAAAC,MAAM45B,UAAW,CAG5B,IAAI2lB,EAAsB3B,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAEpC9wC,EAAYzS,KAAKmpE,kBAAkB5B,GACvC,GAAI90D,EAAW,CACb,GAAIy2D,EAAqB,CACvB,IAAK3B,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAKjB,OAJAxjD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAET,IAAKmjE,EAAG3hB,KAAKl8B,EAAAC,MAAM63B,KAKjB,OAJAxhD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAEJmjE,EAAG3hB,KAAKl8B,EAAAC,MAAME,OACjB7pB,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,QAGhBqO,EAAU+X,YAAa,EAEzB,OAAO/X,EACF,GAAIy2D,GAAuBlpE,KAAKmnE,6BAKrC,OAJAnnE,KAAKuG,MACHG,EAAA5C,eAAeslE,iBACf7B,EAAGnjE,SAEE,KAIT,IAAI4kE,EAoBF,OAJAhpE,KAAKuG,MACHG,EAAA5C,eAAeslE,iBACf7B,EAAGnjE,SAEE,KAnBP,IAAIilE,EAAYrpE,KAAK+oE,UAAUxB,GAAI,EAAO0B,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAK9B,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAOjB,OANKylB,GACHjpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,MAAMmjE,EAAGxvC,KAAM,KAGf,MAET/lB,EAAOq3D,GACFjlE,MAAMmB,MAAQkiE,EACnBz1D,EAAK5N,MAAMoB,IAAM+hE,EAAGxvC,SAUjB,GAAIooB,GAASz2B,EAAAC,MAAMkQ,KACxB7nB,EAAOpL,EAAA0jB,KAAKC,WACV3jB,EAAA0jB,KAAKM,2BAA2B,OAAQ28C,EAAGnjE,aAAc,EAAOmjE,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,WAInF,GAAIooB,GAASz2B,EAAAC,MAAMwN,KACxBnlB,EAAOpL,EAAA0jB,KAAKC,WACV3jB,EAAA0jB,KAAK0F,qBAAqBu3C,EAAGnjE,aAAc,EAAOmjE,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,WAIrE,GAAIooB,GAASz2B,EAAAC,MAAMG,MAAQq2B,GAASz2B,EAAAC,MAAMI,MAC/C/X,EAAOpL,EAAA0jB,KAAKC,WACV3jB,EAAA0jB,KAAKM,2BAA2B,OAAQ28C,EAAGnjE,aAAc,EAAOmjE,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,WAInF,GAAIooB,GAASz2B,EAAAC,MAAM25B,cACxBikB,EAAGl1B,aACHrgC,EAAOpL,EAAA0jB,KAAKC,WACV3jB,EAAA0jB,KAAKM,2BAA2B,SAAU28C,EAAGnjE,aAAc,EAAOmjE,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,UAIrF,IAAIooB,GAASz2B,EAAAC,MAAMM,WA6CxB,OANKg/C,GACHjpE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGA,KA5CP,IAAIiR,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACrEgnB,EAAa,IAAIjlB,MACjBojE,GAAW,EAGf,GAAIhC,EAAG3hB,KAAKl8B,EAAAC,MAAM22B,UAAW,CAC3B,EAAG,CACD,IAAIkpB,EAAYxpE,KAAK+oE,UAAUxB,GAAI,EAAM0B,GACzC,IAAKO,EAAW,OAAO,KACvBp+C,EAAWvlB,KAAe2jE,SACnBjC,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,QACvB,IAAK8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM42B,aAOjB,OANK0oB,GACHjpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,MAAMmjE,EAAGxvC,KAAM,KAGf,KAIX,GAAIwvC,EAAG3hB,KAAKl8B,EAAAC,MAAM63B,KAAM,CACtB,IAAI+lB,EAAG3hB,KAAKl8B,EAAAC,MAAME,MAShB,OANKo/C,GACHjpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,MAAMmjE,EAAGxvC,KAAM,QAGf,KARPwxC,GAAW,EAWfv3D,EAAOpL,EAAA0jB,KAAKC,WAAWlV,EAAY+V,EAAYm+C,EAAUhC,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAYjF,KAAOwvC,EAAG3hB,KAAKl8B,EAAAC,MAAM46B,cAAc,CACjC,IAAIklB,EAAelC,EAAGzkB,SACtB,IAAKykB,EAAG3hB,KAAKl8B,EAAAC,MAAM66B,cAOjB,OANKykB,GACHjpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAGT,KAET,IAAIslE,EAAenC,EAAGnjE,MAAMqlE,EAAclC,EAAGxvC,KAGzCwxC,GAAW,EACf,GAAIhC,EAAG3hB,KAAKl8B,EAAAC,MAAM63B,KAAM,CACtB,IAAI+lB,EAAG3hB,KAAKl8B,EAAAC,MAAME,MAShB,OANKo/C,GACHjpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,QAGT,KARPmlE,GAAW,EAiBf,GANAv3D,EAAOpL,EAAA0jB,KAAKC,WACV3jB,EAAA0jB,KAAKM,2BAA2B,QAAS8+C,IACvC13D,GACFu3D,EACAhC,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEpBwxC,EAAU,MAGhB,OAAOv3D,GAOT+0D,EAAA9kE,UAAAknE,kBAAA,SACE5B,GAKA,IAuGI30D,EAvGAmzC,EAAQwhB,EAAGzhB,OACX2hB,EAAWF,EAAGzkB,SACd13B,EAAqC,KACrChO,EAA4B,KAC5BusD,GAAoB,EAExB,GAAIpC,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAChBmmB,GAAc,EACdpC,EAAGrhB,QAAQH,GACX36B,SAEK,CACLu+C,GAAc,EACd,EAAG,CACD,IAAI57D,EAAOnH,EAAA6uB,cAAcopB,QAMzB,GALI0oB,EAAG3hB,KAAKl8B,EAAAC,MAAM02B,eAChBspB,GAAc,EACdpC,EAAGrhB,QAAQH,GACXh4C,EAAOnH,EAAA6uB,cAAcw0B,MAEnBsd,EAAG3hB,KAAKl8B,EAAAC,MAAMwN,MAAO,CACvB,IAAIowC,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,OAiBhB,OAFAojB,EAAGphB,MAAMJ,GACT/lD,KAAKmnE,8BAA+B,EAC7B,KAhBPwC,GAAc,EACdpC,EAAGrhB,QAAQH,GACX,IAAIxkD,EAAIvB,KAAK+oE,UAAUxB,GAAI,GAC3B,IAAKhmE,EAAG,OAAO,KACf,GAAIA,EAAEwM,MAAQnH,EAAAoH,SAASunB,KAMrB,OALAv1B,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfzT,EAAE6C,OAEJpE,KAAKmnE,8BAA+B,EAC7B,KAET/pD,EAAqB7b,MAMlB,KAAIgmE,EAAG5hB,iBA8CZ,OATIgkB,EACF3pE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGLmjE,EAAGphB,MAAMJ,GAEX/lD,KAAKmnE,6BAA+BwC,EAC7B,KA7CP,IAAI/oE,EAAOgG,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,MAAMmjE,EAAGzkB,SAAUykB,EAAGxvC,MAazF,GAZIwvC,EAAG3hB,KAAKl8B,EAAAC,MAAM26B,YAChBqlB,GAAc,EACdpC,EAAGrhB,QAAQH,GACPh4C,GAAQnH,EAAA6uB,cAAcw0B,KACxBjqD,KAAKuG,MACHG,EAAA5C,eAAe8lE,oCACfrC,EAAGnjE,SAGL2J,EAAOnH,EAAA6uB,cAAco0C,UAGrBtC,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,OAAQ,CACxBwlB,GAAc,EACdpC,EAAGrhB,QAAQH,GACX,IAAI/zC,EAAOhS,KAAK+oE,UAAUxB,GAC1B,IAAKv1D,EAEH,OADAhS,KAAKmnE,6BAA+BwC,EAC7B,KAET,IAAIG,EAAQ,IAAIljE,EAAAqkB,cAChB6+C,EAAM5+C,cAAgBnd,EACtB+7D,EAAMlpE,KAAOA,EACbkpE,EAAM93D,KAAOA,EACRoZ,EACAA,EAAWvlB,KAAKikE,GADJ1+C,GAAe0+C,QAG5BH,GACF3pE,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACf6Z,EAAGnjE,gBAgBJmjE,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,QACvB,IAAK8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAUjB,OATImmB,EACF3pE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAGdmjE,EAAGphB,MAAMJ,GAEX/lD,KAAKmnE,6BAA+BwC,EAC7B,KAKX,OAAIpC,EAAG3hB,KAAKl8B,EAAAC,MAAM06B,qBAChBslB,GAAc,EACdpC,EAAGrhB,QAAQH,IACXnzC,EAAa5S,KAAK+oE,UAAUxB,KAiB9BvnE,KAAKmnE,8BAA+B,EAC7BvgE,EAAA0jB,KAAKa,gBACVC,MACAxY,EACAwK,GACA,EACAmqD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,QArBpB/3B,KAAKmnE,6BAA+BwC,EAC7B,QAGLA,EACF3pE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,MAGdmjE,EAAGphB,MAAMJ,GAEX/lD,KAAKmnE,6BAA+BwC,EAC7B,OAcX5C,EAAA9kE,UAAAylE,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAGzkB,SAClB,GAAIykB,EAAG5hB,iBAAkB,CAGvB,IAFA,IAAI/kD,EAAO2mE,EAAGnhB,iBACV15B,EAAyB9lB,EAAA0jB,KAAKM,2BAA2BhqB,EAAM2mE,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAClFwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMg6B,MAAM,CACzB,IAAI4jB,EAAG5hB,iBAYL,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KAXPxD,EAAO2mE,EAAGnhB,iBACV15B,EAAa9lB,EAAA0jB,KAAK2E,+BAChBvC,EACA9lB,EAAA0jB,KAAKM,2BAA2BhqB,EAAM2mE,EAAGnjE,SACzCmjE,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAU5B,IAAItM,OAAI,EACR,IAAI87C,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAMhB,OAAO38C,EAAA0jB,KAAKkB,gBAAgBkB,EAAY,KAAM66C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAJpE,GADAtM,EAAOzrB,KAAK+pE,eAAexC,GAEzB,OAAO3gE,EAAA0jB,KAAKkB,gBAAgBkB,EAAYjB,EAAM87C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,WAMxE/3B,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGP,OAAO,MAGT2iE,EAAA9kE,UAAAimE,cAAA,SACEX,EACA7sD,EACApH,EACAm0D,GAKA,IAAIj1D,EAAU,IAAIrM,MAClB,EAAG,CACD,IAAIsK,EAASzQ,KAAKgqE,yBAAyBzC,EAAI7sD,EAAOpH,GACtD,IAAK7C,EAAQ,OAAO,KACpB+B,EAAQ3M,KAA0B4K,SAC3B82D,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,QAEvB,IAAIsb,EAAMnrC,EAAA0jB,KAAKuK,wBAAwBriB,EAASc,EAAYoH,EAAO6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEzF,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAA+nE,yBAAA,SACEzC,EACA0C,EACAC,GAKA,IAAK3C,EAAG5hB,iBAKN,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KAET,IAAIiR,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACrEsW,EAAQuvD,EAERj4D,EAA8B,KAC9Bu1D,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,SAChBnyC,EAAOhS,KAAK+oE,UAAUxB,IAGxB,IAAIjsD,EAAiC,KACrC,GAAIisD,EAAG3hB,KAAKl8B,EAAAC,MAAMm4B,SAQhB,GAPIpnC,EAAQjU,EAAApE,YAAYgQ,SACtBrS,KAAKuG,MACHG,EAAA5C,eAAeqmE,iDACf5C,EAAGnjE,WAGPkX,EAActb,KAAKoqE,gBAAgB7C,EAAI,IACrB,OAAO,UAErB7sD,EAAQjU,EAAApE,YAAYkY,MAChBG,EAAQjU,EAAApE,YAAYgQ,SACxBrS,KAAKuG,MACHG,EAAA5C,eAAe40D,wCACfrjD,EAAWjR,OAGL4N,GACVhS,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACf6Z,EAAGnjE,MAAMmjE,EAAGxvC,MAIlB,OAAOnxB,EAAA0jB,KAAKyK,0BACV1f,EACArD,EACAsJ,EACA4uD,EACAxvD,EACAgP,EAAA3U,MAAMjP,KAAKuP,EAAWjR,MAAOmjE,EAAGnjE,WAIpC2iE,EAAA9kE,UAAAgmE,UAAA,SACEV,EACA7sD,EACApH,EACAm0D,GAKA,GAAIF,EAAGt3D,QAAUyZ,EAAAC,MAAMM,WAKrB,OAJAjqB,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KAET,IAAIiR,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACzE,GAAImjE,EAAGt3D,QAAUyZ,EAAAC,MAAM86B,UAKrB,OAJAzkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAGT,IADA,IAAIoO,EAAU,IAAIrM,OACVohE,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CACjC,IAAIj0C,EAASzQ,KAAKqqE,eAAe9C,EAAI9gE,EAAApE,YAAY2Q,MACjD,IAAKvC,EAAQ,OAAO,KAEpB,GADA+B,EAAQ3M,KAA2B4K,IAC9B82D,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OAAQ,CACzB,GAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,YAChB,MAMA,OAJA1kD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAIb,IAAI2tC,EAAMnrC,EAAA0jB,KAAK+G,sBACbhc,EACA7C,EACAc,EACAoH,EACA6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAGxB,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAAooE,eAAA,SACE9C,EACA0C,GAKA,IAAK1C,EAAG5hB,iBAKN,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KAET,IAAIiR,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACrE9C,EAA2B,KAC/B,OAAIimE,EAAG3hB,KAAKl8B,EAAAC,MAAMm4B,WAChBxgD,EAAQtB,KAAKoqE,gBAAgB7C,EAAI,IACd,KAEd3gE,EAAA0jB,KAAKiH,2BACVlc,EACA/T,EACA2oE,EACAvgD,EAAA3U,MAAMjP,KAAKuP,EAAWjR,MAAOmjE,EAAGnjE,WAIpC2iE,EAAA9kE,UAAAqoE,YAAA,SACE/C,GAKA,IAAI9jD,EAA0B,KAC9B,GACE8jD,EAAGjiB,MAAK,IAAS57B,EAAAC,MAAMy6B,WACvBmjB,EAAGxkB,WAAar5B,EAAAC,MAAM+6B,aACrB6iB,EAAGtkB,sBAEEx/B,EAAOzjB,KAAKoqE,gBAAgB7C,IAAM,OAAO,KAGjD,IAAIx1B,EAAMnrC,EAAA0jB,KAAKuJ,sBAAsBpQ,EAAM8jD,EAAGnjE,SAE9C,OADAmjE,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAAsoE,oBAAA,SACEhD,GAMA,IADA,IAAIltD,EAAiB,IAAIlU,OACjBohE,EAAG3hB,KAAKl8B,EAAAC,MAAM42B,cAAc,CAClC,IAAIiqB,EAAgBxqE,KAAKyqE,mBAAmBlD,GAC5C,IAAKiD,EAAe,OAAO,KAE3B,GADAnwD,EAAexU,KAAwB2kE,IAClCjD,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OAAQ,CACzB,GAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM42B,aAChB,MAMA,OAJAvgD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAUb,OAN8B,IAA1BiW,EAAe/U,QACjBtF,KAAKuG,MACHG,EAAA5C,eAAe4mE,oCACfnD,EAAGnjE,SAGAiW,GAGT0sD,EAAA9kE,UAAAwoE,mBAAA,SACElD,GAKA,GAAIA,EAAGt3D,QAAUyZ,EAAAC,MAAMM,WAAY,CACjC,IAAI5U,EAAazO,EAAA0jB,KAAKM,2BACpB28C,EAAGnhB,iBACHmhB,EAAGnjE,SAED2M,EAA+B,KACnC,GAAIw2D,EAAG3hB,KAAKl8B,EAAAC,MAAMq1B,SAAU,CAC1B,IAAIz9C,EAAIvB,KAAK+oE,UAAUxB,GACvB,IAAKhmE,EAAG,OAAO,KACf,GAAIA,EAAEwM,MAAQnH,EAAAoH,SAASunB,KAKrB,OAJAv1B,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfzT,EAAE6C,OAEG,KAET2M,EAAwBxP,EAE1B,OAAOqF,EAAA0jB,KAAKO,oBACVxV,EACAtE,EACA2Y,EAAA3U,MAAMjP,KAAKuP,EAAWjR,MAAOmjE,EAAGnjE,UAQpC,OALEpE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGA,MAKT2iE,EAAA9kE,UAAA0oE,gBAAA,SACEpD,EACAtT,QAAA,IAAAA,OAAA,GAKA,IAAI7oC,EAAa,IAAIjlB,MACjBykE,EAAiC,KACjCC,GAAe,EACfC,GAAe,EACf1tD,EAAkC,KAItC,GADApd,KAAKonE,oBAAsB,KACvBG,EAAG3hB,KAAKl8B,EAAAC,MAAMwN,MAAO,CACvB,IAAIowC,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,OAgBhB,OAJAnkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAdP,KADAgZ,EAAWpd,KAAK+oE,UAAUxB,IACX,OAAO,KAgBxB,GAfMnqD,EAASrP,MAAQnH,EAAAoH,SAASunB,KAC5Bv1B,KAAKonE,oBAAgChqD,EAErCpd,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfoI,EAAShZ,QAUVmjE,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OACjB,OAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YACTp4B,GAEPprB,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAKb,MAAQmjE,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,aAAa,CACjC,IAAIsmB,EAAQ9pE,KAAK+qE,eAAexD,EAAItT,GACpC,IAAK6V,EAAO,OAAO,KAQnB,OAPIc,IAAaE,IACf9qE,KAAKuG,MACHG,EAAA5C,eAAeknE,kDACfJ,EAAShqE,KAAKwD,OAEhB0mE,GAAe,GAEThB,EAAM5+C,eACZ,QACM2/C,GACF7qE,KAAKuG,MACHG,EAAA5C,eAAemnE,yDACfnB,EAAMlpE,KAAKwD,OAGf,MAEF,KAAKwC,EAAA6uB,cAAco0C,SACjBgB,GAAe,EACf,MAEF,KAAKjkE,EAAA6uB,cAAcw0B,KACjB2gB,EAAWd,EAKf,GADA1+C,EAAWvlB,KAAKikE,IACXvC,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OAAQ,CACzB,GAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAChB,MAMA,OAJAxjD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAIb,OAAOgnB,GAGT27C,EAAA9kE,UAAA8oE,eAAA,SACExD,EACAtT,QAAA,IAAAA,OAAA,GAKA,IAAIiX,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2B5kE,EAAApE,YAAY2Q,KAC3C,GAAIihD,IACEsT,EAAG3hB,KAAKl8B,EAAAC,MAAMk2B,SAChBurB,EAAa7D,EAAGnjE,QAChBinE,GAAe5kE,EAAApE,YAAYw9C,QAClB0nB,EAAG3hB,KAAKl8B,EAAAC,MAAMi2B,YACvBwrB,EAAa7D,EAAGnjE,QAChBinE,GAAe5kE,EAAApE,YAAYu9C,WAClB2nB,EAAG3hB,KAAKl8B,EAAAC,MAAMg2B,WACvByrB,EAAa7D,EAAGnjE,QAChBinE,GAAe5kE,EAAApE,YAAYs9C,SAEzB4nB,EAAGjiB,QAAU57B,EAAAC,MAAMtT,UAAU,CAC/B,IAAI0vC,EAAQwhB,EAAGzhB,OACfyhB,EAAGt3D,OACCs3D,EAAGjiB,QAAU57B,EAAAC,MAAMw6B,OACrBojB,EAAGrhB,QAAQH,GACNqlB,IAAYA,EAAa7D,EAAGnjE,SACjCinE,GAAe5kE,EAAApE,YAAYgU,UAE3BkxD,EAAGphB,MAAMJ,GAef,GAXIwhB,EAAG3hB,KAAKl8B,EAAAC,MAAM02B,eACZgrB,EACFrrE,KAAKuG,MACHG,EAAA5C,eAAewnE,+DACf/D,EAAGnjE,SAGLgnE,EAAa7D,EAAGnjE,QAElB8mE,GAAS,GAEP3D,EAAG5hB,iBAAkB,CAClBulB,IAAQE,EAAa7D,EAAGnjE,SAC7B,IAAIiR,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACrE4N,EAA8B,KASlC,IARIm5D,EAAa5D,EAAG3hB,KAAKl8B,EAAAC,MAAM26B,YACzB4mB,GACFlrE,KAAKuG,MACHG,EAAA5C,eAAe8lE,oCACfv0D,EAAWjR,OAIbmjE,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,QAEhB,KADAnyC,EAAOhS,KAAK+oE,UAAUxB,IACX,OAAO,UAElBv1D,EAAOpL,EAAA0jB,KAAKK,kBAAkB48C,EAAGnjE,MAAMmjE,EAAGxvC,MAE5C,IAAIzc,EAAiC,KACrC,GAAIisD,EAAG3hB,KAAKl8B,EAAAC,MAAMm4B,UACZopB,GACFlrE,KAAKuG,MACHG,EAAA5C,eAAeynE,4CACfl2D,EAAWjR,OAGX+mE,EACFnrE,KAAKuG,MACHG,EAAA5C,eAAe0nE,oDACfn2D,EAAWjR,OAGb+mE,GAAa,IAEf7vD,EAActb,KAAKoqE,gBAAgB7C,EAAI,KACrB,OAAO,KAE3B,IAAIuC,EAAQljE,EAAA0jB,KAAKU,gBACf3V,EACArD,EACAsJ,EACA4vD,EACItkE,EAAA6uB,cAAcw0B,KACdkhB,EACEvkE,EAAA6uB,cAAco0C,SACdjjE,EAAA6uB,cAAcopB,QACpBn1B,EAAA3U,MAAMjP,KAAYslE,EAAY7D,EAAGnjE,UAGnC,OADA0lE,EAAMpvD,OAAS2wD,EACRvB,EAOT,OALE9pE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGA,MAGT2iE,EAAA9kE,UAAAkmE,cAAA,SACEZ,EACA7sD,EACApH,EACAm0D,GAUA,IAAKF,EAAG5hB,iBAKN,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,MAAMmjE,EAAGxvC,MAEP,KAGT,IAAIn3B,EAAOgG,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SAC/DqnE,GAAuB,EAEvBpxD,EAA6C,KACjD,GAAIktD,EAAG3hB,KAAKl8B,EAAAC,MAAM22B,UAAW,CAG3B,GAFAmrB,EAAiBlE,EAAGzkB,WACpBzoC,EAAiBra,KAAKuqE,oBAAoBhD,IACrB,OAAO,KAC5B7sD,GAASjU,EAAApE,YAAY+P,QAGvB,IAAKm1D,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAKjB,OAJAvjD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,MAAMmjE,EAAGxvC,KAAM,KAEb,KAGL0zC,EAAiB,IACnBA,EAAiBlE,EAAGzkB,UAGtB,IAAI13B,EAAaprB,KAAK2qE,gBAAgBpD,GACtC,IAAKn8C,EAAY,OAAO,KACxB,IAAIhO,EAAWpd,KAAKonE,oBAEhBsE,EAAwC,IAA5BhxD,EAAQjU,EAAApE,YAAYuT,KAChC81D,IACuB,GAArBtgD,EAAW9lB,QACbtF,KAAKuG,MACHG,EAAA5C,eAAe6nE,+CACf/qE,EAAKwD,OAGLgnB,EAAW9lB,QAAU8lB,EAAW,GAAG9P,aACrCtb,KAAKuG,MACHG,EAAA5C,eAAe8nE,oDACfhrE,EAAKwD,QAKPsW,EAAQjU,EAAApE,YAAYsT,KAClByV,EAAW9lB,QACbtF,KAAKuG,MACHG,EAAA5C,eAAe+nE,sCACfjrE,EAAKwD,OAKX,IAAIwO,EAAoC,KACxC,GAAI20D,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,UAChBvxC,EAAa5S,KAAK+oE,UAAUxB,GAAI,EAAMmE,IACrB,OAAO,KAGrB94D,IACHA,EAAahM,EAAA0jB,KAAKK,kBAChB48C,EAAGnjE,MAAMmjE,EAAGxvC,MAET2zC,GACH1rE,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACf96C,EAAWxO,QAKjB,IAAIqO,EAAY7L,EAAA0jB,KAAKa,gBACnBC,EACAxY,EACAwK,GACA,EACAmqD,EAAGnjE,MAAMqnE,EAAgBlE,EAAGxvC,MAG1BxE,EAAyB,KAC7B,GAAIg0C,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,YAShB,GARI/pC,EAAQjU,EAAApE,YAAYgQ,SACtBrS,KAAKuG,MACHG,EAAA5C,eAAeiwD,yDACfwT,EAAGnjE,WAIPmvB,EAAOvzB,KAAK8rE,oBAAoBvE,GAAI,IACzB,OAAO,UACP7sD,EAAQjU,EAAApE,YAAYgQ,SAC/BrS,KAAKuG,MACHG,EAAA5C,eAAekwD,gFACfuT,EAAGnjE,MAAMmjE,EAAGxvC,MAIhB,IAAIga,EAAMnrC,EAAA0jB,KAAKgJ,0BACb1yB,EACAyZ,EACA5H,EACA8gB,EACAjgB,EACAoH,EACA6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAGxB,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAA8pE,wBAAA,SAAwBxE,GACtB,IACI3mE,EADA6mE,EAAWF,EAAGzkB,SAEdkpB,GAAU,EAOd,GAAIzE,EAAGpnB,OAASz2B,EAAAC,MAAM5N,UAMpB,GAJEnb,EADE2mE,EAAG5hB,iBACE/+C,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SAExDwC,EAAA0jB,KAAK2B,gCAAgCs7C,EAAGnjE,MAAMmjE,EAAGxvC,OAErDwvC,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAKjB,OAJAvjD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,MAAMmjE,EAAGxvC,KAAM,KAEb,UAQTi0C,GAAU,EACVvoE,OAAO8jE,EAAGpnB,OAASz2B,EAAAC,MAAM45B,WACzB3iD,EAAOgG,EAAA0jB,KAAK2B,gCAAgCs7C,EAAGnjE,MAAMmjE,EAAGzkB,WAK1D,IAAI2oB,EAAiBlE,EAAGxvC,IACpB3M,EAAaprB,KAAK2qE,gBAAgBpD,GACtC,OAAKn8C,EAEEprB,KAAKisE,8BAA8B1E,EAAI3mE,EAAMwqB,EAAY4gD,EAASvE,EAAUgE,GAF3D,MAKlB1E,EAAA9kE,UAAAgqE,8BAAR,SACE1E,EACA3mE,EACAwqB,EACA4gD,EACAvE,EACAgE,QADA,IAAAhE,OAAiB,QACjB,IAAAgE,OAAuB,GAEnBhE,EAAW,IAAGA,EAAW7mE,EAAKwD,MAAMmB,OACpCkmE,EAAiB,IAAGA,EAAiBhE,GAEzC,IAAI70D,EAAoC,KACxC,GAAI20D,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,QAEhB,KADAvxC,EAAa5S,KAAK+oE,UAAUxB,IACX,OAAO,UAExB30D,EAAahM,EAAA0jB,KAAKK,kBAAkB48C,EAAGnjE,MAAMmjE,EAAGxvC,MAChD/3B,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACf96C,EAAWxO,OAIf,GAAI4nE,IACGzE,EAAG3hB,KAAKl8B,EAAAC,MAAM06B,oBAKjB,OAJArkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,MAAMmjE,EAAGxvC,KAAM,MAEb,KAIX,IAQIxE,EARA9gB,EAAY7L,EAAA0jB,KAAKa,gBACnBC,EACAxY,EACA,MACA,EACA20D,EAAGnjE,MAAMqnE,EAAgBlE,EAAGxvC,MAI9B,GAAIi0C,EACFz4C,EAAOvzB,KAAKooE,eAAeb,GAAI,OAC1B,CACL,IAAKA,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAKjB,OAJAzkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,MAAMmjE,EAAGxvC,KAAM,KAEb,KAETxE,EAAOvzB,KAAK8rE,oBAAoBvE,GAAI,GAEtC,IAAKh0C,EAAM,OAAO,KAElB,IAAInkB,EAAcxI,EAAA0jB,KAAKgJ,0BACrB1yB,EACA,KACA6R,EACA8gB,EACA,KACAy4C,EAAUvlE,EAAApE,YAAY6rB,MAAQznB,EAAApE,YAAY2Q,KAC1Cu0D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAExB,OAAOnxB,EAAA0jB,KAAK0D,yBAAyB5e,IAGvC23D,EAAA9kE,UAAAomE,sBAAA,SACEd,EACA7sD,EACApH,EACAm0D,GAUA,IAAIzxD,EAAcuxD,EAAGpnB,OAASz2B,EAAAC,MAAM/I,UAEpC,IAAK2mD,EAAG5hB,iBAKN,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KAGT,IAKIiW,EALAhF,EAAazO,EAAA0jB,KAAKM,2BACpB28C,EAAGnhB,iBACHmhB,EAAGnjE,SAIL,GAAImjE,EAAG3hB,KAAKl8B,EAAAC,MAAM22B,UAAW,CAE3B,KADAjmC,EAAiBra,KAAKuqE,oBAAoBhD,IACrB,OAAO,KAC5B7sD,GAASjU,EAAApE,YAAY+P,aAErBiI,KAGF,IAAItJ,EAA+B,KACnC,GAAIw2D,EAAG3hB,KAAKl8B,EAAAC,MAAMq1B,SAAU,CAC1B,IAAIz9C,EAAIvB,KAAK+oE,UAAUxB,GACvB,IAAKhmE,EAAG,OAAO,KACf,GAAIA,EAAEwM,MAAQnH,EAAAoH,SAASunB,KAKrB,OAJAv1B,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfzT,EAAE6C,OAEG,KAET2M,EAAwBxP,EAG1B,IAAIqT,EAAqC,KACzC,GAAI2yD,EAAG3hB,KAAKl8B,EAAAC,MAAMw1B,YAAa,CACzBnpC,GACFhW,KAAKuG,MACHG,EAAA5C,eAAeooE,oDACf3E,EAAGnjE,SAGP,EAAG,CACD,IAAI4N,EAAOhS,KAAK+oE,UAAUxB,GAC1B,IAAKv1D,EAAM,OAAO,KACbgE,IACEpB,IAAiBA,MACtBA,EAAgB/O,KAAemM,UAE1Bu1D,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,QAGzB,IAAK8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAKjB,OAJAzkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAGT,IACIgL,EADAoD,EAAU,IAAIrM,MAyBlB,GAvBI6P,GACFvS,QAAQmR,GACRxF,EAAcxI,EAAA0jB,KAAKyI,2BACjB1d,EACAgF,EACAtJ,EACAyB,EACAc,EACAoH,EACA6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OAGxB3oB,EAAcxI,EAAA0jB,KAAKuG,uBACjBxb,EACAgF,EACAtJ,EACA6D,EACApC,EACAc,EACAoH,EACA6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OAGrBwvC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,YACjB,EAAG,CACD,IAAIj0C,EAASzQ,KAAKmsE,iBAAiB5E,EAAIn4D,GACvC,IAAKqB,EAAQ,OAAO,KACpBA,EAAOb,OAASR,EAChBoD,EAAQ3M,KAA2B4K,UAC3B82D,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAE1B,OAAOt1C,GAGT23D,EAAA9kE,UAAAmqE,qBAAA,SAAqB7E,GAInB,IACI3mE,EADA6mE,EAAWF,EAAGzkB,SASlB,GALEliD,EADE2mE,EAAG5hB,iBACE/+C,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SAExDwC,EAAA0jB,KAAK2B,gCAAgCs7C,EAAGnjE,MAAMmjE,EAAGxvC,OAGrDwvC,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAKjB,OAJAzkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,MAAMmjE,EAAGxvC,KAAM,KAEb,KAGT,IAAIvlB,EAAU,IAAIrM,MACdiJ,EAAcxI,EAAA0jB,KAAKuG,uBACrBjwB,KAEA,KACA,KACA4R,EACA,KACA/L,EAAApE,YAAY2Q,KACZu0D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAExB,IAAKwvC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,YACjB,EAAG,CACD,IAAIj0C,EAASzQ,KAAKmsE,iBAAiB5E,EAAIn4D,GACvC,IAAKqB,EAAQ,OAAO,KACpBA,EAAOb,OAASR,EAChBoD,EAAQ3M,KAA2B4K,UAC3B82D,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAE1B,OAAO99C,EAAA0jB,KAAK4C,sBAAsB9d,IAGpC23D,EAAA9kE,UAAAkqE,iBAAA,SACE5E,EACA33D,GAcA,IAJA,IAAI63D,EAAWF,EAAGxvC,IACd/hB,EAAcpG,EAAO7B,MAAQnH,EAAAoH,SAASW,qBAEtC2E,EAAa,IAAInN,MACdohE,EAAG3hB,KAAKl8B,EAAAC,MAAMg7B,KAAK,CACxB,IAAIlxC,EAAYzT,KAAK0nE,eAAeH,GACpC,IAAK9zD,EAAW,MACZuC,GACFhW,KAAKuG,MACHG,EAAA5C,eAAe8kE,8BACfn1D,EAAUrP,OAGdkP,EAAWzN,KAAoB4N,GAIjC,IAAIiH,EAAQ9K,EAAO8K,MAAQjU,EAAApE,YAAYgQ,QAGnC2D,IAAa0E,GAASjU,EAAApE,YAAYgqE,SAElC9E,EAAG3hB,KAAKl8B,EAAAC,MAAMk2B,SACZ7pC,GACFhW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,QAAS,UAGhBsW,GAASjU,EAAApE,YAAYw9C,QACZ0nB,EAAG3hB,KAAKl8B,EAAAC,MAAMg2B,UACnB3pC,GACFhW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,QAAS,WAGhBsW,GAASjU,EAAApE,YAAYs9C,SACZ4nB,EAAG3hB,KAAKl8B,EAAAC,MAAMi2B,aACnB5pC,GACFhW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,QAAS,aAGhBsW,GAASjU,EAAApE,YAAYu9C,WAGvB,IAAI0sB,EAAmB,EACnBC,EAAiB,EACjBC,EAAqB,EACrBC,EAAmB,EACnBlF,EAAG3hB,KAAKl8B,EAAAC,MAAMzT,SACZF,GACFhW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,QAAS,UAGhBsW,GAASjU,EAAApE,YAAY6T,OACrBo2D,EAAc/E,EAAGzkB,SACjBypB,EAAYhF,EAAGxvC,MAEfrd,GAASjU,EAAApE,YAAY6a,SACjBqqD,EAAG3hB,KAAKl8B,EAAAC,MAAMpT,YACZP,GACFhW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,QAAS,YAGhBsW,GAASjU,EAAApE,YAAYkU,SACrBi2D,EAAgBjF,EAAGzkB,SACnB2pB,EAAclF,EAAGxvC,KAEfnoB,EAAO8K,MAAQjU,EAAApE,YAAY+P,UAC7BsI,GAASjU,EAAApE,YAAY40D,kBAIzB,IAAIyV,EAAqB,EACrBC,EAAmB,EACnBpF,EAAG3hB,KAAKl8B,EAAAC,MAAMtT,YAChBqE,GAASjU,EAAApE,YAAYgU,SACrBq2D,EAAgBnF,EAAGzkB,SACnB6pB,EAAcpF,EAAGxvC,KAInB,IAAIguB,EAAQwhB,EAAGzhB,OACXmO,GAAgB,EAChBj8C,GAAW,EAGX0zD,GAAW,EACXn8B,EAAgB,EAChBq9B,EAAc,EAwDlB,GAvDK52D,IACCuxD,EAAG3hB,KAAKl8B,EAAAC,MAAMhU,KACZ4xD,EAAGjiB,MAAK,EAAM57B,EAAA00B,mBAAmB8G,SAAWx7B,EAAAC,MAAMM,YAAes9C,EAAGtkB,mBAYtEskB,EAAGphB,MAAMJ,IAXTrrC,GAASjU,EAAApE,YAAYsT,IACrBqC,GAAW,EACXu3B,EAAWg4B,EAAGzkB,SACd8pB,EAASrF,EAAGxvC,IACRrd,EAAQjU,EAAApE,YAAYgU,UACtBrW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAAMsoE,EAAeC,GAAc,aAMnCpF,EAAG3hB,KAAKl8B,EAAAC,MAAM/T,KACnB2xD,EAAGjiB,MAAK,EAAM57B,EAAA00B,mBAAmB8G,SAAWx7B,EAAAC,MAAMM,YAAes9C,EAAGtkB,mBAYtEskB,EAAGphB,MAAMJ,IAXTrrC,GAASjU,EAAApE,YAAYuT,IAAMnP,EAAApE,YAAYuT,IACvC81D,GAAW,EACXn8B,EAAWg4B,EAAGzkB,SACd8pB,EAASrF,EAAGxvC,IACRrd,EAAQjU,EAAApE,YAAYgU,UACtBrW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAAMsoE,EAAeC,GAAc,aAMnCpF,EAAG3hB,KAAKl8B,EAAAC,MAAM/S,eAEvBq9C,GAAgB,GADhBv5C,GAASjU,EAAApE,YAAYuU,aAETnQ,EAAApE,YAAY6T,QACtBlW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAAMkoE,EAAaC,GAAY,UAGlC7xD,EAAQjU,EAAApE,YAAYkU,UACtBvW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAAMooE,EAAeC,GAAc,YAGtC/xD,EAAQjU,EAAApE,YAAYgU,UACtBrW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAAMsoE,EAAeC,GAAc,eAMzC1Y,IAAkBsT,EAAG5hB,iBAKxB,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KAGT,IAAIxD,EAAOqzD,EACPrtD,EAAA0jB,KAAKiD,4BAA4Bg6C,EAAGnjE,SACpCwC,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACxDiW,EAA6C,KACjD,GAAIktD,EAAG3hB,KAAKl8B,EAAAC,MAAM22B,UAAW,CAC3B,IAAIusB,EAAsBtF,EAAGzkB,SAE7B,KADAzoC,EAAiBra,KAAKuqE,oBAAoBhD,IACrB,OAAO,KACxBtT,EACFj0D,KAAKuG,MACHG,EAAA5C,eAAegpE,2DACfvF,EAAGnjE,MAAMyoE,EAAqBtF,EAAGxvC,MAE1B/f,GAAY0zD,EACrB1rE,KAAKuG,MACHG,EAAA5C,eAAeipE,wCACfxF,EAAGnjE,MAAMyoE,EAAqBtF,EAAGxvC,MAGnCrd,GAASjU,EAAApE,YAAY+P,QAKzB,GAAIm1D,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAAY,CAC5B,IAAIkoB,EAAiBlE,EAAGzkB,SACpB13B,EAAaprB,KAAK2qE,gBAAgBpD,EAAItT,GAC1C,IAAK7oC,EAAY,OAAO,KACxB,IAAIhO,EAAWpd,KAAKonE,oBACpB,GAAInT,EACF,IAAK,IAAI5zD,EAAI,EAAGgL,EAAI+f,EAAW9lB,OAAQjF,EAAIgL,IAAKhL,EAAG,CACjD,IAAImpE,EAAYp+C,EAAW/qB,GAC3B,GAAImpE,EAAUr3D,MACZ1L,EAAApE,YAAYw9C,OACZp5C,EAAApE,YAAYu9C,UACZn5C,EAAApE,YAAYs9C,QACZl5C,EAAApE,YAAYgU,UACX,CACD,IAAIsf,EAA2B/uB,EAAA0jB,KAAK2I,uBAClCu2C,EAAU5oE,KACV4oE,EAAUx3D,KACV,KACA,KACAw3D,EAAU9uD,MAAQjU,EAAApE,YAAY6a,SAC9BssD,EAAUplE,OAEZuxB,EAAyBwD,eAAiB94B,EAC1Cs1B,EAAyB/lB,OAASA,EAClC45D,EAAU7zC,yBAA2BA,EACrC/lB,EAAO4C,QAAQ3M,KAAK8vB,SAGf3d,EACLoT,EAAW9lB,QACbtF,KAAKuG,MACHG,EAAA5C,eAAe+nE,sCACfjrE,EAAKwD,OAGAsnE,IACgB,GAArBtgD,EAAW9lB,QACbtF,KAAKuG,MACHG,EAAA5C,eAAe6nE,+CACf/qE,EAAKwD,OAGLgnB,EAAW9lB,QAAU8lB,EAAW,GAAG9P,aACrCtb,KAAKuG,MACHG,EAAA5C,eAAe8nE,oDACfhrE,EAAKwD,QAKX,IAAIwO,EAAoC,KACxC,GAAI20D,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,QAahB,GAZIvjD,EAAKmN,MAAQnH,EAAAoH,SAAS4I,YACxB5W,KAAKuG,MACHG,EAAA5C,eAAekpE,2DACfzF,EAAGnjE,SAEIsnE,GACT1rE,KAAKuG,MACHG,EAAA5C,eAAempE,oDACf1F,EAAGnjE,WAGPwO,EAAa5S,KAAK+oE,UAAUxB,EAAI3mE,EAAKmN,MAAQnH,EAAAoH,SAAS4I,aAAe80D,IACpD,OAAO,UAExB94D,EAAahM,EAAA0jB,KAAKK,kBAAkB48C,EAAGnjE,MAAMmjE,EAAGxvC,MAC3C2zC,GAAY9qE,EAAKmN,MAAQnH,EAAAoH,SAAS4I,aACrC5W,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACf96C,EAAWxO,OAKjB,IAAIqO,EAAY7L,EAAA0jB,KAAKa,gBACnBC,EACAxY,EACAwK,GACA,EACAmqD,EAAGnjE,MAAMqnE,EAAgBlE,EAAGxvC,MAG1BxE,EAAyB,KAC7B,GAAIg0C,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,YAahB,GAZI/pC,EAAQjU,EAAApE,YAAYgQ,QACtBrS,KAAKuG,MACHG,EAAA5C,eAAeiwD,yDACfwT,EAAGnjE,SAEIsW,EAAQjU,EAAApE,YAAYkU,UAC7BvW,KAAKuG,MACHG,EAAA5C,eAAeopE,qEACf3F,EAAGnjE,QAASxD,EAAKwE,QAGrBmuB,EAAOvzB,KAAK8rE,oBAAoBvE,GAAI,IACzB,OAAO,UACP7sD,EAAQjU,EAAApE,YAAYgQ,SAAa2D,GAC5ChW,KAAKuG,MACHG,EAAA5C,eAAekwD,gFACfuT,EAAGnjE,SAIP,IAAI+oE,EAAYvmE,EAAA0jB,KAAKmJ,wBACnB7yB,EACAyZ,EACA5H,EACA8gB,EACAjgB,EACAoH,EACA6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAGxB,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACP+oB,EAEF,GAAIlZ,EACTj0D,KAAKuG,MACHG,EAAA5C,eAAespE,sCACfxsE,EAAKwD,WAGF,KAAI4T,IAAY0zD,EAOhB,CACDhxD,EAAQjU,EAAApE,YAAYkU,UACtBvW,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAAMooE,EAAeC,GAAc,YAItC/xD,EAAQjU,EAAApE,YAAYsT,KACtB3V,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAzOW,EACF,GAwOgB,OAI5BsW,EAAQjU,EAAApE,YAAYuT,KACtB5V,KAAKuG,MACHG,EAAA5C,eAAe6kE,gCACfpB,EAAGnjE,MAAMmrC,EAAUq9B,GAAS,OAIhC,IAAI56D,EAA8B,KAClC,GAAIu1D,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,QAEhB,KADAnyC,EAAOhS,KAAK+oE,UAAUxB,IACX,OAAO,UAElBvnE,KAAKuG,MACHG,EAAA5C,eAAe4pD,cACf6Z,EAAGnjE,SAGP,IAAIkX,EAAiC,KACrC,GAAIisD,EAAG3hB,KAAKl8B,EAAAC,MAAMm4B,WAChBxmC,EAActb,KAAKoqE,gBAAgB7C,IACjB,OAAO,KAE3B,IAAI8F,EAAWzmE,EAAA0jB,KAAK2I,uBAClBryB,EACAoR,EACAsJ,EACAhI,EACAoH,EACA6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAGxB,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPipB,EApDPrtE,KAAKuG,MACHG,EAAA5C,eAAekwD,gFACfpzD,EAAKwD,OAoDT,OAAO,MAGT2iE,EAAA9kE,UAAAqmE,eAAA,SACEf,EACA7sD,EACApH,EACAm0D,GAKA,GAAIF,EAAG5hB,iBAAkB,CACvB,IAAItwC,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACzE,GAAImjE,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAAY,CAS5B,IARA,IAAIjyC,EAAU,IAAIrM,MACdzE,EAAKkF,EAAA0jB,KAAKqJ,2BACZte,EACA7C,EACAc,EACAoH,EACA6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OAEhBwvC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CACjC,IAAIj0C,EAASzQ,KAAKwnE,uBAAuBD,EAAI7lE,GAC7C,IAAK+O,EAAQ,OAAO,KACpBA,EAAOb,OAASlO,EAChB8Q,EAAQ3M,KAAK4K,GAGf,OADA82D,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACP1iD,EAEP1B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGP,OAAO,MAGT2iE,EAAA9kE,UAAAymE,YAAA,SACEnB,EACA7sD,EACA+sD,GAKA,IAAI53D,EAAuC,KAC3C,GAAI03D,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAAY,CAE5B,IADA,IAAIjyC,EAAU,IAAIrM,OACVohE,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CAC/B,IAAIj0C,EAASzQ,KAAKstE,kBAAkB/F,GACpC,IAAK92D,EAAQ,OAAO,KAEtB,GADE+B,EAAQ3M,KAAK4K,IACV82D,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OAAQ,CACzB,GAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,YAChB,MAMA,OAJA1kD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAIb,GAAImjE,EAAG3hB,KAAKl8B,EAAAC,MAAMu1B,MAAO,CACvB,IAAIqoB,EAAG3hB,KAAKl8B,EAAAC,MAAM25B,eAOhB,OAJAtjD,KAAKuG,MACHG,EAAA5C,eAAe8T,wBACf2vD,EAAGnjE,SAEE,KANPyL,EAAOjJ,EAAA0jB,KAAKsF,8BAA8B23C,EAAGl1B,aAAck1B,EAAGnjE,SAgBlE,OALqB,QADjB6U,GADA84B,EAAMnrC,EAAA0jB,KAAKmH,sBAAsBjf,EAAS3C,EAAM6K,EAAO6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OAC1D9e,eACOjZ,KAAKinE,QAAQt1D,IAAIsH,KAC7CjZ,KAAKgnE,QAAQnhE,KAAKoT,GAClBjZ,KAAKinE,QAAQxtD,IAAIR,IAEnBsuD,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EACF,GAAIw1B,EAAG3hB,KAAKl8B,EAAAC,MAAMo3B,UACvB,GAAIwmB,EAAG3hB,KAAKl8B,EAAAC,MAAMu1B,MAAO,CACvB,GAAIqoB,EAAG3hB,KAAKl8B,EAAAC,MAAM25B,eAAgB,CAChCzzC,EAAOjJ,EAAA0jB,KAAKsF,8BAA8B23C,EAAGl1B,aAAck1B,EAAGnjE,SAC9D,IAAI2tC,EAAMnrC,EAAA0jB,KAAKmH,sBAAsB,KAAM5hB,EAAM6K,EAAO6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAC1E9e,EAAexV,OAAOsuC,EAAI94B,cAC1BnU,EAASyiE,EAAGziE,OAQhB,OAPKA,EAAO+yB,cAAa/yB,EAAO+yB,YAAc,IAAIre,KAClD1U,EAAO+yB,YAAYpe,IAAIR,GAClBjZ,KAAKinE,QAAQt1D,IAAIsH,KACpBjZ,KAAKgnE,QAAQnhE,KAAKoT,GAClBjZ,KAAKinE,QAAQxtD,IAAIR,IAEnBsuD,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EAEP/xC,KAAKuG,MACHG,EAAA5C,eAAe8T,wBACf2vD,EAAGnjE,cAIPpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,aAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAGhB,OAAO,MAGT2iE,EAAA9kE,UAAAqrE,kBAAA,SACE/F,GAKA,GAAIA,EAAG5hB,iBAAkB,CACvB,IAAItwC,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACrEmpE,EAA4C,KAChD,GAAIhG,EAAG3hB,KAAKl8B,EAAAC,MAAM20B,IAAK,CACrB,IAAIipB,EAAG1hB,qBAOL,OAJA7lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KANPmpE,EAAe3mE,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SAS3E,OAAOwC,EAAA0jB,KAAK2H,mBACV5c,EACAk4D,EACAA,EACI7jD,EAAA3U,MAAMjP,KAAKuP,EAAWjR,MAAOmpE,EAAanpE,OAC1CiR,EAAWjR,OAQnB,OALEpE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGA,MAGT2iE,EAAA9kE,UAAAumE,YAAA,SACEjB,GAOA,IAAIE,EAAWF,EAAGzkB,SACdtwC,EAAsC,KACtCqH,EAA6C,KAC7C2zD,GAAW,EACf,GAAIjG,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAEhB,IADAjyC,EAAU,IAAIrM,OACNohE,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CACjC,IAAIj0C,EAASzQ,KAAKytE,uBAAuBlG,GACzC,IAAK92D,EAAQ,OAAO,KAEpB,GADA+B,EAAQ3M,KAAK4K,IACR82D,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OAAQ,CACzB,GAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,YAChB,MAMA,OAJA1kD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,WAIR,GAAImjE,EAAG3hB,KAAKl8B,EAAAC,MAAMo3B,UAAW,CAClC,IAAIwmB,EAAG3hB,KAAKl8B,EAAAC,MAAM20B,IAehB,OAJAt+C,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,MAEP,KAdP,IAAImjE,EAAG5hB,iBAOL,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KANPyV,EAAgBjT,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,cAgB5EopE,GAAW,EAGb,GAAIA,GAAYjG,EAAG3hB,KAAKl8B,EAAAC,MAAMu1B,MAAO,CACnC,GAAIqoB,EAAG3hB,KAAKl8B,EAAAC,MAAM25B,eAAgB,CAChC,IAAIzzC,EAAOjJ,EAAA0jB,KAAKsF,8BAA8B23C,EAAGl1B,aAAck1B,EAAGnjE,SAC9D2tC,OAAG,EACHl4B,GACFpW,QAAQ+O,GACRu/B,EAAMnrC,EAAA0jB,KAAKsI,kCAAkC/Y,EAAehK,EAAM03D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OAExFga,EAAMnrC,EAAA0jB,KAAKmI,sBAAsBjgB,EAAS3C,EAAM03D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAExE,IAAI9e,EAAe84B,EAAI94B,aAMvB,OALKjZ,KAAKinE,QAAQt1D,IAAIsH,KACpBjZ,KAAKgnE,QAAQnhE,KAAKoT,GAClBjZ,KAAKinE,QAAQxtD,IAAIR,IAEnBsuD,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EAEP/xC,KAAKuG,MACHG,EAAA5C,eAAe8T,wBACf2vD,EAAGnjE,cAIPpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,QAGhB,OAAO,MAGT2iE,EAAA9kE,UAAAwrE,uBAAA,SACElG,GAKA,GAAIA,EAAG1hB,qBAAsB,CAC3B,IAAIxwC,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACrEmpE,EAA4C,KAChD,GAAIhG,EAAG3hB,KAAKl8B,EAAAC,MAAM20B,IAAK,CACrB,IAAIipB,EAAG5hB,iBAOL,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KANPmpE,EAAe3mE,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SAS3E,OAAOwC,EAAA0jB,KAAKuI,wBACVxd,EACAk4D,EACAA,EACI7jD,EAAA3U,MAAMjP,KAAKuP,EAAWjR,MAAOmpE,EAAanpE,OAC1CiR,EAAWjR,OAQnB,OALEpE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGA,MAGT2iE,EAAA9kE,UAAAsmE,kBAAA,SACEhB,EACAE,GAKA,GAAIF,EAAG5hB,iBAAkB,CACvB,IAAI4nB,EAAe3mE,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SAC3E,GAAImjE,EAAG3hB,KAAKl8B,EAAAC,MAAMm4B,QAAS,CACzB,GAAIylB,EAAG5hB,iBAAkB,CACvB,IAAItwC,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SACrE2tC,EAAMnrC,EAAA0jB,KAAKyH,4BAA4B1c,EAAYk4D,EAAchG,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAE3F,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EAEP/xC,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,cAIPpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGP,OAAO,MAGT2iE,EAAA9kE,UAAAmmE,eAAA,SACEb,EACAmG,QAAA,IAAAA,OAAA,GAKA,IAAI3nB,EAAQwhB,EAAGzhB,OAEXh4C,EAA8B,KAClC,OAFYy5D,EAAGt3D,QAGb,KAAKyZ,EAAAC,MAAMgP,MACT7qB,EAAY9N,KAAK2tE,WAAWpG,GAC5B,MAEF,KAAK79C,EAAAC,MAAMpP,MACTzM,EAAY9N,KAAKkoE,cAAcX,EAAI9gE,EAAApE,YAAYkY,MAAO,KAAMgtD,EAAGzkB,UAC/D,MAEF,KAAKp5B,EAAAC,MAAMiP,SACT9qB,EAAY9N,KAAK4tE,cAAcrG,GAC/B,MAEF,KAAK79C,EAAAC,MAAMkP,GACT/qB,EAAY9N,KAAK6tE,iBAAiBtG,GAClC,MAEF,KAAK79C,EAAAC,MAAMyP,IACTtrB,EAAY9N,KAAK8tE,kBAAkBvG,GACnC,MAEF,KAAK79C,EAAAC,MAAM0P,GACTvrB,EAAY9N,KAAK+tE,iBAAiBxG,GAClC,MAEF,KAAK79C,EAAAC,MAAM41B,IACTzxC,EAAY9N,KAAKkoE,cAAcX,EAAI9gE,EAAApE,YAAYk9C,IAAK,KAAMgoB,EAAGzkB,UAC7D,MAEF,KAAKp5B,EAAAC,MAAMo2B,IACTjyC,EAAY9N,KAAKkoE,cAAcX,EAAI9gE,EAAApE,YAAY2Q,KAAM,KAAMu0D,EAAGzkB,UAC9D,MAEF,KAAKp5B,EAAAC,MAAM86B,UACT32C,EAAY9N,KAAK8rE,oBAAoBvE,EAAImG,GACzC,MAEF,KAAKhkD,EAAAC,MAAM4P,OACLm0C,GACF1tE,KAAKuG,MACHG,EAAA5C,eAAekqE,2DACfzG,EAAGnjE,SAGP0J,EAAY9N,KAAKsqE,YAAY/C,GAC7B,MAEF,KAAK79C,EAAAC,MAAMy6B,UACT,OAAOx9C,EAAA0jB,KAAK6G,qBAAqBo2C,EAAGnjE,MAAMmjE,EAAGzkB,WAE/C,KAAKp5B,EAAAC,MAAM8P,OACT3rB,EAAY9N,KAAKiuE,qBAAqB1G,GACtC,MAEF,KAAK79C,EAAAC,MAAM+P,MACT5rB,EAAY9N,KAAKkuE,oBAAoB3G,GACrC,MAEF,KAAK79C,EAAAC,MAAMgQ,IACT7rB,EAAY9N,KAAKmuE,kBAAkB5G,GACnC,MAEF,KAAK79C,EAAAC,MAAMkQ,KACT/rB,EAAY9N,KAAKouE,mBAAmB7G,GACpC,MAEF,KAAK79C,EAAAC,MAAMmQ,MACThsB,EAAY9N,KAAKquE,oBAAoB9G,GACrC,MAEF,KAAK79C,EAAAC,MAAM4L,KACT,GAAIgyC,EAAGjiB,MAAK,EAAO57B,EAAA00B,mBAAmB8G,SAAWx7B,EAAAC,MAAMM,WAAY,CACjEnc,EAAY9N,KAAKyoE,qBAAqBlB,EAAI9gE,EAAApE,YAAY2Q,KAAM,KAAMu0D,EAAGzkB,UACrE,MAIJ,QACEykB,EAAGphB,MAAMJ,GACTj4C,EAAY9N,KAAKsuE,yBAAyB/G,GAU9C,OANKz5D,EAIHy5D,EAAGrhB,QAAQH,IAHXwhB,EAAGphB,MAAMJ,GACT/lD,KAAK2nE,cAAcJ,IAIdz5D,GAGTi5D,EAAA9kE,UAAA6pE,oBAAA,SACEvE,EACAmG,GAOA,IAFA,IAAIjG,EAAWF,EAAGzkB,SACdl1C,EAAa,IAAIzH,OACbohE,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CACjC,IAAIqB,EAAQwhB,EAAGzhB,OACXh4C,EAAY9N,KAAKooE,eAAeb,EAAImG,GACxC,GAAK5/D,EAKHy5D,EAAGrhB,QAAQH,GACXn4C,EAAW/H,KAAKiI,OANF,CACd,GAAIy5D,EAAGpnB,OAASz2B,EAAAC,MAAM07B,UAAW,OAAO,KACxCkiB,EAAGphB,MAAMJ,GACT/lD,KAAK2nE,cAAcJ,IAMvB,IAAIx1B,EAAMnrC,EAAA0jB,KAAKkG,qBAAqB5iB,EAAY25D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEtE,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAA0rE,WAAA,SACEpG,GAKA,IAAIlyD,EAA0C,KAC1CkyD,EAAGjiB,MAAK,IAAS57B,EAAAC,MAAMM,YAAes9C,EAAGtkB,qBAC3CskB,EAAGt3D,KAAKyZ,EAAA00B,mBAAmB8G,QAC3B7vC,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,UAEvE,IAAI2tC,EAAMnrC,EAAA0jB,KAAKoG,qBAAqBrb,EAAYkyD,EAAGnjE,SAEnD,OADAmjE,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAA2rE,cAAA,SACErG,GAKA,IAAIlyD,EAA0C,KAC1CkyD,EAAGjiB,MAAK,IAAS57B,EAAAC,MAAMM,YAAes9C,EAAGtkB,qBAC3CskB,EAAGt3D,KAAKyZ,EAAA00B,mBAAmB8G,QAC3B7vC,EAAazO,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,UAEvE,IAAI2tC,EAAMnrC,EAAA0jB,KAAKyG,wBAAwB1b,EAAYkyD,EAAGnjE,SAEtD,OADAmjE,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAA4rE,iBAAA,SACEtG,GAKA,IAAIE,EAAWF,EAAGzkB,SACdh1C,EAAY9N,KAAKooE,eAAeb,GACpC,IAAKz5D,EAAW,OAAO,KAEvB,GAAIy5D,EAAG3hB,KAAKl8B,EAAAC,MAAMmQ,OAEhB,GAAIytC,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAAY,CAC5B,IAAI/zB,EAAYxvB,KAAKoqE,gBAAgB7C,GACrC,IAAK/3C,EAAW,OAAO,KAEvB,GAAI+3C,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAAa,CAC7B,IAAIzR,EAAMnrC,EAAA0jB,KAAK2G,kBAA6BnjB,EAAuB0hB,EAAW+3C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEpG,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EAEP/xC,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,SAGhB,OAAO,MAGT2iE,EAAA9kE,UAAAqsE,yBAAA,SACE/G,GAKA,IAAI9jD,EAAOzjB,KAAKoqE,gBAAgB7C,GAChC,IAAK9jD,EAAM,OAAO,KAElB,IAAIsuB,EAAMnrC,EAAA0jB,KAAK6H,0BAA0B1O,GAEzC,OADA8jD,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAA6rE,kBAAA,SACEvG,GAKA,IAAIE,EAAWF,EAAGzkB,SAElB,GAAIykB,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAAY,CAC5B,IAAIjoC,EAAgC,KAEpC,GAAIisD,EAAG3hB,KAAKl8B,EAAAC,MAAMpP,OAChBe,EAActb,KAAKkoE,cAAcX,EAAI9gE,EAAApE,YAAYkY,MAAO,KAAMgtD,EAAGzkB,eAC5D,GAAIykB,EAAG3hB,KAAKl8B,EAAAC,MAAM41B,KACvBjkC,EAActb,KAAKkoE,cAAcX,EAAI9gE,EAAApE,YAAYk9C,IAAK,KAAMgoB,EAAGzkB,eAC1D,GAAIykB,EAAG3hB,KAAKl8B,EAAAC,MAAMo2B,KACvBzkC,EAActb,KAAKkoE,cAAcX,EAAI9gE,EAAApE,YAAY2Q,KAAM,KAAMu0D,EAAGzkB,eAE3D,IAAKykB,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,cACxB9oC,EAActb,KAAKsuE,yBAAyB/G,IAC1B,OAAO,KAG3B,GAAIA,EAAGpnB,OAASz2B,EAAAC,MAAMy6B,UAAW,CAC/B,IAAI50B,EAAwC,KAC5C,IAAK+3C,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,cACjB50B,EAAYxvB,KAAKsuE,yBAAyB/G,IAC1B,OAAO,KAGzB,GAAIA,EAAGpnB,OAASz2B,EAAAC,MAAMy6B,UAAW,CAC/B,IAAIhxB,EAAiC,KACrC,IAAKm0C,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAAa,CAE9B,KADApwB,EAAcpzB,KAAKoqE,gBAAgB7C,IACjB,OAAO,KAEzB,IAAKA,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAKjB,OAJAxjD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAIX,IAAI0J,EAAY9N,KAAKooE,eAAeb,GACpC,OAAKz5D,EAEElH,EAAA0jB,KAAK6I,mBACV7X,EACAkU,EACIA,EAAU9C,WACV,KACJ0G,EACAtlB,EACAy5D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MATD,KAavB/3B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAGhB,OAAO,MAGT2iE,EAAA9kE,UAAA8rE,iBAAA,SACExG,GAKA,IAAIE,EAAWF,EAAGzkB,SAClB,GAAIykB,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAAY,CAC5B,IAAI/zB,EAAYxvB,KAAKoqE,gBAAgB7C,GACrC,IAAK/3C,EAAW,OAAO,KACvB,GAAI+3C,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAAa,CAC7B,IAAI11C,EAAY9N,KAAKooE,eAAeb,GACpC,IAAKz5D,EAAW,OAAO,KACvB,IAAIygE,EAAkC,KACtC,OAAIhH,EAAG3hB,KAAKl8B,EAAAC,MAAMo1B,SAChBwvB,EAAgBvuE,KAAKooE,eAAeb,IACT,KAEtB3gE,EAAA0jB,KAAK+H,kBACV7C,EACA1hB,EACAygE,EACAhH,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAGxB/3B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAGhB,OAAO,MAGT2iE,EAAA9kE,UAAAgsE,qBAAA,SACE1G,GAKA,IAAIE,EAAWF,EAAGzkB,SAClB,GAAIykB,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAAY,CAC5B,IAAI/zB,EAAYxvB,KAAKoqE,gBAAgB7C,GACrC,IAAK/3C,EAAW,OAAO,KACvB,GAAI+3C,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAAa,CAC7B,GAAI+jB,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAAY,CAE5B,IADA,IAAIzwB,EAAQ,IAAI7tB,OACRohE,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CACjC,IAAI8pB,EAAQxuE,KAAKyuE,gBAAgBlH,GACjC,IAAKiH,EAAO,OAAO,KACnBx6C,EAAMnuB,KAAiB2oE,GAEzB,IAAIz8B,EAAMnrC,EAAA0jB,KAAKyJ,sBAAsBvE,EAAWwE,EAAOuzC,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAE7E,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EAEP/xC,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAGhB,OAAO,MAGT2iE,EAAA9kE,UAAAwsE,gBAAA,SACElH,GAGA,IACI35D,EACAE,EAFA25D,EAAWF,EAAGzkB,SAMlB,GAAIykB,EAAG3hB,KAAKl8B,EAAAC,MAAM80B,MAAO,CACvB,IAAI9tB,EAAQ3wB,KAAKoqE,gBAAgB7C,GACjC,IAAK52C,EAAO,OAAO,KACnB,GAAI42C,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,OAAQ,CAExB,IADAv2C,EAAa,IAAIzH,MACVohE,EAAGjiB,QAAU57B,EAAAC,MAAM80B,MAAQ8oB,EAAGxkB,WAAar5B,EAAAC,MAAMk1B,SAAW0oB,EAAGxkB,WAAar5B,EAAAC,MAAM+6B,YAAY,CAEnG,KADA52C,EAAY9N,KAAKooE,eAAeb,IAChB,OAAO,KACvB35D,EAAW/H,KAAKiI,GAElB,OAAOlH,EAAA0jB,KAAK4J,iBAAiBvD,EAAO/iB,EAAY25D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEtE/3B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAMX,GAAImjE,EAAG3hB,KAAKl8B,EAAAC,MAAMk1B,SAAU,CACjC,GAAI0oB,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,OAAQ,CAExB,IADAv2C,EAAa,IAAIzH,MACVohE,EAAGjiB,QAAU57B,EAAAC,MAAM80B,MAAQ8oB,EAAGxkB,WAAar5B,EAAAC,MAAMk1B,SAAW0oB,EAAGxkB,WAAar5B,EAAAC,MAAM+6B,YAAY,CAEnG,KADA52C,EAAY9N,KAAKooE,eAAeb,IAChB,OAAO,KACvB35D,EAAW/H,KAAKiI,GAElB,OAAOlH,EAAA0jB,KAAK4J,iBAAiB,KAAMtmB,EAAY25D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAErE/3B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAe4qE,0BACfnH,EAAGnjE,SAGP,OAAO,MAGT2iE,EAAA9kE,UAAAisE,oBAAA,SACE3G,GAKA,IAAIE,EAAWF,EAAGzkB,SACdp2B,EAAa1sB,KAAKoqE,gBAAgB7C,GACtC,IAAK76C,EAAY,OAAO,KACxB,IAAIqlB,EAAMnrC,EAAA0jB,KAAK8J,qBAAiC1H,EAAY66C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAElF,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAAksE,kBAAA,SACE5G,GAQA,IACI77C,EADA+7C,EAAWF,EAAGzkB,SAElB,GAAIykB,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAAY,CAE5B,IADA,IAAI72C,EAAa,IAAIzH,OACbohE,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CAEjC,KADAh5B,EAAO1rB,KAAKooE,eAAeb,IAChB,OAAO,KAClB35D,EAAW/H,KAAgB6lB,GAE7B,IAAI6I,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAI8yC,EAAG3hB,KAAKl8B,EAAAC,MAAM+0B,OAAQ,CACxB,IAAK6oB,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAKjB,OAJAvjD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAET,IAAKmjE,EAAG5hB,iBAKN,OAJA3lD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,KAGT,GADAmwB,EAAgB3tB,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,UACnEmjE,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAKjB,OAJAxjD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAET,IAAKmjE,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAKjB,OAJAzkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAGT,IADAowB,MACQ+yC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CAEjC,KADAh5B,EAAO1rB,KAAKooE,eAAeb,IAChB,OAAO,KAClB/yC,EAAgB3uB,KAAgB6lB,IAGpC,GAAI67C,EAAG3hB,KAAKl8B,EAAAC,MAAMs1B,SAAU,CAC1B,IAAKsoB,EAAG3hB,KAAKl8B,EAAAC,MAAM86B,WAKjB,OAJAzkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAGT,IADAqwB,MACQ8yC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CAEjC,KADAh5B,EAAO1rB,KAAKooE,eAAeb,IAChB,OAAO,KAClB9yC,EAAkB5uB,KAAgB6lB,IAGtC,IAAM8I,IAAmBC,EAKvB,OAJAz0B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,SAEP,KAET,IAAI2tC,EAAMnrC,EAAA0jB,KAAKgK,mBACb1mB,EACA2mB,EACAC,EACAC,EACA8yC,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAGxB,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EAOT,OALE/xC,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAGT,MAGT2iE,EAAA9kE,UAAAwmE,qBAAA,SACElB,EACA7sD,EACApH,EACAm0D,GAKA,GAAIF,EAAG5hB,iBAAkB,CACvB,IAAI/kD,EAAOgG,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,SAC/DiW,EAA6C,KACjD,GAAIktD,EAAG3hB,KAAKl8B,EAAAC,MAAM22B,UAAW,CAE3B,KADAjmC,EAAiBra,KAAKuqE,oBAAoBhD,IACrB,OAAO,KAC5B7sD,GAASjU,EAAApE,YAAY+P,QAEvB,GAAIm1D,EAAG3hB,KAAKl8B,EAAAC,MAAMm4B,QAAS,CACzB,IAAI9vC,EAAOhS,KAAK+oE,UAAUxB,GAC1B,IAAKv1D,EAAM,OAAO,KAClB,IAAI+/B,EAAMnrC,EAAA0jB,KAAKqK,sBACb/zB,EACAyZ,EACArI,EACAsB,EACAoH,EACA6sD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAGxB,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EAEP/xC,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAGP,OAAO,MAGT2iE,EAAA9kE,UAAAmsE,mBAAA,SACE7G,GAKA,IAAIE,EAAWF,EAAGzkB,SACdp2B,EAAa1sB,KAAKoqE,gBAAgB7C,EAAE,IACxC,IAAK76C,EAAY,OAAO,KACxB,IAAIqlB,EAAMnrC,EAAA0jB,KAAK2K,oBAAoBvI,EAAY66C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAErE,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,GAGTg1B,EAAA9kE,UAAAosE,oBAAA,SACE9G,GAKA,IAAIE,EAAWF,EAAGzkB,SAClB,GAAIykB,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WAAY,CAC5B,IAAI72B,EAAa1sB,KAAKoqE,gBAAgB7C,GACtC,IAAK76C,EAAY,OAAO,KACxB,GAAI66C,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAAa,CAC7B,IAAI11C,EAAY9N,KAAKooE,eAAeb,GACpC,IAAKz5D,EAAW,OAAO,KACvB,IAAIikC,EAAMnrC,EAAA0jB,KAAK6K,qBAAqBzI,EAAY5e,EAAWy5D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEjF,OADAwvC,EAAG3hB,KAAKl8B,EAAAC,MAAMy6B,WACPrS,EAEP/xC,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,UAIhBpE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAGhB,OAAO,MAMT2iE,EAAA9kE,UAAA0sE,qBAAA,SACEpH,GAGA,IAAIpnB,EAAQonB,EAAGt3D,KAAKyZ,EAAA00B,mBAAmB8G,QACnCuiB,EAAWF,EAAGzkB,SACd8rB,EA6mBR,SAAkC7gE,GAChC,OAAQA,GACN,KAAK2b,EAAAC,MAAM02B,YAAa,SACxB,KAAK32B,EAAAC,MAAMs2B,MAAO,SAClB,KAAKv2B,EAAAC,MAAM+3B,YACX,KAAKh4B,EAAAC,MAAMg4B,MACX,KAAKj4B,EAAAC,MAAM5gB,KACX,KAAK2gB,EAAAC,MAAM1gB,MACX,KAAKygB,EAAAC,MAAMu3B,UACX,KAAKx3B,EAAAC,MAAMw3B,YACX,KAAKz3B,EAAAC,MAAMm2B,OACX,KAAKp2B,EAAAC,MAAMkQ,KACX,KAAKnQ,EAAAC,MAAMm1B,OAAQ,UACnB,KAAKp1B,EAAAC,MAAMkN,IAAK,UAElB,SA5nBmBg4C,CAAyB1uB,GAC1C,GAAc,GAAVyuB,EAA+B,CACjC,IAAIlrD,OAAO,EAKX,OAAIy8B,GAASz2B,EAAAC,MAAMkN,KACjBnT,EAAU1jB,KAAKoqE,gBAAgB7C,EAAE,KAE7B7jD,EAAQ3V,MAAQnH,EAAAoH,SAASkc,KACpBtjB,EAAA0jB,KAAKkE,oBACO9K,EAASgJ,WACThJ,EAAS/D,cACT+D,EAASxM,UAC1BqwD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OAGxB/3B,KAAKuG,MACHG,EAAA5C,eAAekR,wBACfuyD,EAAGnjE,SAGA,MAdc,MAgBrBsf,EAAU1jB,KAAKoqE,gBAAgB7C,EAAIqH,KAKjCzuB,GAASz2B,EAAAC,MAAMu3B,WAAaf,GAASz2B,EAAAC,MAAMw3B,aAE3Cz9B,EAAQ3V,MAAQnH,EAAAoH,SAASic,YACzBvG,EAAQ3V,MAAQnH,EAAAoH,SAASmc,eACzBzG,EAAQ3V,MAAQnH,EAAAoH,SAASoc,gBAEzBpqB,KAAKuG,MACHG,EAAA5C,eAAegrE,0FACfprD,EAAQtf,OAIPwC,EAAA0jB,KAAKgG,4BAA4B6vB,EAAOz8B,EAAS6jD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OAhBvD,KAmBzB,IAAItU,EAA0B,KAC9B,OAAQ08B,GAEN,KAAKz2B,EAAAC,MAAME,KAAM,OAAOjjB,EAAA0jB,KAAKoE,qBAAqB64C,EAAGnjE,SACrD,KAAKslB,EAAAC,MAAMG,KAAM,OAAOljB,EAAA0jB,KAAK4F,qBAAqBq3C,EAAGnjE,SACrD,KAAKslB,EAAAC,MAAMI,MAAO,OAAOnjB,EAAA0jB,KAAKsD,sBAAsB25C,EAAGnjE,SAIvD,KAAKslB,EAAAC,MAAM45B,UAGT,GAAIgkB,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAChB,OAAOxjD,KAAKisE,8BACV1E,EACA3gE,EAAA0jB,KAAK2B,gCAAgCs7C,EAAGnjE,MAAMqjE,QAE9C,GAGJ,IAAI1hB,EAAQwhB,EAAGzhB,OACXipB,GAAQ,EACZ,GACE,OAAQxH,EAAGt3D,KAAKyZ,EAAA00B,mBAAmB8G,SAGjC,KAAKx7B,EAAAC,MAAM02B,YAET,OADAknB,EAAGphB,MAAMJ,GACF/lD,KAAK+rE,wBAAwBxE,GAGtC,KAAK79C,EAAAC,MAAMM,WAET,OADAs9C,EAAGnhB,iBACKmhB,EAAGt3D,QAGT,KAAKyZ,EAAAC,MAAM65B,WACT,IAAK+jB,EAAG3hB,KAAKl8B,EAAAC,MAAM06B,oBAAqB,CACtC0qB,GAAQ,EACR,MAKJ,KAAKrlD,EAAAC,MAAMw6B,MAET,OADAojB,EAAGphB,MAAMJ,GACF/lD,KAAK+rE,wBAAwBxE,GAGtC,KAAK79C,EAAAC,MAAM26B,SACX,KAAK56B,EAAAC,MAAM8M,MACT,MAIF,QACEs4C,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJAxH,EAAGphB,MAAMJ,IAGTtiC,EAAOzjB,KAAKoqE,gBAAgB7C,IAEvBA,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAOZ58C,EAAA0jB,KAAKyE,8BAA8BtL,EAAM8jD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OANpE/3B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MANS,KAWpB,KAAKslB,EAAAC,MAAM46B,YAET,IADA,IAAIl4B,EAAqB,IAAIlmB,OACrBohE,EAAG3hB,KAAKl8B,EAAAC,MAAM66B,eAAe,CACnC,GAAI+iB,EAAGjiB,QAAU57B,EAAAC,MAAM8M,MACrBhT,EAAO,UAGP,KADAA,EAAOzjB,KAAKoqE,gBAAgB7C,EAAI,IACrB,OAAO,KAGpB,GADAl7C,EAAmBxmB,KAAK4d,IACnB8jD,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OAAQ,CACzB,GAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM66B,cAChB,MAMA,OAJAxkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAIb,OAAOwC,EAAA0jB,KAAK4B,6BAA6BG,EAAoBk7C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAGrF,KAAKrO,EAAAC,MAAM86B,UAKT,IAJA,IAAIuqB,EAAWzH,EAAGzkB,SACdj0B,EAAQ,IAAI1oB,MACZyS,EAAS,IAAIzS,MACbvF,OAAI,GACA2mE,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,aAAa,CACjC,GAAK6iB,EAAG5hB,iBAWN/kD,EAAOgG,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,aAXvC,CACxB,IAAKmjE,EAAG3hB,KAAKl8B,EAAAC,MAAM25B,eAKjB,OAJAtjD,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACf/B,EAAGnjE,SAEE,MAETxD,EAAOgG,EAAA0jB,KAAKM,2BAA2B28C,EAAGl1B,aAAck1B,EAAGnjE,UACtDqJ,IAAIhH,EAAApE,YAAY4sE,QAKvB,GADApgD,EAAMhpB,KAAKjF,GACP2mE,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,OAAQ,CACxB,IAAI7iD,EAAQtB,KAAKoqE,gBAAgB7C,EAAI,GACrC,IAAKjmE,EAAO,OAAO,KACnBsX,EAAO/S,KAAKvE,OACP,IAAKV,EAAKkS,GAAGrM,EAAApE,YAAY4sE,QAO9B,OAJAjvE,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KANPwU,EAAO/S,KAAKjF,GAQd,IAAK2mE,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OAAQ,CACzB,GAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM+6B,YAChB,MAMA,OAJA1kD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAIb,OAAOwC,EAAA0jB,KAAKsE,8BAA8BC,EAAOjW,EAAQ2uD,EAAGnjE,MAAM4qE,EAAUzH,EAAGxvC,MAGjF,KAAKrO,EAAAC,MAAM22B,SACT,IAAIh3B,EAAStpB,KAAK+oE,UAAUxB,GAC5B,OAAKj+C,EACAi+C,EAAG3hB,KAAKl8B,EAAAC,MAAM42B,cAOnB98B,EAAOzjB,KAAKoqE,gBAAgB7C,EAAE,KAEvB3gE,EAAA0jB,KAAKkC,0BACV5lB,EAAA0vB,cAAc44C,OACdzrD,EACA6F,EACAi+C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MALN,MAPhB/3B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MANW,KAiBtB,KAAKslB,EAAAC,MAAMM,WACT,OAAOrjB,EAAA0jB,KAAKM,2BAA2B28C,EAAGnhB,iBAAkBmhB,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEpF,KAAKrO,EAAAC,MAAMwN,KACT,OAAOvwB,EAAA0jB,KAAK0F,qBAAqBu3C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEzD,KAAKrO,EAAAC,MAAM/S,YACT,OAAOhQ,EAAA0jB,KAAKiD,4BAA4Bg6C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEhE,KAAKrO,EAAAC,MAAMuN,MACT,OAAOtwB,EAAA0jB,KAAKwF,sBAAsBy3C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAE1D,KAAKrO,EAAAC,MAAM25B,cACT,OAAO18C,EAAA0jB,KAAKsF,8BAA8B23C,EAAGl1B,aAAck1B,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAEnF,KAAKrO,EAAAC,MAAMu6B,eACT,OAAOt9C,EAAA0jB,KAAKgE,+BAA+Bi5C,EAAGtgB,cAAesgB,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAErF,KAAKrO,EAAAC,MAAM+5B,aACT,OAAO98C,EAAA0jB,KAAKwD,6BAA6By5C,EAAGjf,YAAaif,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAIjF,KAAKrO,EAAAC,MAAMq3B,MACT,IAAImuB,EAAgB5H,EAAG3gB,oBACvB,OAAK2gB,EAAG3hB,KAAKl8B,EAAAC,MAAMq3B,OAOZp6C,EAAA0jB,KAAK6E,8BACVggD,EACA5H,EAAGxgB,kBACHwgB,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,OATtB/3B,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAQX,KAAKslB,EAAAC,MAAM5N,SACT,OAAO/b,KAAK+rE,wBAAwBxE,GAEtC,KAAK79C,EAAAC,MAAM1M,MACT,OAAOjd,KAAKosE,qBAAqB7E,GAEnC,QAYE,OAXIpnB,GAASz2B,EAAAC,MAAM07B,UACjBrlD,KAAKuG,MACHG,EAAA5C,eAAe0iD,uBACf+gB,EAAGnjE,MAAMqjE,IAGXznE,KAAKuG,MACHG,EAAA5C,eAAesrE,oBACf7H,EAAGnjE,SAGA,OAKb2iE,EAAA9kE,UAAAotE,qCAAA,SACE9H,GAKA,IAAIxhB,EAAQwhB,EAAGzhB,OACf,IAAKyhB,EAAG3hB,KAAKl8B,EAAAC,MAAM22B,UAAW,OAAO,KACrC,IAAI3gC,EAAgB,IAAIxZ,MACxB,EAAG,CACD,GAAIohE,EAAGjiB,SAAW57B,EAAAC,MAAM42B,YACtB,MAEF,IAAIvuC,EAAOhS,KAAK+oE,UAAUxB,GAAI,GAAM,GACpC,IAAKv1D,EAEH,OADAu1D,EAAGphB,MAAMJ,GACF,KAETpmC,EAAc9Z,KAAKmM,SACZu1D,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,QACvB,OAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM42B,cAAgBgnB,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,WACvC5jC,GAET4nD,EAAGphB,MAAMJ,GACF,OAGTghB,EAAA9kE,UAAA8nE,eAAA,SACExC,GAMA,IADA,IAAI97C,EAAO,IAAItlB,OACPohE,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,aAAa,CACjC,IAAI//B,EAAOzjB,KAAKoqE,gBAAgB7C,EAAI,GACpC,IAAK9jD,EAAM,OAAO,KAElB,GADAgI,EAAK5lB,KAAK4d,IACL8jD,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,OAAQ,CACzB,GAAI8wC,EAAG3hB,KAAKl8B,EAAAC,MAAM65B,YAChB,MAMA,OAJAxjD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,MAIb,OAAOqnB,GAGTs7C,EAAA9kE,UAAAmoE,gBAAA,SACE7C,EACAqH,QAAA,IAAAA,MAAA,GAEAnrE,OAAiB,GAAVmrE,GAEP,IAAInrD,EAAOzjB,KAAK2uE,qBAAqBpH,GACrC,IAAK9jD,EAAM,OAAO,KAClB,IAgBI08B,EAhBAsnB,EAAWhkD,EAAKrf,MAAMmB,MAG1B,GAAIqB,EAAAojB,eAAevG,EAAK1V,MAEtB,IADA,IAAI4R,EAAyC,KAE3C4nD,EAAG3hB,KAAKl8B,EAAAC,MAAM45B,YAEd38C,EAAAyjB,sBAAsB5G,EAAK1V,OAA6E,QAAnE4R,EAAgB3f,KAAKqvE,qCAAqC9H,KAC/F,CACA,IAAI97C,EAAOzrB,KAAK+pE,eAAexC,GAC/B,IAAK97C,EAAM,OAAO,KAClBhI,EAAO7c,EAAA0jB,KAAKyC,qBAAqBtJ,EAAM9D,EAAe8L,EAAM87C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAOtF,IAFA,IACIu3C,EADAr/D,EAA0B,MAG3Bq/D,EAAiBC,EAAoBpvB,EAAQonB,EAAGjiB,UAAYspB,GAG7D,OADArH,EAAGt3D,OACKkwC,GAEN,KAAKz2B,EAAAC,MAAM20B,GACT,IAAIh1B,EAAStpB,KAAK+oE,UAAUxB,GAC5B,IAAKj+C,EAAQ,OAAO,KACpB7F,EAAO7c,EAAA0jB,KAAKkC,0BACV5lB,EAAA0vB,cAAcgoB,GACd76B,EACA6F,EACAi+C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAExB,MAGF,KAAKrO,EAAAC,MAAMgN,WACT,IAAIvI,EAASpuB,KAAK+oE,UAAUxB,GAC5B,IAAKn5C,EAAQ,OAAO,KACpB3K,EAAO7c,EAAA0jB,KAAK6D,2BACV1K,EACA2K,EACAm5C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAExB,MAGF,KAAKrO,EAAAC,MAAM46B,YAET,KADAt0C,EAAOjQ,KAAKoqE,gBAAgB7C,IACjB,OAAO,KAClB,IAAKA,EAAG3hB,KAAKl8B,EAAAC,MAAM66B,cAKjB,OAJAxkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAETqf,EAAO7c,EAAA0jB,KAAKmD,8BACVhK,EACAxT,EACAs3D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAExB,MAGF,KAAKrO,EAAAC,MAAMu3B,UACX,KAAKx3B,EAAAC,MAAMw3B,YAEP19B,EAAK1V,MAAQnH,EAAAoH,SAASic,YACtBxG,EAAK1V,MAAQnH,EAAAoH,SAASmc,eACtB1G,EAAK1V,MAAQnH,EAAAoH,SAASoc,gBAEtBpqB,KAAKuG,MACHG,EAAA5C,eAAegrE,0FACfrrD,EAAKrf,OAGTqf,EAAO7c,EAAA0jB,KAAK8F,6BACV+vB,EACA18B,EACA8jD,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAExB,MAGF,KAAKrO,EAAAC,MAAM26B,SACT,IAAI70B,EAASzvB,KAAKoqE,gBAAgB7C,GAClC,IAAK93C,EAAQ,OAAO,KACpB,IAAK83C,EAAG3hB,KAAKl8B,EAAAC,MAAMw6B,OAKjB,OAJAnkD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEP,KAET,IAAIsrB,EAAS1vB,KAAKoqE,gBAAgB7C,EAAIqH,EAAU,EAC5C,EACD,GAEH,IAAKl/C,EAAQ,OAAO,KACpBjM,EAAO7c,EAAA0jB,KAAKiF,wBACV9L,EACAgM,EACAC,EACA63C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAExB,MAGF,KAAKrO,EAAAC,MAAM8M,MACT,IAAI+4C,GAA6B/rD,GACjC,EAAG,CAED,KADAA,EAAOzjB,KAAKoqE,gBAAgB7C,EAAI,IACrB,OAAO,KAClBiI,EAAW3pE,KAAK4d,SACT8jD,EAAG3hB,KAAKl8B,EAAAC,MAAM8M,QACvBhT,EAAO7c,EAAA0jB,KAAK8C,sBAAsBoiD,EAAYjI,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MACpE,MAEF,QAME,KALA9nB,EAAOjQ,KAAKoqE,gBAAgB7C,EAC1BkI,EAAmBtvB,GACfmvB,EACAA,EAAiB,IAEZ,OAAO,KAGlB,GAAInvB,GAASz2B,EAAAC,MAAMg6B,IACjB,GAAI1zC,EAAKlC,MAAQnH,EAAAoH,SAASic,WACxBxG,EAAO7c,EAAA0jB,KAAK2E,+BACVxL,EACsBxT,EACtBs3D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,UAEnB,IAAI9nB,EAAKlC,MAAQnH,EAAAoH,SAASkc,KAqB/B,OAJAlqB,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACfr5D,EAAK7L,OAEA,KApBP,IAAIsrE,EAA+Bz/D,EACnC,GAAIy/D,EAAahjD,WAAW3e,MAAQnH,EAAAoH,SAASic,WAW3C,OAJAjqB,KAAKuG,MACHG,EAAA5C,eAAewlE,oBACfoG,EAAahjD,WAAWtoB,OAEnB,KAVPsrE,EAAahjD,WAAa9lB,EAAA0jB,KAAK2E,+BAC7BxL,EACsBisD,EAAahjD,WACnC66C,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAS1BtU,EAAOisD,OAWTjsD,EAAO7c,EAAA0jB,KAAKsC,uBAAuBuzB,EAAO18B,EAAMxT,EAAMs3D,EAAGnjE,MAAMqjE,EAAUF,EAAGxvC,MAMpF,OAAOtU,GAITsjD,EAAA9kE,UAAA0lE,cAAA,SAAcJ,GAGZ,IAFAA,EAAGjiB,MAAK,GACJiiB,EAAGtkB,oBAAoBskB,EAAGt3D,SAC3B,CACD,IAAI8yC,EAAYwkB,EAAGjiB,MAAK,GACxB,GACEvC,GAAar5B,EAAAC,MAAM07B,WACnBtC,GAAar5B,EAAAC,MAAMy6B,UACnB,CACAmjB,EAAGt3D,OACH,MAEF,GAAIs3D,EAAGtkB,mBAAoB,MAC3B,OAAQskB,EAAGt3D,QACT,KAAKyZ,EAAAC,MAAMM,WACTs9C,EAAGnhB,iBACH,MAEF,KAAK18B,EAAAC,MAAM25B,cACTikB,EAAGl1B,aACH,MAEF,KAAK3oB,EAAAC,MAAMu6B,eACTqjB,EAAGtgB,cACH,MAEF,KAAKv9B,EAAAC,MAAM+5B,aACT6jB,EAAGjf,eAQXye,EAAA9kE,UAAA0tE,UAAA,SAAUpI,GAER,IAAIqI,EAAQ,EACRb,GAAQ,EACZ,GACE,OAAQxH,EAAGt3D,QACT,KAAKyZ,EAAAC,MAAM07B,UACTrlD,KAAKuG,MACHG,EAAA5C,eAAekgD,YACfujB,EAAGnjE,QAAS,KAEd2qE,GAAQ,EACR,MAEF,KAAKrlD,EAAAC,MAAM86B,YACPmrB,EACF,MAEF,KAAKlmD,EAAAC,MAAM+6B,aACPkrB,IACUb,GAAQ,GACpB,MAEF,KAAKrlD,EAAAC,MAAMM,WACTs9C,EAAGnhB,iBACH,MAEF,KAAK18B,EAAAC,MAAM25B,cACTikB,EAAGl1B,aACH,MAEF,KAAK3oB,EAAAC,MAAMu6B,eACTqjB,EAAGtgB,cACH,MAEF,KAAKv9B,EAAAC,MAAM+5B,aACT6jB,EAAGjf,mBAIAymB,IAEbhI,EAx1GA,CAA4BrgE,EAAAT,mBAw4G5B,SAAAspE,EAA6BxhE,GAC3B,OAAQA,GACN,KAAK2b,EAAAC,MAAM8M,MAAO,SAClB,KAAK/M,EAAAC,MAAMm4B,OACX,KAAKp4B,EAAAC,MAAMo4B,YACX,KAAKr4B,EAAAC,MAAMq4B,aACX,KAAKt4B,EAAAC,MAAMu4B,yBACX,KAAKx4B,EAAAC,MAAMs4B,gBACX,KAAKv4B,EAAAC,MAAMw4B,aACX,KAAKz4B,EAAAC,MAAMy4B,eACX,KAAK14B,EAAAC,MAAM04B,yBACX,KAAK34B,EAAAC,MAAM24B,+BACX,KAAK54B,EAAAC,MAAM44B,2CACX,KAAK74B,EAAAC,MAAM64B,iBACX,KAAK94B,EAAAC,MAAM+4B,aACX,KAAKh5B,EAAAC,MAAM84B,WAAY,SACvB,KAAK/4B,EAAAC,MAAM26B,SAAU,SACrB,KAAK56B,EAAAC,MAAMk4B,QAAS,SACpB,KAAKn4B,EAAAC,MAAMi4B,oBAAqB,SAChC,KAAKl4B,EAAAC,MAAM63B,IAAK,SAChB,KAAK93B,EAAAC,MAAM83B,MAAO,SAClB,KAAK/3B,EAAAC,MAAM43B,UAAW,UACtB,KAAK73B,EAAAC,MAAM+2B,cACX,KAAKh3B,EAAAC,MAAMg3B,mBACX,KAAKj3B,EAAAC,MAAMi3B,qBACX,KAAKl3B,EAAAC,MAAMk3B,0BAA2B,UACtC,KAAKn3B,EAAAC,MAAM20B,GACX,KAAK50B,EAAAC,MAAMy1B,GACX,KAAK11B,EAAAC,MAAMgN,WACX,KAAKjN,EAAAC,MAAM22B,SACX,KAAK52B,EAAAC,MAAM42B,YACX,KAAK72B,EAAAC,MAAM62B,gBACX,KAAK92B,EAAAC,MAAM82B,mBAAoB,UAC/B,KAAK/2B,EAAAC,MAAMy3B,kBACX,KAAK13B,EAAAC,MAAM03B,wBACX,KAAK33B,EAAAC,MAAM23B,oCAAqC,UAChD,KAAK53B,EAAAC,MAAM5gB,KACX,KAAK2gB,EAAAC,MAAM1gB,MAAO,UAClB,KAAKygB,EAAAC,MAAMo3B,SACX,KAAKr3B,EAAAC,MAAMq3B,MACX,KAAKt3B,EAAAC,MAAMs3B,QAAS,UACpB,KAAKv3B,EAAAC,MAAMm3B,kBAAmB,UAC9B,KAAKp3B,EAAAC,MAAMu3B,UACX,KAAKx3B,EAAAC,MAAMw3B,YAAa,UACxB,KAAKz3B,EAAAC,MAAMg6B,IACX,KAAKj6B,EAAAC,MAAMkN,IACX,KAAKnN,EAAAC,MAAM46B,YAAa,UAE1B,SAIF,SAAAkrB,EAA4B1hE,GAC1B,OAAQA,GACN,KAAK2b,EAAAC,MAAMm4B,OACX,KAAKp4B,EAAAC,MAAMo4B,YACX,KAAKr4B,EAAAC,MAAMq4B,aACX,KAAKt4B,EAAAC,MAAMu4B,yBACX,KAAKx4B,EAAAC,MAAMs4B,gBACX,KAAKv4B,EAAAC,MAAMw4B,aACX,KAAKz4B,EAAAC,MAAMy4B,eACX,KAAK14B,EAAAC,MAAM04B,yBACX,KAAK34B,EAAAC,MAAM24B,+BACX,KAAK54B,EAAAC,MAAM44B,2CACX,KAAK74B,EAAAC,MAAM64B,iBACX,KAAK94B,EAAAC,MAAM+4B,aACX,KAAKh5B,EAAAC,MAAM84B,WACX,KAAK/4B,EAAAC,MAAM26B,SACX,KAAK56B,EAAAC,MAAMm3B,kBAAmB,OAAO,EACrC,QAAS,OAAO,GA78GPphD,EAAAqnE,SA21Gb,SAAkB8I,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkBnwE,EAAAmwE,aAAAnwE,EAAAmwE,i5BC/6GlB,IAAAppE,EAAAtG,EAAA,GAIA26C,EAAA36C,EAAA,GAuBA+C,EAAA/C,EAAA,GAKA2vE,EAAA,WAYE,SAAAA,EAAYr1D,EAAkBs1D,QAAA,IAAAA,OAAA,GAL9B/vE,KAAAgwE,QAEAhwE,KAAAuZ,KAAqB,IAAIC,IAIvBxZ,KAAKya,QAAUA,EACfza,KAAK+vE,eA0ET,OAtEED,EAAA7tE,UAAAguE,KAAA,uBACE,IAAyB,IAAAzyD,EAAAzN,EAAA/P,KAAKya,QAAQnQ,mBAAmBsO,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAA9D,IAAI2gD,EAAYzgD,EAAA7O,MAEnBtB,KAAKkwE,aAAatf,EAAavhD,2GAGjC,IADA,IAAI2gE,EAAOhwE,KAAKgwE,KACH,EAAOA,EAAK1qE,QAAUtF,KAAKkwE,aAAaF,EAAxC,KAIfF,EAAA7tE,UAAAiuE,aAAA,SAAa7gE,GACX,KAAIA,EAAQyD,GAAGrM,EAAApE,YAAYs9C,UAAa3/C,KAAK+vE,kBACzC/vE,KAAKuZ,KAAK5H,IAAItC,GAElB,OADArP,KAAKuZ,KAAKE,IAAIpK,GACNA,EAAQtB,MACd,KAAK+sC,EAAArxC,YAAY2K,OACX/E,EAAQyD,GAAGrM,EAAApE,YAAY8uD,WAAWnxD,KAAKmwE,YAAoB9gE,GAC/D,MAEF,KAAKyrC,EAAArxC,YAAYmR,KACXvL,EAAQyD,GAAGrM,EAAApE,YAAY8uD,WAAWnxD,KAAKowE,UAAgB/gE,GAC3D,MAEF,KAAKyrC,EAAArxC,YAAYwI,mBACfjS,KAAKqwE,uBAA0ChhE,GAC/C,MAEF,KAAKyrC,EAAArxC,YAAYyH,gBACflR,KAAKswE,oBAAoCjhE,GACzC,MAEF,KAAKyrC,EAAArxC,YAAY+V,MACHnQ,EAASyD,GAAGrM,EAAApE,YAAY8uD,WAAWnxD,KAAKuwE,WAAkBlhE,GACtE,MAEF,KAAKyrC,EAAArxC,YAAYyO,SACf,IAAIs4D,EAAiBnhE,EACjBxO,EAAS2vE,EAAKr4D,gBACdtX,GAAQb,KAAKqwE,uBAAuBxvE,GACxC,IAAIuwD,EAASof,EAAKp4D,gBACdg5C,GAAQpxD,KAAKqwE,uBAAuBjf,GACxC,MAEF,KAAKtW,EAAArxC,YAAYkR,WA8ZvB,SAAA81D,EAA2BphE,mBACzB,IAAImD,EAAUnD,EAAQmD,QACtB,GAAIA,MACF,IAAmB,IAAAhB,EAAAzB,EAAAyC,EAAQoG,UAAQ8zC,EAAAl7C,EAAAvB,QAAAy8C,EAAAx8C,KAAAw8C,EAAAl7C,EAAAvB,OAAE,CAAhC,IAAIQ,EAAMi8C,EAAAprD,MACb,OAAQmP,EAAO1C,MACb,KAAK+sC,EAAArxC,YAAYwI,uBACf,IAAqB,IAAAg7C,EAAAl9C,EAAoBU,EAAQkL,UAAU/C,UAAQs0C,EAAAD,EAAAh9C,QAAAi9C,EAAAh9C,KAAAg9C,EAAAD,EAAAh9C,OAAE,CAAhE,IAAI2B,EAAQs7C,EAAA5rD,MACf,GAAIsQ,EAASkB,GAAGrM,EAAApE,YAAY8uD,UAAW,OAAO,oGAEhD,MAEF,KAAKrW,EAAArxC,YAAYyH,oBACf,IAAqB,IAAAm8C,EAAAt9C,EAAiBU,EAAQkL,UAAU/C,UAAQ00C,EAAAD,EAAAp9C,QAAAq9C,EAAAp9C,KAAAo9C,EAAAD,EAAAp9C,OAAE,CAA7D,IAAI2B,EAAQ07C,EAAAhsD,MACf,GAAIsQ,EAASkB,GAAGrM,EAAApE,YAAY8uD,UAAW,OAAO,oGAEhD,MAEF,QACE,GAAI1gD,EAAOqC,GAAGrM,EAAApE,YAAY8uD,WAAasf,EAAkBhgE,GAAS,OAAO,qGAMjF,OAAO,GArbGggE,CAAkBphE,IAAUrP,KAAK0wE,eAAerhE,GACpD,MAEF,QAAS5L,QAAO,KAIZqsE,EAAA7tE,UAAAouE,uBAAR,SAA+BhhE,eAC7B,IAAqB,IAAAmO,EAAAzN,EAAAV,EAAQsM,UAAU/C,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAA5C,IAAI2B,EAAQzB,EAAA7O,MACXsQ,EAASkB,GAAGrM,EAAApE,YAAY8uD,WAAWnxD,KAAK2wE,cAAwB/+D,uGAIhEk+D,EAAA7tE,UAAAquE,oBAAR,SAA4BjhE,eAC1B,IAAqB,IAAAmO,EAAAzN,EAAAV,EAAQsM,UAAU/C,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAE,CAA5C,IAAI2B,EAAQzB,EAAA7O,MACXsQ,EAASkB,GAAGrM,EAAApE,YAAY8uD,WAAWnxD,KAAK4wE,WAAkBh/D,uGAWpEk+D,EAxFA,GA2FAe,EAAA,SAAA/mE,GAWE,SAAA+mE,EAAYp2D,EAAkBs1D,QAAA,IAAAA,OAAA,GAA9B,IAAAhmE,EACED,EAAAtJ,KAAAR,KAAMya,EAASs1D,IAAe/vE,YALxB+J,EAAApE,MACAoE,EAAA+mE,YAAmB,IAkK7B,OA1KgC3lE,EAAA0lE,EAAA/mE,GAGvB+mE,EAAAE,MAAP,SAAat2D,GACX,OAAO,IAAIo2D,EAAWp2D,GAASs2D,SAWjCF,EAAA5uE,UAAAkuE,YAAA,SAAY9gE,GACV,IAAI1J,EAAK3F,KAAK2F,GACVqrE,EAAU3hE,EAAQyD,GAAGrM,EAAApE,YAAY8Y,SAMrC,GALAjY,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,aACZE,GAASrrE,EAAGE,KAAK,UACrBF,EAAGE,KAAK7F,KAAKkxE,aAAa7hE,EAAQ2C,OAClCrM,EAAGE,KAAK,KACRF,EAAGE,KAAKwJ,EAAQmF,YACZw8D,EACF,OAAQ3hE,EAAQ4L,mBACd,OACEtV,EAAGE,KAAK,OACRF,EAAGE,KAAKsrE,cAAc9hE,EAAQ6L,uBAC9B,MAEF,OACEvV,EAAGE,KAAK,OACRF,EAAGE,KAAKwJ,EAAQ+L,mBAAmBvW,YACnC,MAEF,QAASpB,QAAO,GAGpBkC,EAAGE,KAAK,QAGVgrE,EAAA5uE,UAAAmuE,UAAA,SAAU/gE,eACJ1J,EAAK3F,KAAK2F,GACdzC,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,eAChBnrE,EAAGE,KAAK,cACRF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,QACR,IAAI2M,EAAUnD,EAAQmD,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAA4+D,EAAArhE,EAAAyC,GAAO6+D,EAAAD,EAAAnhE,QAAAohE,EAAAnhE,KAAAmhE,EAAAD,EAAAnhE,OAAE,CAA3B,IAAAE,EAAAC,EAAAihE,EAAA/vE,MAAA,GAACV,EAAAuP,EAAA,GACR,IADcM,EAAAN,EAAA,IACHpC,MAAQ+sC,EAAArxC,YAAYoR,UAAW,CACxC,IAAIm2D,EAAsBvgE,EAAQqC,GAAGrM,EAAApE,YAAY8Y,SACjDjY,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,aACZE,EAASrrE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAKjF,GACJowE,IACFrrE,EAAGE,KAAK,OACRF,EAAGE,KAAiB4K,EAAQqK,cAAcjW,SAAS,MAErDc,EAAGE,KAAK,8GAGZ,IAAmB,IAAA2L,EAAAzB,EAAAyC,EAAQoG,UAAQ8zC,EAAAl7C,EAAAvB,QAAAy8C,EAAAx8C,KAAAw8C,EAAAl7C,EAAAvB,OAAE,CAAhC,IAAIQ,KAAMi8C,EAAAprD,OACFyM,MAAQ+sC,EAAArxC,YAAYoR,WAAW7a,KAAKkwE,aAAaz/D,sGAGhEvN,EAAA+tE,OAAOtrE,IAAM3F,KAAK8wE,aAClBnrE,EAAGE,KAAK,QAGVgrE,EAAA5uE,UAAA0uE,cAAA,SAActhE,WACR1J,EAAK3F,KAAK2F,GACV8M,EAAYpD,EAAQoD,UACxBvP,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,aAChBnrE,EAAGE,KAAK7F,KAAKkxE,aAAaz+D,EAAUG,aACpCjN,EAAGE,KAAK,KACRF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,KAIR,IAHA,IAAIulB,EAAa3Y,EAAUC,eACvB4qC,EAAgBlyB,EAAW9lB,OAEtBjF,EAAI,EAAGA,EAAIi9C,IAAiBj9C,EAC/BA,GAAGsF,EAAGE,KAAK,MAEfF,EAAGE,KAAK7F,KAAKkxE,aAAa9lD,EAAW/qB,KACrCsF,EAAGE,KAAK,KACRF,EAAGE,KAAK4M,EAAUoL,iBAAiBxd,IAErCsF,EAAGE,KAAK,QACR,IAAI2M,EAAUnD,EAAQmD,QACtB,GAAIA,GAAWA,EAAQwU,KAAM,CAC3B9jB,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,aAChBnrE,EAAGE,KAAK,cACRF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,YACR,IAAmB,IAAA2X,EAAAzN,EAAAyC,EAAQoG,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAA,CAA9B,IAAIQ,EAAMN,EAAA7O,MAAsBtB,KAAKkwE,aAAaz/D,qGACvDvN,EAAA+tE,OAAOtrE,IAAM3F,KAAK8wE,aAClBnrE,EAAGE,KAAK,SAIZgrE,EAAA5uE,UAAA2uE,WAAA,SAAWvhE,GACT,IAAI1J,EAAK3F,KAAK2F,GACdzC,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,eAChBnrE,EAAGE,KAAK,cACRF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,QAER3C,EAAA+tE,OAAOtrE,IAAM3F,KAAK8wE,aAClBnrE,EAAGE,KAAK,QAGVgrE,EAAA5uE,UAAAqvE,eAAA,SAAejiE,GACbrP,KAAK4wE,WAAWvhE,IAGlBwhE,EAAA5uE,UAAAsuE,WAAA,SAAWlhE,KAIXwhE,EAAA5uE,UAAAyuE,eAAA,SAAerhE,WACT1J,EAAK3F,KAAK2F,GACdzC,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,eAChBnrE,EAAGE,KAAK,cACRF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,QACR,IAAI2M,EAAUnD,EAAQmD,QACtB,GAAIA,MACF,IAAmB,IAAAgL,EAAAzN,EAAAyC,EAAQoG,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAA,CAA9B,IAAIQ,EAAMN,EAAA7O,MAAsBtB,KAAKkwE,aAAaz/D,qGAEzDvN,EAAA+tE,OAAOtrE,IAAM3F,KAAK8wE,aAClBnrE,EAAGE,KAAK,QAGVgrE,EAAA5uE,UAAAivE,aAAA,SAAal/D,GACX,OAAQA,EAAKjE,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAO/N,KAAKya,QAAQ/O,QAAQkB,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAO5M,KAAKya,QAAQ/O,QAAQkB,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADAnJ,QAAO,GACA,KAKbotE,EAAA5uE,UAAA8uE,MAAA,WACE,IAAIprE,EAAK3F,KAAK2F,GAMd,OALAA,EAAGE,KAAK,4BACN7F,KAAK8wE,YACP9wE,KAAKiwE,SACHjwE,KAAK8wE,YACPnrE,EAAGE,KAAK,OACDF,EAAGG,KAAK,KAEnB+qE,EA1KA,CAAgCf,GAAnBpwE,EAAAmxE,aA6Kb,IAAAU,EAAA,SAAAznE,GAWE,SAAAynE,EAAY92D,EAAkBs1D,QAAA,IAAAA,OAAA,GAA9B,IAAAhmE,EACED,EAAAtJ,KAAAR,KAAMya,EAASs1D,IAAe/vE,YALxB+J,EAAApE,MACAoE,EAAA+mE,YAAmB,IAsM7B,OA9MgC3lE,EAAAomE,EAAAznE,GAGvBynE,EAAAR,MAAP,SAAat2D,GACX,OAAO,IAAI82D,EAAW92D,GAASs2D,SAWjCQ,EAAAtvE,UAAAkuE,YAAA,SAAY9gE,GACV,IAAI1J,EAAK3F,KAAK2F,GACVqrE,EAAU3hE,EAAQyD,GAAGrM,EAAApE,YAAY8Y,SACrCjY,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,aACZzhE,EAAQyD,GAAGrM,EAAApE,YAAY6T,QACrB86D,EAASrrE,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAETmrE,EAASrrE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,QAEfF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,MACRF,EAAGE,KAAK7F,KAAKkxE,aAAa7hE,EAAQ2C,OAClCrM,EAAGE,KAAK,OACR7F,KAAK0wE,eAAerhE,IAGtBkiE,EAAAtvE,UAAAmuE,UAAA,SAAU/gE,WACJ1J,EAAK3F,KAAK2F,GACdzC,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,eAChBnrE,EAAGE,KAAK,SACRF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,QACR,IAAI2M,EAAUnD,EAAQmD,QACtB,GAAIA,EAAS,CACX,IAAIg/D,EAAah/D,EAAQwU,SACzB,IAA2B,IAAAyqD,EAAA1hE,EAAAyC,GAAOk/D,EAAAD,EAAAxhE,QAAAyhE,EAAAxhE,KAAAwhE,EAAAD,EAAAxhE,OAAE,CAA3B,IAAAuN,EAAApN,EAAAshE,EAAApwE,MAAA,GAACV,EAAA4c,EAAA,GAAM/M,EAAA+M,EAAA,GACV/M,EAAO1C,MAAQ+sC,EAAArxC,YAAYoR,YAC7B3X,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,aAChBnrE,EAAGE,KAAKjF,GACJ6P,EAAOqC,GAAGrM,EAAApE,YAAY8Y,WACxBxV,EAAGE,KAAK,OACRF,EAAGE,KAAiB4K,EAAQqK,cAAcjW,SAAS,MAErDc,EAAGE,KAAK,SACN2rE,qGAGFA,GAAYxxE,KAAK0wE,eAAerhE,GAEtCnM,EAAA+tE,OAAOtrE,IAAM3F,KAAK8wE,aAClBnrE,EAAGE,KAAK,QAGV0rE,EAAAtvE,UAAA0uE,cAAA,SAActhE,GACZ,IAAIA,EAAQ8C,MAAM1L,EAAApE,YAAYs9C,QAAUl5C,EAAApE,YAAYuT,KAApD,CACA,IAAIjQ,EAAK3F,KAAK2F,GACV8M,EAAYpD,EAAQoD,UAIxB,GAHAvP,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,aACZzhE,EAAQyD,GAAGrM,EAAApE,YAAYu9C,YAAYj6C,EAAGE,KAAK,cAC3CwJ,EAAQyD,GAAGrM,EAAApE,YAAY6T,SAASvQ,EAAGE,KAAK,WACxCwJ,EAAQyD,GAAGrM,EAAApE,YAAYsT,KAKzB,OAJAhQ,EAAGE,KAAKwJ,EAAQpN,UAAUmN,YAAYxO,KAAKwE,MAC3CO,EAAGE,KAAK,MACRF,EAAGE,KAAK7F,KAAKkxE,aAAaz+D,EAAUG,kBACpCjN,EAAGE,KAAK,OAGHwJ,EAAQ8C,MAAM1L,EAAApE,YAAY6T,OAASzP,EAAApE,YAAY6a,WAAWvX,EAAGE,KAAK,aACvEF,EAAGE,KAAKwJ,EAAQmF,YAElB7O,EAAGE,KAAK,KAIR,IAHA,IAAIulB,EAAa3Y,EAAUC,eACvB4qC,EAAgBlyB,EAAW9lB,OAEtBjF,EAAI,EAAGA,EAAIi9C,IAAiBj9C,EAC/BA,GAAGsF,EAAGE,KAAK,MAEfF,EAAGE,KAAK4M,EAAUoL,iBAAiBxd,IACnCsF,EAAGE,KAAK,MACRF,EAAGE,KAAK7F,KAAKkxE,aAAa9lD,EAAW/qB,KAEnCgP,EAAQ8C,MAAM1L,EAAApE,YAAYuU,YAAcnQ,EAAApE,YAAYuT,KACtDjQ,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAK7F,KAAKkxE,aAAaz+D,EAAUG,cAEtCjN,EAAGE,KAAK,OACR7F,KAAK0wE,eAAerhE,KAGtBkiE,EAAAtvE,UAAA2uE,WAAA,SAAWvhE,eACL1J,EAAK3F,KAAK2F,GACVqQ,EAAc3G,EAAQtB,MAAQ+sC,EAAArxC,YAAYmX,UAC9C1d,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,eACZ96D,EACFrQ,EAAGE,KAAK,eAEJwJ,EAAQyD,GAAGrM,EAAApE,YAAYkU,WAAW5Q,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,WAEVF,EAAGE,KAAKwJ,EAAQmF,YAChB,IAAIoL,EAAOvQ,EAAQuQ,KACfA,GAAQA,EAAK9M,GAAGrM,EAAApE,YAAY8uD,SAAW1qD,EAAApE,YAAY4S,iBACrDtP,EAAGE,KAAK,aACRF,EAAGE,KAAK+Z,EAAKpL,aAEf7O,EAAGE,KAAK,QACR,IAAI2M,EAAUnD,EAAQpN,UAAUuQ,QAChC,GAAIA,MACF,IAAmB,IAAArC,EAAAJ,EAAAyC,EAAQoG,UAAQpH,EAAArB,EAAAF,QAAAuB,EAAAtB,KAAAsB,EAAArB,EAAAF,OAAE,CAAhC,IAAIQ,EAAMe,EAAAlQ,MACbtB,KAAKkwE,aAAaz/D,qGAGtB,IAAIihD,EAAOriD,EAAQyQ,oBAGnB,GAFI4xC,GAAM1xD,KAAK2wE,cAAcjf,GAC7Bl/C,EAAUnD,EAAQmD,YAEhB,IAAmB,IAAAk6C,EAAA38C,EAAAyC,EAAQoG,UAAQq0C,EAAAP,EAAAz8C,QAAAg9C,EAAA/8C,KAAA+8C,EAAAP,EAAAz8C,OAAA,CAA1BQ,EAAMw8C,EAAA3rD,MAAsBtB,KAAKkwE,aAAaz/D,qGAEzDvN,EAAA+tE,OAAOtrE,IAAM3F,KAAK8wE,aAClBnrE,EAAGE,KAAK,QAGV0rE,EAAAtvE,UAAAqvE,eAAA,SAAejiE,GACbrP,KAAK4wE,WAAWvhE,IAGlBkiE,EAAAtvE,UAAAsuE,WAAA,SAAWlhE,GACT,IAAIA,EAAQyD,GAAGrM,EAAApE,YAAYs9C,SAA3B,CACA,IAAIh6C,EAAK3F,KAAK2F,GACdzC,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,aACZzhE,EAAQyD,GAAGrM,EAAApE,YAAYu9C,YAAYj6C,EAAGE,KAAK,cAC3CwJ,EAAQyD,GAAGrM,EAAApE,YAAY6T,SAASvQ,EAAGE,KAAK,WACxCwJ,EAAQyD,GAAGrM,EAAApE,YAAYgU,WAAW1Q,EAAGE,KAAK,aAC9CF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,MACRF,EAAGE,KAAK7F,KAAKkxE,aAAa7hE,EAAQ2C,OAClCrM,EAAGE,KAAK,SAGV0rE,EAAAtvE,UAAAyuE,eAAA,SAAerhE,WACTmD,EAAUnD,EAAQmD,QACtB,GAAIA,GAAWA,EAAQwU,KAAM,CAC3B,IAAIrhB,EAAK3F,KAAK2F,GACdzC,EAAA+tE,OAAOtrE,EAAI3F,KAAK8wE,eAChBnrE,EAAGE,KAAK,cACRF,EAAGE,KAAKwJ,EAAQmF,YAChB7O,EAAGE,KAAK,YACR,IAAmB,IAAA2X,EAAAzN,EAAAyC,EAAQoG,UAAQzI,EAAAqN,EAAAvN,QAAAE,EAAAD,KAAAC,EAAAqN,EAAAvN,OAAA,CAA9B,IAAIQ,EAAMN,EAAA7O,MAAsBtB,KAAKkwE,aAAaz/D,qGACvDvN,EAAA+tE,OAAOtrE,IAAM3F,KAAK8wE,aAClBnrE,EAAGE,KAAK,SAIZ0rE,EAAAtvE,UAAAivE,aAAA,SAAal/D,GACX,OAAQA,EAAKjE,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO/N,KAAKya,QAAQ/O,QAAQkB,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO5M,KAAKya,QAAQ/O,QAAQkB,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAEE,OADAnJ,QAAO,GACA,KAKb8tE,EAAAtvE,UAAA8uE,MAAA,WACE,IAAIprE,EAAK3F,KAAK2F,GAgBd,OAfAA,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACN7F,KAAK8wE,YACP9wE,KAAKiwE,SACHjwE,KAAK8wE,YACPnrE,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACD7F,KAAK2F,GAAGG,KAAK,KAExByrE,EA9MA,CAAgCzB,GAAnBpwE,EAAA6xE,4FCxSb,IAAA1qE,EAAA1G,EAAA,GAwDAwxE,EAAA,WAWE,SAAAA,IAHA3xE,KAAAoF,QACApF,KAAA4xE,WAAkB,EAoyBpB,OA3yBSD,EAAAE,UAAP,SAAiBlyE,GACf,IAAImyE,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAUlyE,GACdmyE,EAAW/oB,UASpB4oB,EAAA1vE,UAAA4vE,UAAA,SAAUlyE,GACR,MAAM,IAAI+R,MAAM,oBAGlBigE,EAAA1vE,UAAA8vE,kBAAA,SAAkBviC,GAChB,IAAI5uC,EAAOiG,EAAAkxC,gBAAgBvI,IAAS,IAAMxvC,KAAK4xE,WAAW/sE,SAAS,IAC/D0uB,EAAO1sB,EAAAixC,gBAAgBtI,GAC3BxvC,KAAK6F,KAAK,aACV7F,KAAK6F,KAAKjF,GACVZ,KAAK6F,KAAK,KACT,IAAK,IAAIxF,EAAW,EAAGgL,EAAWxE,EAAAoxC,sBAAsBzI,GAAOnvC,EAAIgL,IAAKhL,EACnEA,EAAI,GAAGL,KAAK6F,KAAK,MACrB7F,KAAK6F,KAAK,KACV7F,KAAK6F,KAAKxF,EAAEwE,SAAS,KACrB7E,KAAK6F,KAAK,MACV7F,KAAK6F,KAAKmsE,EAAiBnrE,EAAAsxC,qBAAqB3I,EAAMnvC,KAExDL,KAAK6F,KAAK,OACV7F,KAAK6F,KAAKmsE,EAAiBnrE,EAAAwxC,sBAAsB7I,KACjDxvC,KAAK6F,KAAK,KACNgB,EAAA8c,gBAAgB4P,IAAS1sB,EAAA+c,aAAa4E,OACxCxoB,KAAK6F,KAAK,OAEZ7F,KAAKiyE,oBAAoB1+C,GACrB1sB,EAAA8c,gBAAgB4P,IAAS1sB,EAAA+c,aAAa4E,OACxCxoB,KAAK6F,KAAK,WAEV7F,KAAK4xE,YAGTD,EAAA1vE,UAAAgwE,oBAAA,SAAoBxuD,GAClB,IAGIyuD,EACAC,EACA9xE,EAAUgL,EALVqT,EAAK7X,EAAA8c,gBAAgBF,GACrBzR,EAAOnL,EAAAihB,kBAAkBrE,GAM7B,OAAQ/E,GACN,KAAK7X,EAAA+c,aAAa4E,MAOhB,IANqC,OAAhC2pD,EAAStrE,EAAA4hB,aAAahF,MACzBzjB,KAAK6F,KAAKssE,GACVnyE,KAAK6F,KAAK,OAEZ7F,KAAK6F,KAAK,OACVwF,EAAIxE,EAAA6hB,mBAAmBjF,GAClBpjB,EAAI,EAAGA,EAAIgL,IAAKhL,EACnBL,KAAKiyE,oBAAoBprE,EAAA+hB,cAAcnF,EAAMpjB,IAG/C,YADAL,KAAK6F,KAAK,OAGZ,KAAKgB,EAAA+c,aAAaiF,GAiBhB,YAhBQ,GAAJ7W,GACFhS,KAAK6F,KAAK,QACV7F,KAAKiyE,oBAAoBprE,EAAAovC,eAAexyB,IACxCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAAiiB,UAAUrF,KAC/ByuD,EAASrrE,EAAAkiB,WAAWtF,MACtBzjB,KAAK6F,KAAK,UACV7F,KAAKiyE,oBAAoBC,MAG3BlyE,KAAKiyE,oBAAoBprE,EAAAovC,eAAexyB,IACxCzjB,KAAK6F,KAAK,OACV7F,KAAKiyE,oBAAoBprE,EAAAiiB,UAAUrF,IACnCzjB,KAAK6F,KAAK,OACV7F,KAAKiyE,oBAAoBprE,EAAAkiB,WAAWtF,MAIxC,KAAK5c,EAAA+c,aAAawuD,KACoB,OAA/BD,EAAStrE,EAAAwvC,YAAY5yB,MACxBzjB,KAAK6F,KAAKssE,GACVnyE,KAAK6F,KAAK,OAEZ7F,KAAK6F,KAAK,OACV7F,KAAKiyE,oBAAoBprE,EAAA0vC,YAAY9yB,IACrCzjB,KAAK6F,KAAK,gBAEZ,KAAKgB,EAAA+c,aAAag3B,MAahB,OAZIs3B,EAASrrE,EAAA8vC,kBAAkBlzB,MAC7BzjB,KAAK6F,KAAK,QACV7F,KAAKiyE,oBAAoBC,GACzBlyE,KAAK6F,KAAK,YAEyB,OAAhCssE,EAAStrE,EAAA4vC,aAAahzB,KACzBzjB,KAAK6F,KAAK,UACV7F,KAAK6F,KAAKssE,GACVnyE,KAAK6F,KAAK,QAEV7F,KAAK6F,KAAK,aAId,KAAKgB,EAAA+c,aAAayuD,OAClB,KAAKxrE,EAAA+c,aAAauF,KAClB,KAAKtiB,EAAA+c,aAAa0uD,WAClB,KAAKzrE,EAAA+c,aAAa2uD,aAChB,MAAM,IAAI7gE,MAAM,mBAElB,KAAK7K,EAAA+c,aAAaC,SAGhB,OAFA7jB,KAAK6F,KAAK,UACV7F,KAAK6F,KAAKgB,EAAAid,iBAAiBL,GAAM5e,SAAS,KAG5C,KAAKgC,EAAA+c,aAAaI,SAKhB,OAJAhkB,KAAK6F,KAAK,KACV7F,KAAK6F,KAAKgB,EAAAkuC,iBAAiBtxB,GAAM5e,SAAS,KAC1C7E,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAAqd,iBAAiBT,IAG5C,KAAK5c,EAAA+c,aAAaO,UAClB,KAAKtd,EAAA+c,aAAa4uD,UAChB,MAAM,IAAI9gE,MAAM,mBAElB,KAAK7K,EAAA+c,aAAawE,KAQhB,OAPApoB,KAAK6F,KAAK,SACV7F,KAAK6F,KAAKmsE,EAAiBhgE,IAC3BhS,KAAK6F,KAAK,MACV7F,KAAK6F,KAAKgB,EAAAuuC,cAAc3xB,GAAM5e,SAAS,KACvC7E,KAAK6F,KAAK,OACV7F,KAAKiyE,oBAAoBprE,EAAAwuC,WAAW5xB,SACpCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA+c,aAAa6uD,MAUhB,OATAzyE,KAAK6F,KAAK,UACV7F,KAAK6F,KAAKmsE,EAAiBhgE,IAC3BhS,KAAK6F,KAAK,MACV7F,KAAK6F,KAAKgB,EAAA2uC,eAAe/xB,GAAM5e,SAAS,KACxC7E,KAAK6F,KAAK,OACV7F,KAAKiyE,oBAAoBprE,EAAA6uC,YAAYjyB,IACrCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA+uC,cAAcnyB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA+c,aAAa6C,MAChB,OAAQzU,GACN,OAEE,YADAhS,KAAK6F,KAAKgB,EAAA6f,iBAAiBjD,GAAM5e,SAAS,KAG5C,OASE,YARA7E,KAAK6F,KACHsrE,cACExkE,QACE9F,EAAAkhB,oBAAoBtE,GACpB5c,EAAAiuC,qBAAqBrxB,MAM7B,OAEE,YADAzjB,KAAK6F,KAAKgB,EAAAmhB,iBAAiBvE,GAAM5e,SAAS,KAG5C,OAEE,YADA7E,KAAK6F,KAAKgB,EAAAohB,iBAAiBxE,GAAM5e,SAAS,KAI9C,MAEF,KAAKgC,EAAA+c,aAAa0D,MAChB,OAAQzgB,EAAA0gB,WAAW9D,IACjB,KAAK5c,EAAA2gB,QAAQG,OAIX,OAHA3nB,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQI,OAIX,OAHA5nB,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQK,UAIX,OAHA7nB,KAAK6F,KAAK,gBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQ++C,OACb,KAAK1/D,EAAA2gB,QAAQg/C,OAGX,OAFAxmE,KAAK6F,KAAK,UACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQkrD,OAIX,OAHA1yE,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQmrD,QAIX,OAHA3yE,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQorD,SAIX,OAHA5yE,KAAK6F,KAAK,eACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQqrD,SAIX,OAHA7yE,KAAK6F,KAAK,eACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQsrD,WAIX,OAHA9yE,KAAK6F,KAAK,iBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQurD,QAIX,OAHA/yE,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQC,OACb,KAAK5gB,EAAA2gB,QAAQE,OAGX,OAFA1nB,KAAK6F,KAAK,UACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQwrD,OAIX,OAHAhzE,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQyrD,OAIX,OAHAjzE,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQ0rD,UAIX,OAHAlzE,KAAK6F,KAAK,gBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQ2rD,OAIX,OAHAnzE,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQ4rD,QAIX,OAHApzE,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQ6rD,SAIX,OAHArzE,KAAK6F,KAAK,eACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQ8rD,SAIX,OAHAtzE,KAAK6F,KAAK,eACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQ+rD,WAIX,OAHAvzE,KAAK6F,KAAK,iBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQgsD,QAIX,OAHAxzE,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQ+zC,UAGX,OAFAv7D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQg0C,UAGX,OAFAx7D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQ8zC,QAKb,KAAKz0D,EAAA2gB,QAAQ+yC,cAGX,OAFAv6D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQ8yC,cAGX,OAFAt6D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQizC,cAGX,OAFAz6D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQgzC,cAGX,OAFAx6D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQmzC,cAGX,OAFA36D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQkzC,cAGX,OAFA16D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQqzC,cAGX,OAFA76D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQozC,cAGX,OAFA56D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQisD,eAIX,OAHAzzE,KAAK6F,KAAK,yBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQksD,eAIX,OAHA1zE,KAAK6F,KAAK,yBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQwzC,gBAGX,OAFAh7D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQ4zC,gBAGX,OAFAp7D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQyzC,gBAGX,OAFAj7D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQ6zC,gBAGX,OAFAr7D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQszC,gBAGX,OAFA96D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQ0zC,gBAGX,OAFAl7D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQuzC,gBAGX,OAFA/6D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQ2zC,gBAGX,OAFAn7D,KAAK6F,KAAK,mBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQ4yC,WAGX,OAFAp6D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQ6yC,UAGX,OAFAr6D,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,IAGzC,KAAK5c,EAAA2gB,QAAQmsD,eAIX,OAHA3zE,KAAK6F,KAAK,yBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA2gB,QAAQosD,eAIX,OAHA5zE,KAAK6F,KAAK,yBACV7F,KAAKiyE,oBAAoBprE,EAAAsuC,cAAc1xB,SACvCzjB,KAAK6F,KAAK,KAId,MAEF,KAAKgB,EAAA+c,aAAaQ,OAChB,OAAQvd,EAAAwd,YAAYZ,IAClB,KAAK5c,EAAAyd,SAASqvC,OACd,KAAK9sD,EAAAyd,SAAS43C,OACd,KAAKr1D,EAAAyd,SAAS63C,OACd,KAAKt1D,EAAAyd,SAAS83C,OAIZ,OAHAp8D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS+3C,OACd,KAAKx1D,EAAAyd,SAASg4C,OACd,KAAKz1D,EAAAyd,SAASi4C,OACd,KAAK11D,EAAAyd,SAASk4C,OAIZ,OAHAx8D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASiC,OACd,KAAK1f,EAAAyd,SAASm4C,OACd,KAAK51D,EAAAyd,SAASo4C,OACd,KAAK71D,EAAAyd,SAASq4C,OAIZ,OAHA38D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASu4C,OACd,KAAKh2D,EAAAyd,SAASw4C,OACd,KAAKj2D,EAAAyd,SAAS04C,OACd,KAAKn2D,EAAAyd,SAAS24C,OAIZ,OAHAj9D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS6C,OAMZ,OALAnnB,KAAK6F,KAAK,eACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAAS8C,OACd,KAAKvgB,EAAAyd,SAAS44C,OAIZ,OAHAl9D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS+C,OAMZ,OALArnB,KAAK6F,KAAK,eACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAASsC,OACd,KAAK/f,EAAAyd,SAASm5C,OAIZ,OAHAz9D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASo5C,MACd,KAAK72D,EAAAyd,SAASq5C,MAIZ,OAHA39D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASs5C,OACd,KAAK/2D,EAAAyd,SAASu5C,OAIZ,OAHA79D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASwC,OACd,KAAKjgB,EAAAyd,SAAS+4C,OAIZ,OAHAr9D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS4C,OACd,KAAKrgB,EAAAyd,SAASk5C,OAIZ,OAHAx9D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS2C,OACd,KAAKpgB,EAAAyd,SAASi5C,OAIZ,OAHAv9D,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASuvD,QAMZ,OALA7zE,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAASwvD,QAMZ,OALA9zE,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAASC,MACd,KAAK1d,EAAAyd,SAASE,MACd,KAAK3d,EAAAyd,SAASG,MACd,KAAK5d,EAAAyd,SAASI,MAIZ,OAHA1kB,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASK,MACd,KAAK9d,EAAAyd,SAASM,MACd,KAAK/d,EAAAyd,SAASO,MACd,KAAKhe,EAAAyd,SAASQ,MAIZ,OAHA9kB,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASS,MACd,KAAKle,EAAAyd,SAASW,MACd,KAAKpe,EAAAyd,SAASa,MACd,KAAKte,EAAAyd,SAASc,MAIZ,OAHAplB,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASU,MAKZ,OAJAhlB,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,iBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASe,MACd,KAAKxe,EAAAyd,SAASiB,MACd,KAAK1e,EAAAyd,SAASmB,MACd,KAAK5e,EAAAyd,SAASoB,MAIZ,OAHA1lB,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASgB,MAKZ,OAJAtlB,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,kBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASqB,MACd,KAAK9e,EAAAyd,SAASuB,MACd,KAAKhf,EAAAyd,SAASyB,MACd,KAAKlf,EAAAyd,SAAS0B,MAIZ,OAHAhmB,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,YACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASsB,MAKZ,OAJA5lB,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,iBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS2B,MACd,KAAKpf,EAAAyd,SAAS6B,MACd,KAAKtf,EAAAyd,SAAS+B,MACd,KAAKxf,EAAAyd,SAASgC,MAIZ,OAHAtmB,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS4B,MAKZ,OAJAlmB,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,kBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASy4C,OAKZ,OAJA/8D,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,iBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS64C,OAKZ,OAJAn9D,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,iBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASyvD,QAMZ,OALA/zE,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAAS0vD,QAMZ,OALAh0E,KAAK6F,KAAK,cACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAASY,MAKZ,OAJAllB,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,iBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASkB,MAKZ,OAJAxlB,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,kBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAASwB,MAKZ,OAJA9lB,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,iBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS8B,MAKZ,OAJApmB,KAAK6F,KAAK,SACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,kBACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,IAG1C,KAAK5c,EAAAyd,SAAS2vD,YAMZ,OALAj0E,KAAK6F,KAAK,kBACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAAS4vD,OAMZ,OALAl0E,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAAS6vD,OAMZ,OALAn0E,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAAS8vD,YAMZ,OALAp0E,KAAK6F,KAAK,kBACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAAS+vD,OAMZ,OALAr0E,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAAyd,SAASgwD,OAMZ,OALAt0E,KAAK6F,KAAK,aACV7F,KAAKiyE,oBAAoBprE,EAAA2f,cAAc/C,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAA8f,eAAelD,SACxCzjB,KAAK6F,KAAK,KAId,OAEF,KAAKgB,EAAA+c,aAAaoF,OAUhB,OATAhpB,KAAK6F,KAAK,WACV7F,KAAK6F,KAAKmsE,EAAiBhgE,IAC3BhS,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAAoiB,cAAcxF,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAAqiB,cAAczF,IACvCzjB,KAAK6F,KAAK,MACV7F,KAAKiyE,oBAAoBprE,EAAAkwC,mBAAmBtzB,SAC5CzjB,KAAK6F,KAAK,KAGZ,KAAKgB,EAAA+c,aAAa2wD,KAGhB,OAFAv0E,KAAKiyE,oBAAoBprE,EAAAowC,aAAaxzB,SACtCzjB,KAAK6F,KAAK,OAGZ,KAAKgB,EAAA+c,aAAa+2B,OAQhB,aAPIu3B,EAASrrE,EAAAswC,eAAe1zB,KAC1BzjB,KAAK6F,KAAK,WACV7F,KAAKiyE,oBAAoBC,GACzBlyE,KAAK6F,KAAK,QAEV7F,KAAK6F,KAAK,cAId,KAAKgB,EAAA+c,aAAa4wD,KAChB,OAAQ3tE,EAAAywC,UAAU7zB,IAChB,KAAK5c,EAAAk9B,OAAO0wC,cAEV,YADAz0E,KAAK6F,KAAK,iBAGZ,KAAKgB,EAAAk9B,OAAO2wC,WAIV,OAHA10E,KAAK6F,KAAK,gBACV7F,KAAKiyE,oBAAoBprE,EAAA6wC,eAAej0B,EAAM,SAC9CzjB,KAAK6F,KAAK,KAId,MAEF,KAAKgB,EAAA+c,aAAaqyC,IAEhB,YADAj2D,KAAK6F,KAAK,OAGZ,KAAKgB,EAAA+c,aAAayF,YAEhB,YADArpB,KAAK6F,KAAK,iBAGZ,KAAKgB,EAAA+c,aAAa+wD,cAClB,KAAK9tE,EAAA+c,aAAagxD,UAClB,KAAK/tE,EAAA+c,aAAaixD,WAClB,KAAKhuE,EAAA+c,aAAakxD,YAEpB,MAAM,IAAIpjE,MAAM,oBAGVigE,EAAA1vE,UAAA4D,KAAR,SAAaT,GAEXpF,KAAKoF,KAAKS,KAAKT,IAGjBusE,EAAA1vE,UAAA8mD,OAAA,WACE,IAAIhX,EAAM/xC,KAAKoF,KAAKU,KAAK,IAEzB,OADA9F,KAAKoF,QACE2sC,GAEX4/B,EA7yBA,GA+yBA,SAAAK,EAA0BhgE,GACxB,OAAQA,GACN,OAAsB,MAAO,OAC7B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAA6B,MAAM,IAAIN,MAAM,oBAC7C,OAAsB,MAAM,IAAIA,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhBhS,EAAAiyE,4FCxDb,IAAA13C,EAAA95B,EAAA,IAOA40E,EAAA50E,EAAA,IAIA60E,EAAA70E,EAAA,IAKAuG,EAAAvG,EAAA,GAyCoCT,EAAAu1E,iBAtClCvuE,EAAAX,wBAOF,IAAAmvE,EAAA/0E,EAAA,IASAT,EAAA2nE,UAAA,SAA0BjiE,EAAcyK,EAAcsF,EACpDggE,GAIA,YALoD,IAAAhgE,OAAA,QACpD,IAAAggE,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAAnO,QAC1BoO,EAAO9N,UAAUjiE,EAAMyK,EAAMsF,GACtBggE,GAITz1E,EAAAmpE,SAAA,SAAyBsM,GACvB,OAAOA,EAAOtM,YAIhBnpE,EAAA01E,eAAA,SAA+BD,GAC7B,IAAI16D,EAAU06D,EAAO16D,QACrB,OAAOA,EAAQzQ,kBAAoByQ,EAAQvU,YAAYZ,OACnDmV,EAAQvU,YAAYuU,EAAQzQ,qBAC5B,MAONtK,EAAA21E,OAAA,SAAuBlxE,GACrB,OAAOA,EAAQd,UAAYqD,EAAA1D,mBAAmBM,MAIhD5D,EAAA41E,UAAA,SAA0BnxE,GACxB,OAAOA,EAAQd,UAAYqD,EAAA1D,mBAAmBO,SAIhD7D,EAAA61E,QAAA,SAAwBpxE,GACtB,OAAOA,EAAQd,UAAYqD,EAAA1D,mBAAmBQ,OAIhD9D,EAAA81E,cAAA,WACE,OAAO,IAAIv7C,EAAAs0B,SAIb7uD,EAAA+1E,UAAA,SAA0B/pE,EAAkB2U,GAC1C3U,EAAQ2U,OAASA,GAInB3gB,EAAAg2E,iBAAA,SAAiChqE,EAAkBmB,GACjDnB,EAAQmB,cAAgBA,GAI1BnN,EAAAi2E,YAAA,SAA4BjqE,EAAkBoB,GAC5CpB,EAAQoB,SAAWA,GAIrBpN,EAAAk2E,gBAAA,SAAgClqE,EAAkB+iD,GAChD/iD,EAAQ+iD,aAAeA,GAIzB/uD,EAAAm2E,eAAA,SAA+BnqE,EAAkBgjD,GAC/ChjD,EAAQgjD,YAAcA,GAIxBhvD,EAAAo2E,aAAA,SAA6BpqE,EAAkBmT,GAC7CnT,EAAQmT,UAAYA,GAItBnf,EAAAq2E,cAAA,SAA8BrqE,EAAkBqB,GAC9CrB,EAAQqB,WAAaA,GAIvBrN,EAAAs2E,eAAA,SAA+BtqE,EAAkB9K,EAAc6Q,GAC7D,IAAIJ,EAAgB3F,EAAQ2F,cACvBA,IAAe3F,EAAQ2F,cAAgBA,EAAgB,IAAIzH,KAChEyH,EAAc5D,IAAI7M,EAAM6Q,IAIb/R,EAAAu2E,uBAAsB,EAEtBv2E,EAAAw2E,uBAAsB,EAGnCx2E,EAAAy2E,cAAA,SAA8BzqE,EAAkBkjD,GAC9CljD,EAAQijD,UAAYC,GAItBlvD,EAAA02E,sBAAA,SAAsC1qE,EAAkB2qE,EAAoBC,GAC1E5qE,EAAQsB,kBAAoBqpE,EAC5B3qE,EAAQuB,gBAAkBqpE,GAI5B52E,EAAA62E,cAAA,SAA8BpB,GAC5B,OAAOA,EAAOpsB,UAIhBrpD,EAAA82E,eAAA,SAA+B/7D,EAAkB/O,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIuuB,EAAAi1B,SAASz0C,EAAS/O,GAASwkD,WAIxCxwD,EAAA+2E,gBAAA,SAAgC92E,GAC9B,IAAImyE,EAAa,IAAIiD,EAAApD,WAErB,OADAG,EAAWD,UAAUlyE,GACdmyE,EAAW/oB,UAIpBrpD,EAAAg3E,SAAA,SAAyBj8D,GACvB,OAAOu6D,EAAAnE,WAAWE,MAAMt2D,IAI1B/a,EAAAi3E,SAAA,SAAyBl8D,GACvB,OAAOu6D,EAAAzD,WAAWR,MAAMt2D,IAI1B,IAAAhU,EAAAtG,EAAA,GAAST,EAAAoD,eAAA2D,EAAA3D,6CCvKT,SAAA8zE,EAAwBhyC,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAAqgC,EAAyB5jE,EAAYsjC,EAAoBC,GACvDD,EAAOC,GAAcvjC,EACrBsjC,EAAOC,EAAS,GAAKvjC,IAAU,EAC/BsjC,EAAOC,EAAS,GAAKvjC,IAAU,GAC/BsjC,EAAOC,EAAS,GAAKvjC,IAAU,GAIjC,SAAAu1E,EAAwBjyC,EAAoBC,GAC1C,IAAIiyC,EAAKF,EAAQhyC,EAAQC,GACrBkyC,EAAKH,EAAQhyC,EAAQC,EAAS,GAClC,OAAOl4B,QAAQmqE,EAAIC,oDAnBrBr3E,EAAAk3E,UAQAl3E,EAAAwlE,WAQAxlE,EAAAm3E,UAOAn3E,EAAAulE,SAAA,SAAyB3jE,EAAYsjC,EAAoBC,GACvDqgC,EAASp2B,QAAQxtC,GAAQsjC,EAAQC,GACjCqgC,EAASn2B,SAASztC,GAAQsjC,EAAQC,EAAS,IAI7CnlC,EAAAs3E,QAAA,SAAwBpyC,EAAoBC,GAC1C,OAAOoyC,WAAWL,EAAQhyC,EAAQC,KAIpCnlC,EAAAylE,SAAA,SAAyB7jE,EAAYsjC,EAAoBC,GACvDqgC,EAASgS,WAAW51E,GAAQsjC,EAAQC,IAItCnlC,EAAAy3E,QAAA,SAAwBvyC,EAAoBC,GAC1C,OAAOuyC,WAAWP,EAAQjyC,EAAQC,KAIpCnlC,EAAA0lE,SAAA,SAAyB9jE,EAAYsjC,EAAoBC,GACvD,IAAIwyC,EAAWC,WAAWh2E,GAC1B4jE,EAASp2B,QAAQuoC,GAAWzyC,EAAQC,GACpCqgC,EAASn2B,SAASsoC,GAAWzyC,EAAQC,EAAS,mFChDhD,IAAM0yC,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB/3E,EAAAuxE,OAAA,SAAuBtrE,EAAckqC,GACnC,KAAOA,GAAS,GACdlqC,EAAGE,KAAK4xE,GACR5nC,GAAS,EAEPA,GAAS,IACXlqC,EAAGE,KAAK2xE,GACR3nC,GAAS,GAEPA,GACFlqC,EAAGE,KAAK0xE,mFCXZ,IAAMG,EAAS,GAMf,SAAA/lD,EAA8B9hB,GAK5B,IAJA,IAiBI26C,EAjBAzyB,EAAM,EACN1yB,EAAMwK,EAAKvK,OAGRyyB,EAAM,EAAI1yB,GACK,IAApBwK,EAAKnK,WAAWqyB,IAChBloB,EAAKnK,WAAWqyB,EAAM,IAAM2/C,GAE5B3/C,GAAO,EAUT,KAPIA,EAAM,GAAK1yB,EAAMwK,EAAKvK,UACxBuK,EAAOA,EAAKjK,UAAUmyB,EAAK1yB,GAC3BA,GAAO0yB,EACPA,EAAM,GAIDA,EAAM,EAAI1yB,GAAK,CAIpB,GAHAmlD,GAAQ,EAIN36C,EAAKnK,WAAWqyB,IAAQ2/C,GACA,IAAxB7nE,EAAKnK,WAAWqyB,EAAM,GACtB,CAGA,IADAyyB,EAAQzyB,EAAM,GAAK1yB,IAEjB0yB,EAAM,EAAI1yB,GACVwK,EAAKnK,WAAWqyB,EAAM,IAAM2/C,EAC5B,CACA7nE,EAAO26C,EACH36C,EAAKjK,UAAU,EAAGmyB,GAClBloB,EAAKjK,UAAU,EAAGmyB,GAAOloB,EAAKjK,UAAUmyB,EAAM,GAClD1yB,GAAO,EACP,SAKF,IADAmlD,EAAQzyB,EAAM,GAAK1yB,IACkB,IAAxBwK,EAAKnK,WAAWqyB,EAAM,IACjCA,EAAM,EAAI1yB,GACc,IAAxBwK,EAAKnK,WAAWqyB,EAAM,IACtBloB,EAAKnK,WAAWqyB,EAAM,IAAM2/C,EAC5B,CAGA,IADA,IAAIC,EAAO5/C,IACF4/C,GAAQ,GACf,GAAI9nE,EAAKnK,WAAWiyE,IAASD,EAAW,CAClC3/C,EAAM4/C,GAAQ,GACS,IAAzB9nE,EAAKnK,WAAWiyE,EAAO,IACE,IAAzB9nE,EAAKnK,WAAWiyE,EAAO,KAEvB9nE,EAAO26C,EACH36C,EAAKjK,UAAU,EAAG+xE,GAClB9nE,EAAKjK,UAAU,EAAG+xE,GAAQ9nE,EAAKjK,UAAUmyB,EAAM,GACnD1yB,GAAO0yB,EAAM,EAAI4/C,EACjB5/C,EAAM4/C,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAK5/C,EAAM,IACT,GAAPA,GACgB,IAAlBloB,EAAKnK,WAAW,IACE,IAAlBmK,EAAKnK,WAAW,IAChB,CAEAL,GADAwK,EAAOA,EAAKjK,UAAUmyB,EAAM,IACjBzyB,OACX,WAKRyyB,IAEF,OAAO1yB,EAAM,EAAIwK,EAAO,IAc1B,SAAA+nE,EAAwB7yE,GAEtB,IADA,IAAIgzB,EAAMhzB,EAAeO,SAChByyB,EAAM,GACb,GAAIhzB,EAAeW,WAAWqyB,IAAQ2/C,EACpC,OAAO3yE,EAAea,UAAU,EAAGmyB,GAGvC,MAAO,IArGTr4B,EAAAiyB,gBAoFAjyB,EAAAmyB,YAAA,SAA4B9sB,EAAwB8yE,GAClD,OAAI9yE,EAAe6sB,WAAW,QACrB7sB,EAEF4sB,EACLimD,EAAQC,GAAUr9B,OAAOmM,aAAa+wB,GAAa3yE,IAKvDrF,EAAAk4E,yFCvGA,SAAkBE,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkBp4E,EAAAo4E,WAAAp4E,EAAAo4E,cAuIlBp4E,EAAA+F,YAAA,SAA4B/E,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAAylD,aAAA,SAA6BzkD,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAA+jD,eAAA,SAA+B/iD,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA2nD,aAAA,SAA6B3mD,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAklD,kBAAA,SAAkClkD,GAChC,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACnB,IAADA,GACC,IAADA,GACAA,EAAI,KAiLb,SAAkCwD,GAChC,QAAOA,EAAO,GAAKA,EAAO,QACnB6zE,EAAmB7zE,EAAa8zE,GAnLpBC,CAAyBv3E,IAI9ChB,EAAAmlD,mBAAA,SAAmCnkD,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAAqlD,iBAAA,SAAiCrkD,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,KAuKb,SAAiCwD,GAC/B,QAAOA,EAAO,GAAKA,EAAO,QACnB6zE,EAAmB7zE,EAAag0E,GAzKpBC,CAAwBz3E,IAI7C,IAAMs3E,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__25__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 21,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 22,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 23,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 24,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 25,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 26,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 27\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Prefix used to indicate a filespace element. */\r\nexport const FILESPACE_PREFIX = \"file:\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  FILESPACE_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeParameterNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  localName: string;\r\n  externalName: string;\r\n  externalNameAlt: string;\r\n  declaration: ImportDeclaration | null; // not set if a filespace\r\n}\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  externalName: string;\r\n  isReExport: bool;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a module-level export. */\r\nclass ModuleExport {\r\n  element: Element;\r\n  identifier: IdentifierExpression;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\r\n\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Start function reference. */\r\n  startFunction: FunctionPrototype;\r\n  /** Main function reference, if present. */\r\n  mainFunction: FunctionPrototype | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n\r\n  /** Currently processing filespace. */\r\n  currentFilespace: Filespace;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.resolver = new Resolver(this);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    var tmp: string;\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\r\n      this.getSource( tmp                                                    + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // add built-in types\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    // add compiler hints\r\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\r\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n\r\n      // create one filespace per source\r\n      let filespace = new Filespace(this, source);\r\n      this.elementsLookup.set(filespace.internalName, filespace);\r\n      this.currentFilespace = filespace;\r\n\r\n      // process this source's statements\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let declaration = queuedImport.declaration;\r\n      if (declaration) { // named\r\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              declaration.range,\r\n              (<ImportStatement>declaration.parent).path.value,\r\n              declaration.externalName.text\r\n            );\r\n            ++i;\r\n          }\r\n        }\r\n      } else { // filespace\r\n        let element = this.elementsLookup.get(queuedImport.externalName);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            assert(false); // already reported by the parser not finding the file\r\n            ++i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.externalName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let element = this.elementsLookup.get(name);\r\n          if (element) this.elementsLookup.set(alias, element);\r\n          else throw new Error(\"element not found: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    if (this.elementsLookup.has(\"Array\")) {\r\n      let element = assert(this.elementsLookup.get(\"Array\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>element;\r\n    }\r\n\r\n    // register 'String'\r\n    if (this.elementsLookup.has(\"String\")) {\r\n      let element = assert(this.elementsLookup.get(\"String\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (instance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>element).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = instance;\r\n          this.typesLookup.set(\"string\", instance.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'start'\r\n    {\r\n      let element = assert(this.elementsLookup.get(\"start\"));\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      this.startFunction = <FunctionPrototype>element;\r\n    }\r\n\r\n    // register 'main' if present\r\n    if (this.moduleLevelExports.has(\"main\")) {\r\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\r\n      if (\r\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\r\n      ) {\r\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\r\n        this.mainFunction = <FunctionPrototype>element;\r\n      }\r\n    }\r\n\r\n    // register 'abort' if present\r\n    if (this.elementsLookup.has(\"abort\")) {\r\n      let element = <Element>this.elementsLookup.get(\"abort\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      if (instance) this.abortInstance = instance;\r\n    }\r\n\r\n    // register 'memory.allocate' if present\r\n    if (this.elementsLookup.has(\"memory\")) {\r\n      let element = <Element>this.elementsLookup.get(\"memory\");\r\n      let members = element.members;\r\n      if (members) {\r\n        if (members.has(\"allocate\")) {\r\n          element = assert(members.get(\"allocate\"));\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n          if (instance) this.memoryAllocateInstance = instance;\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    if (\r\n      this.elementsLookup.has(\"__gc_allocate\") &&\r\n      this.elementsLookup.has(\"__gc_link\") &&\r\n      this.elementsLookup.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      this.hasGC = true;\r\n    }\r\n  }\r\n\r\n  /** Sets a constant integer value. */\r\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.elementsLookup.set(globalName,\r\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n        .withConstantIntegerValue(value)\r\n    );\r\n  }\r\n\r\n  /** Sets a constant float value. */\r\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.elementsLookup.set(globalName,\r\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n        .withConstantFloatValue(value)\r\n    );\r\n  }\r\n\r\n  /** Tries to locate an import by traversing exports and queued exports. */\r\n  private tryLocateImport(\r\n    externalName: string,\r\n    queuedNamedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(externalName)) return element;\r\n      let queuedExport = queuedNamedExports.get(externalName);\r\n      if (!queuedExport) break;\r\n      if (queuedExport.isReExport) {\r\n        externalName = queuedExport.externalName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.externalName);\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Checks that only supported decorators are present. */\r\n  private checkDecorators(\r\n    decorators: DecoratorNode[],\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (flag == DecoratorFlags.BUILTIN) {\r\n          if (decorator.range.source.isLibrary) {\r\n            presentFlags |= flag;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          }\r\n        } else if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Checks and sets up global options of an element. */\r\n  private checkGlobal(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    // alias globally if explicitly annotated @global or exported from a top-level library file\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n      }\r\n    }\r\n    // builtins use the global name directly\r\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      element.internalName = declaration.programLevelInternalName;\r\n    }\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false); // should have been reported while parsing\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(false);\r\n      }\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      }\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      this.currentFilespace.members.set(simpleName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobal(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // named\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n      }\r\n    } else { // TODO: filespace\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    internalName: string,\r\n    element: Element,\r\n    externalIdentifier: IdentifierExpression\r\n  ): void {\r\n    // add to file-level exports\r\n    this.fileLevelExports.set(internalName, element);\r\n\r\n    // add to filespace\r\n    var internalPath = externalIdentifier.range.source.internalPath;\r\n    var prefix = FILESPACE_PREFIX + internalPath;\r\n    var filespace = this.elementsLookup.get(prefix);\r\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\r\n    assert(filespace.kind == ElementKind.FILESPACE);\r\n    var simpleName = externalIdentifier.text;\r\n    (<Filespace>filespace).members.set(simpleName, element);\r\n\r\n    // add global alias if a top-level export of a library file\r\n    var source = externalIdentifier.range.source;\r\n    if (source.isLibrary) {\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          externalIdentifier.range, simpleName\r\n        );\r\n      } else {\r\n        element.internalName = simpleName;\r\n        this.elementsLookup.set(simpleName, element);\r\n      }\r\n\r\n    // add module level export if a top-level export of an entry file\r\n    } else if (source.isEntry) {\r\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\r\n        element,\r\n        identifier: externalIdentifier\r\n      });\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (this.elementsLookup.has(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          <Element>this.elementsLookup.get(referencedName),\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.externalName = referencedName; // -> here: local name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.externalName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.externalName = referencedName; // -> here: external name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE |\r\n            DecoratorFlags.EXTERNAL\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // resolve right away if the exact filespace exists\r\n      let filespace = this.elementsLookup.get(statement.internalPath);\r\n      if (filespace) {\r\n        this.elementsLookup.set(internalName, filespace);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      let queuedImport = new QueuedImport();\r\n      queuedImport.localName = internalName;\r\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\r\n      queuedImport.externalName = externalName;\r\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\r\n      queuedImport.declaration = null; // filespace\r\n      queuedImports.push(queuedImport);\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedNamedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var localName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(localName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, localName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(externalName)) {\r\n      this.elementsLookup.set(localName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.localName = localName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration; // named\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobal(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      this.currentFilespace.members.set(simpleName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          if (existingExport.element !== namespace) { // not merged\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: namespace,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators,\r\n              DecoratorFlags.GLOBAL |\r\n              DecoratorFlags.INLINE |\r\n              DecoratorFlags.EXTERNAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        this.currentFilespace.members.set(simpleName, global);\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(simpleName)) {\r\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: global,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n      }\r\n      this.checkGlobal(global, declaration);\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link Filespace}. */\r\n  FILESPACE,\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A filespace representing the implicit top-level namespace of a source. */\r\nexport class Filespace extends Element {\r\n\r\n  kind = ElementKind.FILESPACE;\r\n\r\n  /** File members (externally visible only). */\r\n  members: Map<string,Element>; // more specific\r\n\r\n  /** Constructs a new filespace. */\r\n  constructor(\r\n    program: Program,\r\n    source: Source\r\n  ) {\r\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\r\n    this.members = new Map();\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a filespace in being user-declared with a name. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(value: I64): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 2,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n\r\n  // conditional\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 6,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 7,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 8,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 9,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 10,\r\n\r\n  // special\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 11,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 12,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables. */\r\n  free(): Flow {\r\n    var parent = assert(this.parent);\r\n    if (this.scopedLocals) { // free block-scoped locals\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possibly combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: {\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // never overflows because globals are wrapped on set\r\n      case ExpressionId.GetGlobal: return false;\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  var fromSize = fromType.byteSize;\r\n  var toSize = toType.byteSize;\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromSize > toSize\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; if (members) setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\nexport function isLastStatement(statement: Statement): bool {\r\n  var parent = assert(statement.parent);\r\n  if (parent.kind == NodeKind.BLOCK) {\r\n    let statements = (<BlockStatement>parent).statements;\r\n    if (statements[statements.length - 1] === statement) {\r\n      switch (assert(parent.parent).kind) {\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.METHODDECLARATION: return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport const enum NativeType {\r\n  None = 0,        // _BinaryenTypeNone(),\r\n  I32  = 1,        // _BinaryenTypeInt32(),\r\n  I64  = 2,        // _BinaryenTypeInt64(),\r\n  F32  = 3,        // _BinaryenTypeFloat32(),\r\n  F64  = 4,        // _BinaryenTypeFloat64(),\r\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\r\n  Auto = -1        // _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = memory.allocate(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocPtrArray(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0; // for free'ing\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    memory.free(this.cachedByValue);\r\n    memory.free(this.cachedTemporaryName);\r\n    memory.free(this.cachedPrecomputeName);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.toString() + \" | null\"\r\n          : classReference.toString();\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\r\n  }\r\n\r\n  skipIdentifierName(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  FlowFlags,\r\n\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  DecoratorFlags,\r\n  FieldPrototype,\r\n  Field\r\n} from \"./program\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  PATH_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(program: Program) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signatures specifically\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\r\n      if (!signature) return null;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\r\n\r\n    // check file-global / program-global enum or class\r\n    {\r\n      let elementsLookup = this.program.elementsLookup;\r\n      let element: Element | null;\r\n      if (\r\n        (element = elementsLookup.get(localName)) || // file-global\r\n        (element = elementsLookup.get(globalName))   // program-global\r\n      ) {\r\n        switch (element.kind) {\r\n          case ElementKind.ENUM: {\r\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_generic,\r\n                  node.range, element.internalName\r\n                );\r\n              }\r\n              return null;\r\n            }\r\n            return Type.i32;\r\n          }\r\n          case ElementKind.CLASS_PROTOTYPE: {\r\n            let instance = this.resolveClassInclTypeArguments(\r\n              <ClassPrototype>element,\r\n              typeNode.typeArguments,\r\n              contextualTypeArguments,\r\n              node\r\n            ); // reports\r\n            if (!instance) return null;\r\n            return node.isNullable ? instance.type.asNullable() : instance.type;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    {\r\n      let alias = this.program.typeAliases.get(simpleName);\r\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\r\n    }\r\n\r\n    // resolve parameters\r\n    {\r\n      let typeArgumentNodes = typeNode.typeArguments;\r\n      if (typeArgumentNodes) {\r\n        let numTypeArguments = typeArgumentNodes.length;\r\n        let paramTypes = new Array<Type>(numTypeArguments);\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          let paramType = this.resolveType( // reports\r\n            typeArgumentNodes[i],\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n          if (!paramType) return null;\r\n          paramTypes[i] = paramType;\r\n        }\r\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\r\n          let instanceKey = typesToString(paramTypes);\r\n          if (instanceKey.length) {\r\n            localName += \"<\" + instanceKey + \">\";\r\n            globalName += \"<\" + instanceKey + \">\";\r\n          }\r\n        } else if (contextualTypeArguments) {\r\n          let placeholderType = contextualTypeArguments.get(globalName);\r\n          if (placeholderType) return placeholderType;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check file-global / program-global type\r\n    {\r\n      let typesLookup = this.program.typesLookup;\r\n      let type: Type | null;\r\n      if (\r\n        (type = typesLookup.get(localName)) ||\r\n        (type = typesLookup.get(globalName))\r\n      ) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    context: Element | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n\r\n    if (context) {\r\n\r\n      switch (context.kind) {\r\n        case ElementKind.FUNCTION: { // search locals, use prototype\r\n          element = (<Function>context).flow.getScopedLocal(name);\r\n          if (element) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n          context = (<Function>context).prototype.parent;\r\n          break;\r\n        }\r\n        case ElementKind.CLASS: { // use prototype\r\n          context = (<Class>context).prototype.parent;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // search context\r\n      while (context) {\r\n        let members = context.members;\r\n        if (members) {\r\n          if (element = members.get(name)) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n        }\r\n        context = context.parent;\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    var elementsLookup = this.program.elementsLookup;\r\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = elementsLookup.get(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = this.resolveFunction(\r\n          assert((<Property>target).getterPrototype),\r\n          null,\r\n          null,\r\n          reportMode\r\n        );\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members) {\r\n          let member = members.get(propertyName);\r\n          if (member) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType(\r\n          (<AssertionExpression>expression).toType,\r\n          contextualFunction.flow.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return this.program.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = this.resolveFunctionInclTypeArguments(\r\n            <FunctionPrototype>target,\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression,\r\n            reportMode\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this.program, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n              targetExpression.range, target.internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = prototype.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = prototype.declaration;\r\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\r\n    var classPrototype = prototype.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = prototype.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(prototype.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = this.resolveClass(\r\n        assert(classPrototype),\r\n        classTypeArguments,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      prototype,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototype partially by applying the specified type arguments. */\r\n  resolveFunctionPartially(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): FunctionPrototype | null {\r\n    assert(prototype.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(prototype.classPrototype);\r\n\r\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\r\n\r\n    var simpleName = prototype.simpleName;\r\n    var partialKey = typesToString(typeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      prototype.declaration,\r\n      classPrototype,\r\n      prototype.decoratorFlags\r\n    );\r\n    partialPrototype.flags = prototype.flags;\r\n    partialPrototype.operatorKind = prototype.operatorKind;\r\n    partialPrototype.classTypeArguments = typeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    prototype: ClassPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Copy contextual type arguments so we don't pollute the original map\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    var declaration = prototype.declaration;\r\n    if (typeArguments) {\r\n      let typeParameters = declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameters.length;\r\n      let actualTypeArguments = typeArguments.length;\r\n      assert(actualTypeArguments == expectedTypeArguments);\r\n      for (let i = 0; i < actualTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      assert(declaration.typeParameters.length == 0);\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.resolveType(\r\n        declaration.extendsType,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            declaration.extendsType.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            declaration.extendsType.range, baseClass.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(declaration.name.range, declaration.extendsType.range)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var simpleName = prototype.simpleName;\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve constructor by first applying the class type arguments\r\n    if (prototype.constructorPrototype) {\r\n      let constructorPartial = this.resolveFunctionPartially(\r\n        prototype.constructorPrototype,\r\n        typeArguments,\r\n        reportMode\r\n      );\r\n      if (!constructorPartial) return null;\r\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (prototype.instanceMembers) {\r\n      for (let member of prototype.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields\r\n            if (!fieldDeclaration.type) {\r\n              if (baseClass !== null && baseClass.members !== null) {\r\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\r\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\r\n                  assert(baseField.kind == ElementKind.FIELD);\r\n                  fieldType = (<Field>baseField).type;\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    fieldDeclaration.name.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldDeclaration.type,\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break;\r\n            let fieldInstance = new Field(\r\n              <FieldPrototype>member,\r\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n              fieldType,\r\n              fieldDeclaration,\r\n              instance\r\n            );\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\r\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\r\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.members.set(member.simpleName, fieldInstance);\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = this.resolveFunctionPartially(\r\n              <FunctionPrototype>member,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialPrototype) return null;\r\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n            instance.members.set(member.simpleName, partialPrototype);\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\r\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              prototype\r\n            );\r\n            let partialGetterPrototype = this.resolveFunctionPartially(\r\n              getterPrototype,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype\r\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = this.resolveFunctionPartially(\r\n                setterPrototype,\r\n                typeArguments,\r\n                reportMode\r\n              );\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype\r\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = this.resolveFunctionPartially(\r\n          overloadPrototype,\r\n          typeArguments,\r\n          reportMode\r\n        );\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\r\n      } else {\r\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      let typeParameterNodes = prototype.declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameterNodes.length;\r\n      assert(expectedTypeArguments > 0);\r\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\r\n      if (expectedTypeArguments != actualTypeArguments) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      resolvedTypeArguments = this.resolveTypeArguments(\r\n        typeParameterNodes,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate,\r\n  compileAbort,\r\n  compileIterateRoots\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getGetLocalIndex,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n  DecoratorKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration,\r\n\r\n  nodeIsConstantValue,\r\n  isLastStatement,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current outer function in compilation, if compiling a function expression. */\r\n  currentOuterFunction: Function | null = null;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunctionInstance: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: FunctionRef[] = [];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function\r\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\r\n    this.startFunctionInstance = startFunctionInstance;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.startFunctionBody = startFunctionBody;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    if (startFunctionBody.length || program.mainFunction !== null) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!program.mainFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // determine initial page size\r\n    var numPages = this.memorySegments.length\r\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n      : 0;\r\n    module.setMemory(\r\n      numPages,\r\n      this.options.isWasm64\r\n        ? Module.MAX_MEMORY_WASM64\r\n        : Module.MAX_MEMORY_WASM32,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      module.setFunctionTable(functionTable);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    // set up module exports\r\n    for (let [name, moduleExport] of program.moduleLevelExports) {\r\n      this.makeModuleExport(name, moduleExport.element);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (element.kind == ElementKind.NAMESPACE) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (element.kind) {\r\n\r\n      // export global\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<Global>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<EnumValue>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // export function\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n\r\n      // export getter and setter\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>element).getterPrototype);\r\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterPrototype;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export a getter and a setter\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // skip prototype and export instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          let instanceName = name;\r\n          if (instance.is(CommonFlags.GENERIC)) {\r\n            let fullName = instance.internalName;\r\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n          }\r\n          this.makeModuleExport(instanceName, instance, prefix);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          let instanceName = name;\r\n          if (instance.is(CommonFlags.GENERIC)) {\r\n            let fullName = instance.internalName;\r\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n          }\r\n          let ctor = instance.constructorInstance;\r\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\r\n          this.makeModuleExport(instanceName, instance, prefix);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // all possible members already handled above\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE: break;\r\n\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunctionInstance = this.startFunctionInstance;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunctionInstance;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpressionRetainType( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        if (declaration) {\r\n          mangleImportName(global, declaration, global.parent);\r\n        } else {\r\n          mangleImportName_moduleName = \"env\";\r\n          mangleImportName_elementName = global.simpleName;\r\n        }\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (declaration !== null && declaration.initializer !== null) {\r\n      if (!initExpr) {\r\n        initExpr = this.compileExpression(\r\n          declaration.initializer,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        let initExpr: ExpressionRef;\r\n        if (valueDeclaration.value) {\r\n          initExpr = this.compileExpression(\r\n            <Expression>valueDeclaration.value,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueDeclaration.value.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          previousValueIsMut = true;\r\n        } else {\r\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\r\n        if (instance.is(CommonFlags.MAIN)) {\r\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\r\n          stmts.unshift(\r\n            module.createIf(\r\n              module.createUnary(\r\n                UnaryOp.EqzI32,\r\n                module.createGetGlobal(\"~started\", NativeType.I32)\r\n              ),\r\n              module.createBlock(null, [\r\n                module.createCall(\"start\", null, NativeType.None),\r\n                module.createSetGlobal(\"~started\", module.createI32(1))\r\n              ])\r\n            )\r\n          );\r\n        }\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmts.push(module.createGetLocal(0, nativeSizeType));\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmts.push(module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n              ));\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n        stmt = !stmts.length\r\n          ? module.createNop()\r\n          : stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, returnType.toNativeType());\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n      // concrete functions cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\r\n\r\n      // create the function import\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var fileLevelExports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    if (!members) return; // filespace\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let element = fileLevelExports.get(\r\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\r\n      );\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      declaration\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.ref);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunctionInstance) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var parentFlow = this.currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    this.currentFunction.flow = flow.free();\r\n    parentFlow.inherit(flow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    parentFlow.inherit(flow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var parentFlow = currentFunction.flow;\r\n    var ifTrueFlow = parentFlow.fork();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.free();\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = parentFlow.fork();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      currentFunction.flow = ifFalseFlow.free();\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      parentFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = parentFlow.fork();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      flow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      currentFunction.flow = flow.free();\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunctionInstance &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.resolver.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var currentFunction = this.currentFunction;\r\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          targetType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.resolver.currentThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.resolver.currentThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        this.currentFunction.flow.contextualTypeArguments,\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    return ret;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentEnum || currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.resolver.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return module.createUnreachable();\r\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\r\n      ? type.nonNullableType.isAssignableTo(isType)\r\n        ? module.createBinary( // not precomputeable\r\n            type.is(TypeFlags.LONG)\r\n              ? BinaryOp.NeI64\r\n              : BinaryOp.NeI32,\r\n            expr,\r\n            type.toNativeZero(module)\r\n          )\r\n        : module.createI32(0)\r\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else if (i64_is_u32(intValue)) {\r\n          this.currentType = Type.u32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    var elementCount = expressions.length;\r\n    if (elementCount) { // non-empty static or dynamic\r\n      let nativeElementType = elementType.toNativeType();\r\n      let values: usize;\r\n      let byteLength: usize;\r\n      switch (nativeElementType) {\r\n        case NativeType.I32: {\r\n          values = changetype<usize>(new Int32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          values = changetype<usize>(new Array<I64>(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          values = changetype<usize>(new Float32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          values = changetype<usize>(new Float64Array(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // precompute value expressions\r\n      let exprs = new Array<ExpressionRef>(elementCount);\r\n      let expr: BinaryenExpressionRef;\r\n      for (let i = 0; i < elementCount; ++i) {\r\n        exprs[i] = expressions[i]\r\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          : elementType.toNativeZero(module);\r\n        if (isStatic) {\r\n          expr = module.precomputeExpression(exprs[i]);\r\n          if (getExpressionId(expr) == ExpressionId.Const) {\r\n            assert(getExpressionType(expr) == nativeElementType);\r\n            switch (nativeElementType) {\r\n              case NativeType.I32: {\r\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                changetype<I64[]>(values)[i] = i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\r\n                break;\r\n              }\r\n              default: assert(false); // checked above\r\n            }\r\n          } else {\r\n            // TODO: emit a warning if declared 'const'\r\n            // if (isConst) {\r\n            //   this.warn(\r\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            //     reportNode.range\r\n            //   );\r\n            // }\r\n            isStatic = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let usizeTypeSize = this.options.usizeType.byteSize;\r\n      if (isStatic) { // non-empty, all elements can be precomputed\r\n\r\n        // Create a combined static memory segment composed of:\r\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n        let data = new Uint8Array(arraySize + bufferTotalSize);\r\n        let segment = this.addMemorySegment(data);\r\n        let offset = 0;\r\n\r\n        // write Array struct\r\n        if (usizeTypeSize == 8) {\r\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n          offset += 8;\r\n        } else {\r\n          assert(i64_high(segment.offset) == 0);\r\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n          offset += 4;\r\n        }\r\n        writeI32(elementCount, data, offset); // length_\r\n        offset += 4;\r\n        assert(offset == arraySize);\r\n\r\n        // write ArrayBuffer struct\r\n        writeI32(byteLength, data, offset);\r\n        offset += bufferHeaderSize; // incl. alignment\r\n\r\n        // write ArrayBuffer data\r\n        switch (nativeElementType) {\r\n          case NativeType.I32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        assert(offset <= arraySize + bufferTotalSize);\r\n\r\n        this.currentType = arrayType;\r\n        return usizeTypeSize == 8\r\n          ? module.createI64(\r\n              i64_low(segment.offset),\r\n              i64_high(segment.offset)\r\n            )\r\n          : module.createI32(\r\n              i64_low(segment.offset)\r\n            );\r\n\r\n      } else { // non-empty, some elements can't be precomputed\r\n\r\n        this.currentType = arrayType;\r\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n        if (!setter) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            reportNode.range, arrayInstance.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let nativeArrayType = arrayType.toNativeType();\r\n        let currentFunction = this.currentFunction;\r\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\r\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\r\n        let index = 0;\r\n        stmts[index++] = module.createSetLocal(tempLocal.index,\r\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n            module.createI32(0), // this\r\n            module.createI32(elementCount)\r\n          ])\r\n        );\r\n        for (let i = 0; i < elementCount; ++i) {\r\n          stmts[index++] = this.makeCallDirect(setter, [\r\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n            module.createI32(i),\r\n            exprs[i]\r\n          ]);\r\n        }\r\n        assert(index + 1 == stmts.length);\r\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n        currentFunction.freeTempLocal(tempLocal);\r\n        this.currentType = arrayType;\r\n        return module.createBlock(null, stmts, nativeArrayType);\r\n      }\r\n\r\n    } else { // empty, TBD: cache this somehow?\r\n      this.currentType = arrayType;\r\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(0)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      compileAllocate(this, classReference, expression)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        currentFunction.flow.contextualTypeArguments\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        currentFunction.flow.contextualTypeArguments,\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the top-most visible constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance: Function | null = null;\r\n    do {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n      if (constructorInstance) break; // TODO: check visibility\r\n    } while (currentClassInstance = currentClassInstance.base);\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = this.makeAllocate(classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = this.resolver.resolveFunction(prototype, null);\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(this.resolver.currentThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenFlow = parentFlow.fork();\r\n    currentFunction.flow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.free();\r\n\r\n    var ifElseFlow = parentFlow.fork();\r\n    currentFunction.flow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    currentFunction.flow = ifElseFlow.free();\r\n\r\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        module.createBinary(op,\r\n          getValue,\r\n          nativeOne\r\n        ),\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\r\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      ),\r\n      false\r\n    );\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0x1)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement,\r\n  parentElement: Element | null = null\r\n): void {\r\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\r\n  mangleImportName_elementName = element.simpleName;\r\n\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorator.range\r\n        );\r\n      }\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET | CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifierName()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifierName()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.set(CommonFlags.QUOTED);\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.is(CommonFlags.QUOTED)) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression?\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) return null;\r\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\r\n      }\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\r\n      // FIXME: doesn't honor the actual externally visible name\r\n      this.visitElement(moduleExport.element);\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags,\r\n  Global,\r\n  DecoratorFlags,\r\n  Function\r\n} from \"./program\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isDefined\": { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case \"isConstant\": { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case \"isManaged\": { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"memory.size\": { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n\r\n    // user-defined diagnostic macros\r\n\r\n    case \"ERROR\": {\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case \"WARNING\": {\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case \"INFO\": {\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n\r\n    // gc\r\n\r\n    case \"iterateRoots\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  // __gc_allocate(size, markFn)\r\n  if (program.hasGC && classInstance.type.isManaged(program)) {\r\n    let allocateInstance = assert(program.gcAllocateInstance);\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset),\r\n        module.createI32(\r\n          ensureGCHook(compiler, classInstance)\r\n        )\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n\r\n  // memory.allocate(size)\r\n  } else {\r\n    let allocateInstance = program.memoryAllocateInstance;\r\n    if (!allocateInstance) {\r\n      program.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        reportNode.range, \"memory.allocate\"\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset)\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n  }\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\");\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if requires. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n\r\n  for (let element of compiler.program.elementsLookup.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for internals)\r\n  var members = classInstance.members;\r\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let customGC = assert(members.get(\"__gc\"));\r\n      assert(customGC.kind == ElementKind.FUNCTION);\r\n      assert(customGC.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!customGC.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert((<Function>customGC).signature.parameterTypes.length == 0);\r\n      assert((<Function>customGC).signature.returnType == Type.void);\r\n      customGC.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(<Function>customGC));\r\n      let index = compiler.ensureFunctionTableEntry(<Function>customGC);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(0);\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  functionTable[gcHookIndex] = module.addFunction(\r\n    classInstance.internalName + \"~gc\",\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  return gcHookIndex;\r\n}\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[ptr + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[ptr + (offset | 0)];\r\n};\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__25__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return new binaryen.Module(this.ref).emitText();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return new binaryen.Module(this.ref).emitAsmjs();\r\n};\r\n"],"sourceRoot":""}